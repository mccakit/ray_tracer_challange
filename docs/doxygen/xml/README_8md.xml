<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="README_8md" kind="file" language="Markdown">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">&lt;a<sp/>href=&quot;https://conan.io/center/boost-ext-ut&quot;<sp/>target=&quot;_blank&quot;&gt;![Version](https://img.shields.io/github/v/release/boost-ext/ut)&lt;/a&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;a<sp/>href=&quot;https://github.com/boost-ext/ut/actions/workflows/linux.yml&quot;<sp/>target=&quot;_blank&quot;&gt;![Linux](https://github.com/boost-ext/ut/actions/workflows/linux.yml/badge.svg)&lt;/a&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;a<sp/>href=&quot;https://github.com/boost-ext/ut/actions/workflows/macos.yml&quot;<sp/>target=&quot;_blank&quot;&gt;![MacOs](https://github.com/boost-ext/ut/actions/workflows/macos.yml/badge.svg)&lt;/a&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;a<sp/>href=&quot;https://github.com/boost-ext/ut/actions/workflows/windows.yml&quot;<sp/>target=&quot;_blank&quot;&gt;![Windows](https://github.com/boost-ext/ut/actions/workflows/windows.yml/badge.svg)&lt;/a&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;a<sp/>href=&quot;https://codecov.io/gh/boost-ext/ut&quot;<sp/>target=&quot;_blank&quot;&gt;![Coveralls](https://codecov.io/gh/boost-ext/ut/branch/master/graph/badge.svg)&lt;/a&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;a<sp/>href=&quot;https://godbolt.org/z/f4jEcv9vo&quot;&gt;![Try<sp/>it<sp/>online](https://img.shields.io/badge/try%20it-online-blue.svg)&lt;/a&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;a<sp/>href=&quot;https://aur.archlinux.org/packages/ut/&quot;&gt;![AUR<sp/>Badge](https://img.shields.io/aur/version/ut)&lt;/a&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>&quot;If<sp/>you<sp/>liked<sp/>it<sp/>then<sp/>you<sp/>`&quot;should<sp/>have<sp/>put<sp/>a&quot;_test`<sp/>on<sp/>it&quot;,<sp/>Beyonce<sp/>rule</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>UT<sp/>/<sp/>μt</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>[Motivation](#motivation)<sp/>|<sp/>[Quick<sp/>Start](#quick-start)<sp/>|<sp/>[Overview](#overview)<sp/>|<sp/>[Tutorial](#tutorial)<sp/>|<sp/>[Examples](#examples)<sp/>|<sp/>[User<sp/>Guide](#user-guide)<sp/>|<sp/>[FAQ](#faq)<sp/>|<sp/>[Benchmarks](#benchmarks)<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;C++<sp/>&lt;b&gt;single<sp/>header/single<sp/>module,<sp/>macro-free&lt;/b&gt;<sp/>μ(micro)/Unit<sp/>Testing<sp/>Framework&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;boost/ut.hpp&gt;<sp/>//<sp/>import<sp/>boost.ut;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">constexpr<sp/>auto<sp/>sum(auto...<sp/>values)<sp/>{<sp/>return<sp/>(values<sp/>+<sp/>...);<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>using<sp/>namespace<sp/>boost::ut;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;sum&quot;_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>expect(sum(0)<sp/>==<sp/>0_i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>expect(sum(1,<sp/>2)<sp/>==<sp/>3_i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>expect(sum(1,<sp/>2)<sp/>&gt;<sp/>0_i<sp/>and<sp/>41_i<sp/>==<sp/>sum(40,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```sh</highlight></codeline>
<codeline><highlight class="normal">Running<sp/>&quot;sum&quot;...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sum.cpp:11:FAILED<sp/>[(3<sp/>&gt;<sp/>0<sp/>and<sp/>41<sp/>==<sp/>42)]</highlight></codeline>
<codeline><highlight class="normal">FAILED</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">===============================================================================</highlight></codeline>
<codeline><highlight class="normal">tests:<sp/><sp/><sp/>1<sp/>|<sp/>1<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">asserts:<sp/>3<sp/>|<sp/>2<sp/>passed<sp/>|<sp/>1<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/f4jEcv9vo</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;a<sp/>name=&quot;motivation&quot;&gt;&lt;/a&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;Motivation&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Testing<sp/>is<sp/>a<sp/>very<sp/>important<sp/>part<sp/>of<sp/>the<sp/>Software<sp/>Development,<sp/>however,<sp/>C++<sp/>doesn&apos;t<sp/>provide<sp/>any<sp/>good<sp/>testing<sp/>facilities<sp/>out<sp/>of<sp/>the<sp/>box,</highlight></codeline>
<codeline><highlight class="normal">which<sp/>often<sp/>leads<sp/>into<sp/>a<sp/>poor<sp/>testing<sp/>experience<sp/>for<sp/>develops<sp/>and/or<sp/>lack<sp/>of<sp/>tests/coverage<sp/>in<sp/>general.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>One<sp/>should<sp/>treat<sp/>testing<sp/>code<sp/>as<sp/>production<sp/>code!</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Additionally,<sp/>well<sp/>established<sp/>testing<sp/>practises<sp/>such<sp/>as<sp/>[Test<sp/>Driven<sp/>Development<sp/>(TDD)](https://en.wikipedia.org/wiki/Test-driven_development)/[Behaviour<sp/>Driven<sp/>Development<sp/>(BDD)](https://en.wikipedia.org/wiki/Behavior-driven_development)<sp/>are<sp/>often<sp/>not<sp/>followed<sp/>due<sp/>to<sp/>the<sp/>same<sp/>reasons.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>following<sp/>snippet<sp/>is<sp/>a<sp/>common<sp/>example<sp/>of<sp/>testing<sp/>with<sp/>projects<sp/>in<sp/>C++.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>should<sp/>sum<sp/>numbers</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>assert(3<sp/>==<sp/>sum(1,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">There<sp/>are<sp/>quite<sp/>a<sp/>few<sp/>problems<sp/>with<sp/>the<sp/>approach<sp/>above</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>No<sp/>names<sp/>for<sp/>tests<sp/>(Hard<sp/>to<sp/>follow<sp/>intentions<sp/>by<sp/>further<sp/>readers)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>No<sp/>automatic<sp/>registration<sp/>of<sp/>tests<sp/>(No<sp/>way<sp/>to<sp/>run<sp/>specific<sp/>tests)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Hard<sp/>to<sp/>debug<sp/>(Assertions<sp/>don&apos;t<sp/>provide<sp/>any<sp/>information<sp/>why<sp/>it<sp/>failed)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Hard<sp/>to<sp/>scale<sp/>(No<sp/>easy<sp/>path<sp/>forward<sp/>for<sp/>parameterized<sp/>tests,<sp/>multiple<sp/>suites,<sp/>parallel<sp/>execution,<sp/>etc...)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Hard<sp/>to<sp/>integrate<sp/>(No<sp/>easy<sp/>way<sp/>to<sp/>have<sp/>a<sp/>custom<sp/>output<sp/>such<sp/>as<sp/>XML<sp/>for<sp/>CI<sp/>integration)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Easy<sp/>to<sp/>make<sp/>mistakes<sp/>(With<sp/>implicit<sp/>casting,<sp/>floating<sp/>point<sp/>comparison,<sp/>pointer<sp/>comparison<sp/>for<sp/>strings,<sp/>etc...)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Hard<sp/>to<sp/>follow<sp/>good<sp/>practises<sp/>such<sp/>as<sp/>`TDD/BDD`<sp/>(Lack<sp/>of<sp/>support<sp/>for<sp/>sections<sp/>and<sp/>declarative<sp/>expressions)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">`UT`<sp/>is<sp/>trying<sp/>to<sp/>address<sp/>these<sp/>issues<sp/>by<sp/>simplifying<sp/>testing<sp/>experience<sp/>with<sp/>a<sp/>few<sp/>simple<sp/>steps:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Just<sp/>get<sp/>a<sp/>single<sp/>[header](https://github.com/boost-ext/ut/blob/master/include/boost/ut.hpp)<sp/>or<sp/>[module+header](https://github.com/boost-ext/ut/blob/master/include/boost/ut.cppm)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Integrate<sp/>it<sp/>into<sp/>your<sp/>project</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Learn<sp/>a<sp/>few<sp/>simple<sp/>concepts<sp/>([expect,<sp/>test,<sp/>suite](#api))</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">And<sp/>you<sp/>good<sp/>to<sp/>go!</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Okay,<sp/>great,<sp/>but<sp/>why<sp/>I<sp/>would<sp/>use<sp/>`UT`<sp/>over<sp/>other/similar<sp/>testing<sp/>frameworks<sp/>already<sp/>available<sp/>in<sp/>C++?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>[Boost.Test](https://github.com/boostorg/test)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>[GoogleTest](https://github.com/google/googletest)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>[Catch](https://github.com/catchorg/Catch2)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>[...](https://en.wikipedia.org/wiki/List_of_unit_testing_frameworks#C++)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Great<sp/>question!<sp/>There<sp/>are<sp/>a<sp/>few<sp/>unique<sp/>features<sp/>which<sp/>makes<sp/>`UT`<sp/>worth<sp/>trying</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Firstly,<sp/>it<sp/>supports<sp/>all<sp/>the<sp/>basic<sp/>Unit<sp/>Testing<sp/>Framework<sp/>features<sp/>(automatic<sp/>registration<sp/>of<sp/>tests,<sp/>assertions,<sp/>suites,<sp/>etc...)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>It&apos;s<sp/>easy<sp/>to<sp/>integrate<sp/>(it&apos;s<sp/>just<sp/>one<sp/>[header/module](https://github.com/boost-ext/ut/blob/master/include/boost/ut.hpp))</highlight></codeline>
<codeline><highlight class="normal">*<sp/>It&apos;s<sp/>macro<sp/>free<sp/>which<sp/>makes<sp/>testing<sp/>experience<sp/>that<sp/>much<sp/>nicer<sp/>(it<sp/>uses<sp/>modern<sp/>C++<sp/>features<sp/>instead,<sp/>macros<sp/>are<sp/>opt-in<sp/>rather<sp/>than<sp/>being<sp/>compulsory<sp/>-<sp/>[Can<sp/>I<sp/>still<sp/>use<sp/>macros?](#macros))</highlight></codeline>
<codeline><highlight class="normal">*<sp/>It&apos;s<sp/>flexible<sp/>(all<sp/>parts<sp/>of<sp/>the<sp/>framework<sp/>such<sp/>as:<sp/>[runner,<sp/>reporter,<sp/>printer](#examples)<sp/>can<sp/>be<sp/>customized,<sp/>basically<sp/>most<sp/>other<sp/>Unit<sp/>Testing<sp/>Frameworks<sp/>can<sp/>be<sp/>implemented<sp/>on<sp/>top<sp/>of<sp/>UT<sp/>primitives)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>It<sp/>has<sp/>smaller<sp/>learning<sp/>curve<sp/>(just<sp/>a<sp/>few<sp/>simple<sp/>concepts<sp/>([expect,<sp/>test,<sp/>suite](#api)))</highlight></codeline>
<codeline><highlight class="normal">*<sp/>It<sp/>leverages<sp/>C++<sp/>features<sp/>to<sp/>support<sp/>more<sp/>complex<sp/>testing<sp/>([parameterized](#examples))</highlight></codeline>
<codeline><highlight class="normal">*<sp/>It&apos;s<sp/>faster<sp/>to<sp/>compile<sp/>and<sp/>execute<sp/>than<sp/>similar<sp/>frameworks<sp/>which<sp/>makes<sp/>it<sp/>suitable<sp/>for<sp/>bigger<sp/>projects<sp/>without<sp/>additional<sp/>hassle<sp/>([Benchmarks](#benchmarks))</highlight></codeline>
<codeline><highlight class="normal">*<sp/>It<sp/>supports<sp/>[TDD/BDD](#examples)<sp/>workflows</highlight></codeline>
<codeline><highlight class="normal">*<sp/>It<sp/>supports<sp/>[Gherkin](#examples)<sp/>specification</highlight></codeline>
<codeline><highlight class="normal">*<sp/>It<sp/>supports<sp/>[Spec](#examples)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Sounds<sp/>intriguing/interesting?<sp/>Learn<sp/>more<sp/>at</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>[Tutorial](#tutorial)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>[Examples](#examples)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>[User-Guide](#user-guide)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;a<sp/>name=&quot;quick-start&quot;&gt;&lt;/a&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;Quick<sp/>Start&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://bit.ly/ut-quick-start<sp/>(slides)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;a<sp/>name=&quot;overview&quot;&gt;&lt;/a&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;Overview&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>No<sp/>dependencies<sp/>([C++20](#cpp-20),<sp/>Tested<sp/>Compilers:<sp/>GCC-9+,<sp/>Clang-9.0+,<sp/>Apple<sp/>Clang-11.0.0+,<sp/>MSVC-2019+*,<sp/>Clang-cl-9.0+</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Single<sp/>header/module<sp/>([boost/ut.hpp](https://github.com/boost-ext/ut/blob/master/include/boost/ut.hpp))</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Macro-free<sp/>([How<sp/>does<sp/>it<sp/>work?](#how-it-works))</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Easy<sp/>to<sp/>use<sp/>([Minimal<sp/>API](#api)<sp/>-<sp/>`test,<sp/>suite,<sp/>operators,<sp/>literals,<sp/>[expect]`)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Fast<sp/>to<sp/>compile/execute<sp/>([Benchmarks](#benchmarks))</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Features<sp/>([Assertions](https://github.com/boost-ext/ut/blob/master/example/expect.cpp),<sp/>[Suites](https://github.com/boost-ext/ut/blob/master/example/suite.cpp),<sp/>[Tests](https://github.com/boost-ext/ut/blob/master/example/test.cpp),<sp/>[Sections](https://github.com/boost-ext/ut/blob/master/example/section.cpp),<sp/>[Parameterized](https://github.com/boost-ext/ut/blob/master/example/parameterized.cpp),<sp/>[BDD](https://github.com/boost-ext/ut/blob/master/example/BDD.cpp),<sp/>[Gherkin](https://github.com/boost-ext/ut/blob/master/example/gherkin.cpp),<sp/>[Spec](https://github.com/boost-ext/ut/blob/master/example/spec.cpp),<sp/>[Matchers](https://github.com/boost-ext/ut/blob/master/example/matcher.cpp),<sp/>[Logging](https://github.com/boost-ext/ut/blob/master/example/log.cpp),<sp/>[Runners](https://github.com/boost-ext/ut/blob/master/example/cfg/runner.cpp),<sp/>[Reporters](https://github.com/boost-ext/ut/blob/master/example/cfg/reporter.cpp),<sp/>[...](https://github.com/boost-ext/ut/blob/master/example))</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Integrations<sp/>([ApprovalTests.cpp](https://github.com/approvals/ApprovalTests.cpp/releases/tag/v.7.0.0))</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;a<sp/>name=&quot;tutorial&quot;&gt;&lt;/a&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;Tutorial&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Step<sp/>0:<sp/>Get<sp/>it...&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Get<sp/>the<sp/>latest<sp/>latest<sp/>header/module<sp/>from<sp/>[here!](https://github.com/boost-ext/ut/blob/master/include/boost/ut.hpp)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Include/Import</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>#include<sp/>&lt;boost/ut.hpp&gt;<sp/>//<sp/>single<sp/>header</highlight></codeline>
<codeline><highlight class="normal">//<sp/>import<sp/>boost.ut;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>single<sp/>module<sp/>(C++20)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>main()<sp/>{<sp/>}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Compile<sp/>&amp;<sp/>Run</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">$CXX<sp/>main.cpp<sp/>&amp;&amp;<sp/>./a.out</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(0<sp/>assert<sp/>in<sp/>0<sp/>test)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>[Optional]<sp/>Install<sp/>it</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>-Bbuild<sp/>-H.</highlight></codeline>
<codeline><highlight class="normal">cd<sp/>build<sp/>&amp;&amp;<sp/>make<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>run<sp/>tests</highlight></codeline>
<codeline><highlight class="normal">cd<sp/>build<sp/>&amp;&amp;<sp/>make<sp/>install<sp/>#<sp/>install</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>[Optional]<sp/>CMake<sp/>integration</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>project<sp/>provides<sp/>a<sp/>CMake<sp/>config<sp/>and<sp/>target.</highlight></codeline>
<codeline><highlight class="normal">Just<sp/>load<sp/>`ut`<sp/>with<sp/>`find_package`<sp/>to<sp/>import<sp/>the<sp/>`Boost::ut`<sp/>target.</highlight></codeline>
<codeline><highlight class="normal">Linking<sp/>against<sp/>this<sp/>target<sp/>will<sp/>add<sp/>the<sp/>necessary<sp/>include<sp/>directory<sp/>for<sp/>the<sp/>single<sp/>header<sp/>file.</highlight></codeline>
<codeline><highlight class="normal">This<sp/>is<sp/>demonstrated<sp/>in<sp/>the<sp/>following<sp/>example.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cmake</highlight></codeline>
<codeline><highlight class="normal">find_package(ut<sp/>REQUIRED)</highlight></codeline>
<codeline><highlight class="normal">add_library(my_test<sp/>my_test.cpp)</highlight></codeline>
<codeline><highlight class="normal">target_link_libraries(my_test<sp/>PRIVATE<sp/>Boost::ut)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>[Optional]<sp/>[Conan](https://conan.io)<sp/>integration</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>[boost-ext-ut](https://conan.io/center/boost-ext-ut)<sp/>package<sp/>is<sp/>available<sp/>from<sp/>[Conan<sp/>Center](https://conan.io/center/).</highlight></codeline>
<codeline><highlight class="normal">Just<sp/>include<sp/>it<sp/>in<sp/>your<sp/>project&apos;s<sp/>Conanfile<sp/>with<sp/>`boost-ext-ut/2.3.1`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Step<sp/>1:<sp/>Expect<sp/>it...&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Let&apos;s<sp/>write<sp/>our<sp/>first<sp/>assertion,<sp/>shall<sp/>we?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>boost::ut::expect(true);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(1<sp/>asserts<sp/>in<sp/>0<sp/>test)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/vfx-eB</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Okay,<sp/>let&apos;s<sp/>make<sp/>it<sp/>fail<sp/>now?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>boost::ut::expect(1<sp/>==<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">main.cpp:4:FAILED<sp/>[false]</highlight></codeline>
<codeline><highlight class="normal">===============================================================================</highlight></codeline>
<codeline><highlight class="normal">tests:<sp/><sp/><sp/>0<sp/>|<sp/>0<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">asserts:<sp/>1<sp/>|<sp/>0<sp/>passed<sp/>|<sp/>1<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/7qTePx</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Notice<sp/>that<sp/>expression<sp/>`1<sp/>==<sp/>2`<sp/>hasn&apos;t<sp/>been<sp/>printed.<sp/>Instead<sp/>we<sp/>got<sp/>`false`?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Let&apos;s<sp/>print<sp/>it<sp/>then?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>using<sp/>namespace<sp/>boost::ut;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>expect(1_i<sp/>==<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">main.cpp:4:FAILED<sp/>[1<sp/>==<sp/>2]</highlight></codeline>
<codeline><highlight class="normal">===============================================================================</highlight></codeline>
<codeline><highlight class="normal">tests:<sp/><sp/><sp/>0<sp/>|<sp/>0<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">asserts:<sp/>1<sp/>|<sp/>0<sp/>passed<sp/>|<sp/>1<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/7MXVzu</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Okay,<sp/>now<sp/>we<sp/>have<sp/>it!<sp/>`1<sp/>==<sp/>2`<sp/>has<sp/>been<sp/>printed<sp/>as<sp/>expected.</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>Notice<sp/>the<sp/>User<sp/>Defined<sp/>Literal<sp/>(UDL)<sp/>`1_i`<sp/>was<sp/>used.</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>`_i`<sp/>is<sp/>a<sp/>compile-time<sp/>constant<sp/>integer<sp/>value</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>It<sp/>allows<sp/>to<sp/>override<sp/>comparison<sp/>operators<sp/>👍</highlight></codeline>
<codeline><highlight class="normal">*<sp/>It<sp/>disallow<sp/>comparison<sp/>of<sp/>different<sp/>types<sp/>👍</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">See<sp/>the<sp/>[User-guide](#user-guide)<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Alternatively,<sp/>a<sp/>`terse`<sp/>notation<sp/>(no<sp/>expect<sp/>required)<sp/>can<sp/>be<sp/>used.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>using<sp/>namespace<sp/>boost::ut::literals;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>using<sp/>namespace<sp/>boost::ut::operators::terse;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>1_i<sp/>==<sp/>2;<sp/>//<sp/>terse<sp/>notation</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">main.cpp:7:FAILED<sp/>[1<sp/>==<sp/>2]</highlight></codeline>
<codeline><highlight class="normal">===============================================================================</highlight></codeline>
<codeline><highlight class="normal">tests:<sp/><sp/><sp/>0<sp/>|<sp/>0<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">asserts:<sp/>1<sp/>|<sp/>0<sp/>passed<sp/>|<sp/>1<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/s77GSm</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Other<sp/>expression<sp/>syntaxes<sp/>are<sp/>also<sp/>available.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">expect(1_i<sp/>==<sp/>2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>UDL<sp/>syntax</highlight></codeline>
<codeline><highlight class="normal">expect(1<sp/>==<sp/>2_i);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>UDL<sp/>syntax</highlight></codeline>
<codeline><highlight class="normal">expect(that<sp/>%<sp/>1<sp/>==<sp/>2);<sp/><sp/>//<sp/>Matcher<sp/>syntax</highlight></codeline>
<codeline><highlight class="normal">expect(eq(1,<sp/>2));<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>eq/neq/gt/ge/lt/le</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">main.cpp:6:FAILED<sp/>[1<sp/>==<sp/>2]</highlight></codeline>
<codeline><highlight class="normal">main.cpp:7:FAILED<sp/>[1<sp/>==<sp/>2]</highlight></codeline>
<codeline><highlight class="normal">main.cpp:8:FAILED<sp/>[1<sp/>==<sp/>2]</highlight></codeline>
<codeline><highlight class="normal">main.cpp:9:FAILED<sp/>[1<sp/>==<sp/>2]</highlight></codeline>
<codeline><highlight class="normal">===============================================================================</highlight></codeline>
<codeline><highlight class="normal">tests:<sp/><sp/><sp/>0<sp/>|<sp/>0<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">asserts:<sp/>4<sp/>|<sp/>0<sp/>passed<sp/>|<sp/>4<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/QbgGtc</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Okay,<sp/>but<sp/>what<sp/>about<sp/>the<sp/>case<sp/>if<sp/>my<sp/>assertion<sp/>is<sp/>fatal.</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>Meaning<sp/>that<sp/>the<sp/>program<sp/>will<sp/>crash<sp/>unless<sp/>the<sp/>processing<sp/>will<sp/>be<sp/>terminated.</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>Nothing<sp/>easier,<sp/>let&apos;s<sp/>just<sp/>add<sp/>`fatal`<sp/>call<sp/>to<sp/>make<sp/>the<sp/>test<sp/>fail<sp/>immediately.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">expect(fatal(1<sp/>==<sp/>2_i));<sp/>//<sp/>fatal<sp/>assertion</highlight></codeline>
<codeline><highlight class="normal">expect(1_i<sp/>==<sp/>2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>not<sp/>executed</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">main.cpp:6:FAILED<sp/>[1<sp/>==<sp/>2]</highlight></codeline>
<codeline><highlight class="normal">===============================================================================</highlight></codeline>
<codeline><highlight class="normal">tests:<sp/><sp/><sp/>1<sp/>|<sp/>1<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">asserts:<sp/>2<sp/>|<sp/>0<sp/>passed<sp/>|<sp/>2<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/WMe8Y1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>But<sp/>my<sp/>expression<sp/>is<sp/>more<sp/>complex<sp/>than<sp/>just<sp/>simple<sp/>comparisons.</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>Not<sp/>a<sp/>problem,<sp/>logic<sp/>operators<sp/>are<sp/>also<sp/>supported<sp/>in<sp/>the<sp/>`expect`<sp/>👍.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">expect(42l<sp/>==<sp/>42_l<sp/>and<sp/>1<sp/>==<sp/>2_i);<sp/>//<sp/>compound<sp/>expression</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">main.cpp:5:FAILED<sp/>[(42<sp/>==<sp/>42<sp/>and<sp/>1<sp/>==<sp/>2)]</highlight></codeline>
<codeline><highlight class="normal">===============================================================================</highlight></codeline>
<codeline><highlight class="normal">tests:<sp/><sp/><sp/>0<sp/>|<sp/>0<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">asserts:<sp/>1<sp/>|<sp/>0<sp/>passed<sp/>|<sp/>1<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/aEhX4t</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Can<sp/>I<sp/>add<sp/>a<sp/>custom<sp/>message<sp/>though?</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>Sure,<sp/>`expect`<sp/>calls<sp/>are<sp/>streamable!</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>expect(42l<sp/>==<sp/>42_l<sp/>and<sp/>1<sp/>==<sp/>2_i)<sp/>&lt;&lt;<sp/>&quot;additional<sp/>info&quot;;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">main.cpp:5:FAILED<sp/>[(42<sp/>==<sp/>42<sp/>and<sp/>1<sp/>==<sp/>2)]<sp/>additional<sp/>info</highlight></codeline>
<codeline><highlight class="normal">===============================================================================</highlight></codeline>
<codeline><highlight class="normal">tests:<sp/><sp/><sp/>0<sp/>|<sp/>0<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">asserts:<sp/>1<sp/>|<sp/>0<sp/>passed<sp/>|<sp/>1<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>That&apos;s<sp/>nice,<sp/>can<sp/>I<sp/>use<sp/>custom<sp/>messages<sp/>and<sp/>fatal<sp/>assertions?</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>Yes,<sp/>stream<sp/>the<sp/>`fatal`!</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">expect(fatal(1<sp/>==<sp/>2_i))<sp/>&lt;&lt;<sp/>&quot;fatal<sp/>assertion&quot;;</highlight></codeline>
<codeline><highlight class="normal">expect(1_i<sp/>==<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">FAILED</highlight></codeline>
<codeline><highlight class="normal">in:<sp/>main.cpp:6<sp/>-<sp/>test<sp/>condition:<sp/><sp/>[1<sp/>==<sp/>2]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>fatal<sp/>assertion</highlight></codeline>
<codeline><highlight class="normal">===============================================================================</highlight></codeline>
<codeline><highlight class="normal">tests:<sp/><sp/><sp/>0<sp/>|<sp/>2<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">asserts:<sp/>0<sp/>|<sp/>0<sp/>passed<sp/>|<sp/>2<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>I<sp/>use<sp/>`std::expected`,<sp/>can<sp/>I<sp/>stream<sp/>its<sp/>`error()`<sp/>upon<sp/>failure?</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>Yes,<sp/>since<sp/>`std::expected`&apos;s<sp/>`error()`<sp/>can<sp/>only<sp/>be<sp/>called<sp/>when<sp/>there<sp/>is<sp/>no</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>value<sp/>it<sp/>requires<sp/>lazy<sp/>evaluation.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">&quot;lazy<sp/>log&quot;_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::expected&lt;bool,<sp/>std::string&gt;<sp/>e<sp/>=<sp/>std::unexpected(&quot;lazy<sp/>evaluated&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>expect(e.has_value())<sp/>&lt;&lt;<sp/>[&amp;]<sp/>{<sp/>return<sp/>e.error();<sp/>}<sp/>&lt;&lt;<sp/>fatal;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>expect(e.value()<sp/>==<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">Running<sp/>test<sp/>&quot;lazy<sp/>log&quot;...<sp/>FAILED</highlight></codeline>
<codeline><highlight class="normal">in:<sp/>main.cpp:12<sp/>-<sp/>test<sp/>condition:<sp/><sp/>[false]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>lazy<sp/>evaluated</highlight></codeline>
<codeline><highlight class="normal">===============================================================================</highlight></codeline>
<codeline><highlight class="normal">tests:<sp/><sp/><sp/>1<sp/>|<sp/>2<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">asserts:<sp/>0<sp/>|<sp/>0<sp/>passed<sp/>|<sp/>2<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/v2PDuU</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Step<sp/>2:<sp/>Group<sp/>it...&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Assertions<sp/>are<sp/>great,<sp/>but<sp/>how<sp/>to<sp/>combine<sp/>them<sp/>into<sp/>more<sp/>cohesive<sp/>units?</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>`Test<sp/>cases`<sp/>are<sp/>the<sp/>way<sp/>to<sp/>go!<sp/>They<sp/>allow<sp/>to<sp/>group<sp/>expectations<sp/>for<sp/>the<sp/>same<sp/>functionality<sp/>into<sp/>coherent<sp/>units.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">&quot;hello<sp/>world&quot;_test<sp/>=<sp/>[]<sp/>{<sp/>};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Alternatively<sp/>`test(&quot;hello<sp/>world&quot;)<sp/>=<sp/>[]<sp/>{}`<sp/>can<sp/>be<sp/>used.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(0<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/Bh-EmY</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Notice<sp/>`1<sp/>tests`<sp/>but<sp/>`0<sp/>asserts`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Let&apos;s<sp/>make<sp/>our<sp/>first<sp/>end-2-end<sp/>test<sp/>case,<sp/>shall<sp/>we?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;hello<sp/>world&quot;_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i<sp/>=<sp/>43;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>expect(42_i<sp/>==<sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">Running<sp/>&quot;hello<sp/>world&quot;...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>main.cpp:8:FAILED<sp/>[42<sp/>==<sp/>43]</highlight></codeline>
<codeline><highlight class="normal">FAILED</highlight></codeline>
<codeline><highlight class="normal">===============================================================================</highlight></codeline>
<codeline><highlight class="normal">tests:<sp/><sp/><sp/>1<sp/>|<sp/>1<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">asserts:<sp/>1<sp/>|<sp/>0<sp/>passed<sp/>|<sp/>1<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/Y43mXz</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>👍<sp/>We<sp/>are<sp/>done<sp/>here!</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>I&apos;d<sp/>like<sp/>to<sp/>nest<sp/>my<sp/>tests,<sp/>though<sp/>and<sp/>share<sp/>setup/tear-down.</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>With<sp/>lambdas<sp/>used<sp/>to<sp/>represents<sp/>`tests/sections`<sp/>we<sp/>can<sp/>easily<sp/>achieve<sp/>that.</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>Let&apos;s<sp/>just<sp/>take<sp/>a<sp/>look<sp/>at<sp/>the<sp/>following<sp/>example.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;[vector]&quot;_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>v(5);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>expect(fatal(5_ul<sp/>==<sp/>std::size(v)));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>should(&quot;resize<sp/>bigger&quot;)<sp/>=<sp/>[v]<sp/>{<sp/>//<sp/>or<sp/>&quot;resize<sp/>bigger&quot;_test</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mut(v).resize(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expect(10_ul<sp/>==<sp/>std::size(v));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>expect(fatal(5_ul<sp/>==<sp/>std::size(v)));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>should(&quot;resize<sp/>smaller&quot;)<sp/>=<sp/>[=]()<sp/>mutable<sp/>{<sp/>//<sp/>or<sp/>&quot;resize<sp/>smaller&quot;_test</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.resize(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expect(0_ul<sp/>==<sp/>std::size(v));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(4<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/XWAdYt</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Nice!<sp/>That<sp/>was<sp/>easy,<sp/>but<sp/>I&apos;m<sp/>a<sp/>believer<sp/>into<sp/>Behaviour<sp/>Driven<sp/>Development<sp/>(`BDD`).</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>Is<sp/>there<sp/>a<sp/>support<sp/>for<sp/>that?</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>Yes!<sp/>Same<sp/>example<sp/>as<sp/>above<sp/>just<sp/>with<sp/>the<sp/>`BDD`<sp/>syntax.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;vector&quot;_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>given(&quot;I<sp/>have<sp/>a<sp/>vector&quot;)<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>v(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expect(fatal(5_ul<sp/>==<sp/>std::size(v)));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>when(&quot;I<sp/>resize<sp/>bigger&quot;)<sp/>=<sp/>[=]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mut(v).resize(10);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>then(&quot;The<sp/>size<sp/>should<sp/>increase&quot;)<sp/>=<sp/>[=]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expect(10_ul<sp/>==<sp/>std::size(v));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(2<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/dnvxsE</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>On<sp/>top<sp/>of<sp/>that,<sp/>`feature/scenario`<sp/>aliases<sp/>can<sp/>be<sp/>leveraged.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>feature(&quot;vector&quot;)<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>scenario(&quot;size&quot;)<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>given(&quot;I<sp/>have<sp/>a<sp/>vector&quot;)<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>v(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expect(fatal(5_ul<sp/>==<sp/>std::size(v)));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>when(&quot;I<sp/>resize<sp/>bigger&quot;)<sp/>=<sp/>[=]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mut(v).resize(10);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>then(&quot;The<sp/>size<sp/>should<sp/>increase&quot;)<sp/>=<sp/>[=]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expect(10_ul<sp/>==<sp/>std::size(v));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(2<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/T4cWss</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Can<sp/>I<sp/>use<sp/>`Gherkin`?</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>Yeah,<sp/>let&apos;s<sp/>rewrite<sp/>the<sp/>example<sp/>using<sp/>`Gherkin`<sp/>specification</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bdd::gherkin::steps<sp/>steps<sp/>=<sp/>[](auto&amp;<sp/>steps)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>steps.feature(&quot;Vector&quot;)<sp/>=<sp/>[&amp;]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>steps.scenario(&quot;*&quot;)<sp/>=<sp/>[&amp;]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>steps.given(&quot;I<sp/>have<sp/>a<sp/>vector&quot;)<sp/>=<sp/>[&amp;]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>v(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expect(fatal(5_ul<sp/>==<sp/>std::size(v)));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>steps.when(&quot;I<sp/>resize<sp/>bigger&quot;)<sp/>=<sp/>[&amp;]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.resize(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>steps.then(&quot;The<sp/>size<sp/>should<sp/>increase&quot;)<sp/>=<sp/>[&amp;]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expect(10_ul<sp/>==<sp/>std::size(v));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;Vector&quot;_test<sp/>=<sp/>steps<sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>R&quot;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Feature:<sp/>Vector</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scenario:<sp/>Resize</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Given<sp/>I<sp/>have<sp/>a<sp/>vector</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>I<sp/>resize<sp/>bigger</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Then<sp/>The<sp/>size<sp/>should<sp/>increase</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)&quot;;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(2<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/jb1d8P</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Nice,<sp/>is<sp/>`Spec`<sp/>notation<sp/>supported<sp/>as<sp/>well?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>describe(&quot;vector&quot;)<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>v(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>expect(fatal(5_ul<sp/>==<sp/>std::size(v)));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>it(&quot;should<sp/>resize<sp/>bigger&quot;)<sp/>=<sp/>[v]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mut(v).resize(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expect(10_ul<sp/>==<sp/>std::size(v));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(2<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/6jKKzT</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>That&apos;s<sp/>great,<sp/>but<sp/>how<sp/>can<sp/>call<sp/>the<sp/>same<sp/>tests<sp/>with<sp/>different<sp/>arguments/types<sp/>to<sp/>be<sp/>DRY<sp/>(Don&apos;t<sp/>Repeat<sp/>Yourself)?</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>Parameterized<sp/>tests<sp/>to<sp/>the<sp/>rescue!</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(auto<sp/>i<sp/>:<sp/>std::vector{1,<sp/>2,<sp/>3})<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>test(&quot;parameterized<sp/>&quot;<sp/>+<sp/>std::to_string(i))<sp/>=<sp/>[i]<sp/>{<sp/>//<sp/>3<sp/>tests</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expect(that<sp/>%<sp/>i<sp/>&gt;<sp/>0);<sp/>//<sp/>3<sp/>asserts</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(3<sp/>asserts<sp/>in<sp/>3<sp/>tests)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/Utnd6X</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>That&apos;s<sp/>it<sp/>😮!</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>Alternatively,<sp/>a<sp/>convenient<sp/>test<sp/>syntax<sp/>is<sp/>also<sp/>provided<sp/>👍</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;args&quot;_test<sp/>=<sp/>[](const<sp/>auto&amp;<sp/>arg)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>expect(arg<sp/>&gt;<sp/>0_i)<sp/>&lt;&lt;<sp/>&quot;all<sp/>values<sp/>greater<sp/>than<sp/>0&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>|<sp/>std::vector{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(3<sp/>asserts<sp/>in<sp/>3<sp/>tests)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/6FHtpq</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Check<sp/>[Examples](#examples)<sp/>for<sp/>further<sp/>reading.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Step<sp/>3:<sp/>Scale<sp/>it...&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Okay,<sp/>but<sp/>my<sp/>project<sp/>is<sp/>more<sp/>complex<sp/>than<sp/>that.<sp/>How<sp/>can<sp/>I<sp/>scale?</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>`Test<sp/>suites`<sp/>will<sp/>make<sp/>that<sp/>possible.<sp/>By<sp/>using<sp/>`suite`<sp/>in<sp/>translation<sp/>units</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>`tests`<sp/>defined<sp/>inside<sp/>will<sp/>be<sp/>automatically<sp/>registered<sp/>👍</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">suite<sp/>errors<sp/>=<sp/>[]<sp/>{<sp/>//<sp/>or<sp/>suite&lt;&quot;nameofsuite&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;exception&quot;_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>expect(throws([]<sp/>{<sp/>throw<sp/>0;<sp/>}))<sp/>&lt;&lt;<sp/>&quot;throws<sp/>any<sp/>exception&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;failure&quot;_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>expect(aborts([]<sp/>{<sp/>assert(false);<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>main()<sp/>{<sp/>}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(2<sp/>asserts<sp/>in<sp/>2<sp/>tests)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/_ccGwZ</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>What&apos;s<sp/>next?</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>*<sp/>[Examples](#examples)</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>*<sp/>[User-Guide](#user-guide)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;a<sp/>name=&quot;examples&quot;&gt;&lt;/a&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;Examples&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Assertions&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>operators</highlight></codeline>
<codeline><highlight class="normal">expect(0_i<sp/>==<sp/>sum());</highlight></codeline>
<codeline><highlight class="normal">expect(2_i<sp/>!=<sp/>sum(1,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">expect(sum(1)<sp/>&gt;=<sp/>0_i);</highlight></codeline>
<codeline><highlight class="normal">expect(sum(1)<sp/>&lt;=<sp/>1_i);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>message</highlight></codeline>
<codeline><highlight class="normal">expect(3_i<sp/>==<sp/>sum(1,<sp/>2))<sp/>&lt;&lt;<sp/>&quot;wrong<sp/>sum&quot;;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>expressions</highlight></codeline>
<codeline><highlight class="normal">expect(0_i<sp/>==<sp/>sum()<sp/>and<sp/>42_i<sp/>==<sp/>sum(40,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">expect(0_i<sp/>==<sp/>sum()<sp/>or<sp/>1_i<sp/>==<sp/>sum())<sp/>&lt;&lt;<sp/>&quot;compound&quot;;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>matchers</highlight></codeline>
<codeline><highlight class="normal">expect(that<sp/>%<sp/>0<sp/>==<sp/>sum());</highlight></codeline>
<codeline><highlight class="normal">expect(that<sp/>%<sp/>42<sp/>==<sp/>sum(40,<sp/>2)<sp/>and<sp/>that<sp/>%<sp/>(1<sp/>+<sp/>2)<sp/>==<sp/>sum(1,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">expect(that<sp/>%<sp/>1<sp/>!=<sp/>2<sp/>or<sp/>2_i<sp/>&gt;<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>eq/neq/gt/ge/lt/le</highlight></codeline>
<codeline><highlight class="normal">expect(eq(42,<sp/>sum(40,<sp/>2)));</highlight></codeline>
<codeline><highlight class="normal">expect(neq(1,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">expect(eq(sum(1),<sp/>1)<sp/>and<sp/>neq(sum(1,<sp/>2),<sp/>2));</highlight></codeline>
<codeline><highlight class="normal">expect(eq(1,<sp/>1)<sp/>and<sp/>that<sp/>%<sp/>1<sp/>==<sp/>1<sp/>and<sp/>1_i<sp/>==<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>floating<sp/>points</highlight></codeline>
<codeline><highlight class="normal">expect(42.1_d<sp/>==<sp/>42.101)<sp/>&lt;&lt;<sp/>&quot;epsilon=0.1&quot;;</highlight></codeline>
<codeline><highlight class="normal">expect(42.10_d<sp/>==<sp/>42.101)<sp/>&lt;&lt;<sp/>&quot;epsilon=0.01&quot;;</highlight></codeline>
<codeline><highlight class="normal">expect(42.10000001<sp/>==<sp/>42.1_d)<sp/>&lt;&lt;<sp/>&quot;epsilon=0.1&quot;;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>constant</highlight></codeline>
<codeline><highlight class="normal">constexpr<sp/>auto<sp/>compile_time_v<sp/>=<sp/>42;</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>run_time_v<sp/>=<sp/>99;</highlight></codeline>
<codeline><highlight class="normal">expect(constant&lt;42_i<sp/>==<sp/>compile_time_v&gt;<sp/>and<sp/>run_time_v<sp/>==<sp/>99_i);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>failure</highlight></codeline>
<codeline><highlight class="normal">expect(1_i<sp/>==<sp/>2)<sp/>&lt;&lt;<sp/>&quot;should<sp/>fail&quot;;</highlight></codeline>
<codeline><highlight class="normal">expect(sum()<sp/>==<sp/>1_i<sp/>or<sp/>2_i<sp/>==<sp/>sum())<sp/>&lt;&lt;<sp/>&quot;sum?&quot;;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">assertions.cpp:53:FAILED<sp/>[1<sp/>==<sp/>2]<sp/>should<sp/>fail</highlight></codeline>
<codeline><highlight class="normal">assertions.cpp:54:FAILED<sp/>[(0<sp/>==<sp/>1<sp/>or<sp/>2<sp/>==<sp/>0)]<sp/>sum?</highlight></codeline>
<codeline><highlight class="normal">===============================================================================</highlight></codeline>
<codeline><highlight class="normal">tests:<sp/><sp/><sp/>0<sp/><sp/>|<sp/>0<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">asserts:<sp/>20<sp/>|<sp/>18<sp/>passed<sp/>|<sp/>2<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/E1c7G5</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Tests&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Run/Skip/Tag&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">&quot;run<sp/>UDL&quot;_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>expect(42_i<sp/>==<sp/>42);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">skip<sp/>/<sp/>&quot;don&apos;t<sp/>run<sp/>UDL&quot;_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>expect(42_i<sp/>==<sp/>43)<sp/>&lt;&lt;<sp/>&quot;should<sp/>not<sp/>fire!&quot;;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(1<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
<codeline><highlight class="normal">1<sp/>tests<sp/>skipped</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">test(&quot;run<sp/>function&quot;)<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>expect(42_i<sp/>==<sp/>42);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">skip<sp/>/<sp/>test(&quot;don&apos;t<sp/>run<sp/>function&quot;)<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>expect(42_i<sp/>==<sp/>43)<sp/>&lt;&lt;<sp/>&quot;should<sp/>not<sp/>fire!&quot;;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(1<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
<codeline><highlight class="normal">1<sp/>tests<sp/>skipped</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">tag(&quot;nightly&quot;)<sp/>/<sp/>tag(&quot;slow&quot;)<sp/>/</highlight></codeline>
<codeline><highlight class="normal">&quot;performance&quot;_test=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>expect(42_i<sp/>==<sp/>42);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">tag(&quot;slow&quot;)<sp/>/</highlight></codeline>
<codeline><highlight class="normal">&quot;run<sp/>slowly&quot;_test=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>expect(42_i<sp/>==<sp/>43)<sp/>&lt;&lt;<sp/>&quot;should<sp/>not<sp/>fire!&quot;;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">cfg&lt;override&gt;<sp/>=<sp/>{.tag<sp/>=<sp/>{&quot;nightly&quot;}};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(1<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
<codeline><highlight class="normal">1<sp/>tests<sp/>skipped</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/X3_kG4</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Sections&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">&quot;[vector]&quot;_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>v(5);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>expect(fatal(5_ul<sp/>==<sp/>std::size(v)));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>should(&quot;resize<sp/>bigger&quot;)<sp/>=<sp/>[=]<sp/>{<sp/>//<sp/>or<sp/>&quot;resize<sp/>bigger&quot;_test</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>mut(v).resize(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>expect(10_ul<sp/>==<sp/>std::size(v));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>expect(fatal(5_ul<sp/>==<sp/>std::size(v)));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>should(&quot;resize<sp/>smaller&quot;)<sp/>=<sp/>[=]()<sp/>mutable<sp/>{<sp/>//<sp/>or<sp/>&quot;resize<sp/>smaller&quot;_test</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>v.resize(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>expect(0_ul<sp/>==<sp/>std::size(v));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(4<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/cE91bj</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Behavior<sp/>Driven<sp/>Development<sp/>(BDD)&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">&quot;Scenario&quot;_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>given(&quot;I<sp/>have...&quot;)<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>when(&quot;I<sp/>run...&quot;)<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>then(&quot;I<sp/>expect...&quot;)<sp/>=<sp/>[]<sp/>{<sp/>expect(1_i<sp/>==<sp/>1);<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>then(&quot;I<sp/>expect...&quot;)<sp/>=<sp/>[]<sp/>{<sp/>expect(1<sp/>==<sp/>1_i);<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(2<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/mNBySr</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Gherkin&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bdd::gherkin::steps<sp/>steps<sp/>=<sp/>[](auto&amp;<sp/>steps)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>steps.feature(&quot;*&quot;)<sp/>=<sp/>[&amp;]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>steps.scenario(&quot;*&quot;)<sp/>=<sp/>[&amp;]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>steps.given(&quot;I<sp/>have<sp/>a<sp/>number<sp/>{value}&quot;)<sp/>=<sp/>[&amp;](int<sp/>value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>number<sp/>=<sp/>value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>steps.when(&quot;I<sp/>add<sp/>{value}<sp/>to<sp/>it&quot;)<sp/>=<sp/>[&amp;](int<sp/>value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number<sp/>+=<sp/>value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>steps.then(&quot;I<sp/>expect<sp/>number<sp/>to<sp/>be<sp/>{value}&quot;)<sp/>=<sp/>[&amp;](int<sp/>value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expect(that<sp/>%<sp/>number<sp/>==<sp/>value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;Gherkin&quot;_test<sp/>=<sp/>steps<sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>R&quot;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Feature:<sp/>Number</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scenario:<sp/>Addition</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Given<sp/>I<sp/>have<sp/>a<sp/>number<sp/>40</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>I<sp/>add<sp/>2<sp/>to<sp/>it</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Then<sp/>I<sp/>expect<sp/>number<sp/>to<sp/>be<sp/>42</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)&quot;;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(1<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/BP3hyt</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Spec&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>describe(&quot;equality&quot;)<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>it(&quot;should<sp/>be<sp/>equal&quot;)<sp/><sp/><sp/><sp/><sp/>=<sp/>[]<sp/>{<sp/>expect(0_i<sp/>==<sp/>0);<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>it(&quot;should<sp/>not<sp/>be<sp/>equal&quot;)<sp/>=<sp/>[]<sp/>{<sp/>expect(1_i<sp/>!=<sp/>0);<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(2<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/BXYJ3a</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Parameterized&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(auto<sp/>i<sp/>:<sp/>std::vector{1,<sp/>2,<sp/>3})<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>test(&quot;parameterized<sp/>&quot;<sp/>+<sp/>std::to_string(i))<sp/>=<sp/>[i]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>expect(that<sp/>%<sp/>i<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&quot;args&quot;_test<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>[](auto<sp/>arg)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expect(arg<sp/>&gt;=<sp/>1_i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>|<sp/>std::vector{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&quot;types&quot;_test<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[]&lt;class<sp/>T&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expect(std::is_integral_v&lt;T&gt;)<sp/>&lt;&lt;<sp/>&quot;all<sp/>types<sp/>are<sp/>integrals&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>|<sp/>std::tuple&lt;bool,<sp/>int&gt;{};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&quot;args<sp/>and<sp/>types&quot;_test<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[]&lt;class<sp/>TArg&gt;(TArg<sp/>arg)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expect(fatal(std::is_integral_v&lt;TArg&gt;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expect(42_i<sp/>==<sp/>arg<sp/>or<sp/>&quot;is<sp/>true&quot;_b<sp/>==<sp/>arg);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expect(type&lt;TArg&gt;<sp/>==<sp/>type&lt;int&gt;<sp/>or<sp/>type&lt;TArg&gt;<sp/>==<sp/>type&lt;bool&gt;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>|<sp/>std::tuple{true,<sp/>42};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">When<sp/>using<sp/>the<sp/>`operator|`<sp/>syntax<sp/>instead<sp/>of<sp/>a<sp/>`for`<sp/>loop,<sp/>the<sp/>test<sp/>name<sp/>will<sp/>automatically</highlight></codeline>
<codeline><highlight class="normal">be<sp/>extended<sp/>to<sp/>avoid<sp/>duplicate<sp/>names.<sp/>For<sp/>example,<sp/>the<sp/>test<sp/>name<sp/>for<sp/>the<sp/>`args<sp/>and<sp/>types`<sp/>test</highlight></codeline>
<codeline><highlight class="normal">will<sp/>be<sp/>`args<sp/>and<sp/>types<sp/>(true,<sp/>bool)`<sp/>for<sp/>the<sp/>first<sp/>parameter<sp/>and<sp/>`args<sp/>and<sp/>types<sp/>(42,<sp/>int)`</highlight></codeline>
<codeline><highlight class="normal">for<sp/>the<sp/>second<sp/>parameter.<sp/>For<sp/>simple<sp/>built-in<sp/>types<sp/>(integral<sp/>types<sp/>and<sp/>floating<sp/>point<sp/>numbers),</highlight></codeline>
<codeline><highlight class="normal">the<sp/>test<sp/>name<sp/>will<sp/>contain<sp/>the<sp/>parameter<sp/>values.<sp/>For<sp/>other<sp/>types,<sp/>the<sp/>parameters<sp/>will<sp/>simply<sp/>be</highlight></codeline>
<codeline><highlight class="normal">enumerated.<sp/>For<sp/>example,<sp/>if<sp/>we<sp/>would<sp/>extend<sp/>the<sp/>test<sp/>above<sp/>to<sp/>use</highlight></codeline>
<codeline><highlight class="normal">`std::tuple{true,<sp/>42,<sp/>std::complex&lt;double&gt;{0.5,<sp/>1}}`,<sp/>the<sp/>test<sp/>name<sp/>in<sp/>the<sp/>third<sp/>run<sp/>would<sp/>be</highlight></codeline>
<codeline><highlight class="normal">`args<sp/>and<sp/>types<sp/>(3rd<sp/>parameter,<sp/>std::complex&lt;double&gt;)`.<sp/>If<sp/>you<sp/>want<sp/>to<sp/>have<sp/>the<sp/>actual<sp/>value<sp/>of</highlight></codeline>
<codeline><highlight class="normal">a<sp/>non-integral<sp/>type<sp/>included<sp/>in<sp/>the<sp/>test<sp/>name,<sp/>you<sp/>can<sp/>overload<sp/>the<sp/>`format_test_parameter`<sp/>function.</highlight></codeline>
<codeline><highlight class="normal">See<sp/>the<sp/>[example<sp/>on<sp/>parameterized<sp/>tests](https://github.com/boost-ext/ut/blob/master/example/parameterized.cpp)</highlight></codeline>
<codeline><highlight class="normal">for<sp/>details.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(14<sp/>asserts<sp/>in<sp/>10<sp/>tests)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/4xGGdo</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>And<sp/>whenever<sp/>I<sp/>need<sp/>to<sp/>know<sp/>the<sp/>specific<sp/>type<sp/>for<sp/>which<sp/>the<sp/>test<sp/>failed,</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>I<sp/>can<sp/>use<sp/>`reflection::type_name&lt;T&gt;()`,<sp/>like<sp/>this:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">&quot;types<sp/>with<sp/>type<sp/>name&quot;_test<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[]&lt;class<sp/>T&gt;()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expect(std::is_unsigned_v&lt;T&gt;)<sp/>&lt;&lt;<sp/>reflection::type_name&lt;T&gt;()<sp/>&lt;&lt;<sp/>&quot;is<sp/>unsigned&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>|<sp/>std::tuple&lt;unsigned<sp/>int,<sp/>float&gt;{};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">Running<sp/>&quot;types<sp/>with<sp/>type<sp/>name&quot;...PASSED</highlight></codeline>
<codeline><highlight class="normal">Running<sp/>&quot;types<sp/>with<sp/>type<sp/>name&quot;...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;source&gt;:10:FAILED<sp/>[false]<sp/>float<sp/>is<sp/>unsigned</highlight></codeline>
<codeline><highlight class="normal">FAILED</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/MEnGnbTY4</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Suites&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">namespace<sp/>ut<sp/>=<sp/>boost::ut;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ut::suite<sp/>errors<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>using<sp/>namespace<sp/>ut;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;throws&quot;_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>expect(throws([]<sp/>{<sp/>throw<sp/>0;<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;doesn&apos;t<sp/>throw&quot;_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>expect(nothrow([]{}));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>main()<sp/>{<sp/>}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(2<sp/>asserts<sp/>in<sp/>2<sp/>tests)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/CFbTP9</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Misc&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Logging<sp/>using<sp/>streams&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">&quot;logging&quot;_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>log<sp/>&lt;&lt;<sp/>&quot;pre&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>expect(42_i<sp/>==<sp/>43)<sp/>&lt;&lt;<sp/>&quot;message<sp/>on<sp/>failure&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>log<sp/>&lt;&lt;<sp/>&quot;post&quot;;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">Running<sp/>&quot;logging&quot;...</highlight></codeline>
<codeline><highlight class="normal">pre</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>logging.cpp:8:FAILED<sp/>[42<sp/>==<sp/>43]<sp/>message<sp/>on<sp/>failure</highlight></codeline>
<codeline><highlight class="normal">post</highlight></codeline>
<codeline><highlight class="normal">FAILED</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">===============================================================================</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">tests:<sp/><sp/><sp/>1<sp/>|<sp/>1<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">asserts:<sp/>1<sp/>|<sp/>0<sp/>passed<sp/>|<sp/>1<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/26fPSY</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Logging<sp/>using<sp/>formatting&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline><highlight class="normal">This<sp/>requires<sp/>using<sp/>C++20<sp/>with<sp/>a<sp/>standard<sp/>library<sp/>with<sp/>std::format<sp/>support.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">&quot;logging&quot;_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>log(&quot;\npre<sp/><sp/>{}<sp/>==<sp/>{}\n&quot;,<sp/>42,<sp/>43);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>expect(42_i<sp/>==<sp/>43)<sp/>&lt;&lt;<sp/>&quot;message<sp/>on<sp/>failure&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>log(&quot;\npost<sp/>{}<sp/>==<sp/>{}<sp/>-&gt;<sp/>{}\n&quot;,<sp/>42,<sp/>43,<sp/>42<sp/>==<sp/>43);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">Running<sp/>&quot;logging&quot;...</highlight></codeline>
<codeline><highlight class="normal">pre<sp/><sp/>42<sp/>==<sp/>43</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>logging.cpp:8:FAILED<sp/>[42<sp/>==<sp/>43]<sp/>message<sp/>on<sp/>failure</highlight></codeline>
<codeline><highlight class="normal">post<sp/>42<sp/>==<sp/>43<sp/>-&gt;<sp/>false</highlight></codeline>
<codeline><highlight class="normal">FAILED</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">===============================================================================</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">tests:<sp/><sp/><sp/>1<sp/>|<sp/>1<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">asserts:<sp/>1<sp/>|<sp/>0<sp/>passed<sp/>|<sp/>1<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/26fPSY</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Matchers&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">&quot;matchers&quot;_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>constexpr<sp/>auto<sp/>is_between<sp/>=<sp/>[](auto<sp/>lhs,<sp/>auto<sp/>rhs)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>[=](auto<sp/>value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>that<sp/>%<sp/>value<sp/>&gt;=<sp/>lhs<sp/>and<sp/>that<sp/>%<sp/>value<sp/>&lt;=<sp/>rhs;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>expect(is_between(1,<sp/>100)(42));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>expect(not<sp/>is_between(1,<sp/>100)(0));</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(2<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/4qwrCi</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Exceptions/Aborts&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">&quot;exceptions/aborts&quot;_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>expect(throws&lt;std::runtime_error&gt;([]<sp/>{<sp/>throw<sp/>std::runtime_error{&quot;&quot;};<sp/>}))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;throws<sp/>runtime_error&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>expect(throws([]<sp/>{<sp/>throw<sp/>0;<sp/>}))<sp/>&lt;&lt;<sp/>&quot;throws<sp/>any<sp/>exception&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>expect(nothrow([]{}))<sp/>&lt;&lt;<sp/>&quot;doesn&apos;t<sp/>throw&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>expect(aborts([]<sp/>{<sp/>assert(false);<sp/>}));</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(4<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/A2EehK</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Config&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Runner&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">namespace<sp/>ut<sp/>=<sp/>boost::ut;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>cfg<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>class<sp/>runner<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;class...<sp/>Ts&gt;<sp/>auto<sp/>on(ut::events::test&lt;Ts...&gt;<sp/>test)<sp/>{<sp/>test();<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;class...<sp/>Ts&gt;<sp/>auto<sp/>on(ut::events::skip&lt;Ts...&gt;)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>TExpr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>on(ut::events::assertion&lt;TExpr&gt;)<sp/>-&gt;<sp/>bool<sp/>{<sp/>return<sp/>true;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>on(ut::events::fatal_assertion)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>TMsg&gt;<sp/>auto<sp/>on(ut::events::log&lt;TMsg&gt;)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">}<sp/>//<sp/>namespace<sp/>cfg</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;&gt;<sp/>auto<sp/>ut::cfg&lt;ut::override&gt;<sp/>=<sp/>cfg::runner{};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/jdg687</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Reporter&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">namespace<sp/>ut<sp/>=<sp/>boost::ut;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>cfg<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>class<sp/>reporter<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>on(ut::events::test_begin)<sp/>-&gt;<sp/>void<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>on(ut::events::test_run)<sp/>-&gt;<sp/>void<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>on(ut::events::test_skip)<sp/>-&gt;<sp/>void<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>on(ut::events::test_end)<sp/>-&gt;<sp/>void<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>TMsg&gt;<sp/>auto<sp/>on(ut::events::log&lt;TMsg&gt;)<sp/>-&gt;<sp/>void<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>TExpr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>on(ut::events::assertion_pass&lt;TExpr&gt;)<sp/>-&gt;<sp/>void<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>TExpr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>on(ut::events::assertion_fail&lt;TExpr&gt;)<sp/>-&gt;<sp/>void<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>on(ut::events::fatal_assertion)<sp/>-&gt;<sp/>void<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>on(ut::events::exception)<sp/>-&gt;<sp/>void<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>on(ut::events::summary)<sp/>-&gt;<sp/>void<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">}<sp/><sp/>//<sp/>namespace<sp/>cfg</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;&gt;</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>ut::cfg&lt;ut::override&gt;<sp/>=<sp/>ut::runner&lt;cfg::reporter&gt;{};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/gsAPKg</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Printer&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">namespace<sp/>ut<sp/>=<sp/>boost::ut;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>cfg<sp/>{</highlight></codeline>
<codeline><highlight class="normal">struct<sp/>printer<sp/>:<sp/>ut::printer<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>auto&amp;<sp/>operator&lt;&lt;(T&amp;&amp;<sp/>t)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>std::forward&lt;T&gt;(t);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">}<sp/><sp/>//<sp/>namespace<sp/>cfg</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;&gt;</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>ut::cfg&lt;ut::override&gt;<sp/>=<sp/>ut::runner&lt;ut::reporter&lt;cfg::printer&gt;&gt;{};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>using<sp/>namespace<sp/>ut;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;printer&quot;_test<sp/>=<sp/>[]<sp/>{};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/XCscF9</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;a<sp/>name=&quot;api&quot;&gt;&lt;/a&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;a<sp/>name=&quot;configuration&quot;&gt;&lt;/a&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;a<sp/>name=&quot;user-guide&quot;&gt;&lt;/a&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;User<sp/>Guide&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;API&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">export<sp/>module<sp/>boost.ut;<sp/>///<sp/>__cpp_modules</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>boost::inline<sp/>ext::ut::inline<sp/>v2_3_1<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Represents<sp/>test<sp/>suite<sp/>object</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>suite<sp/>final<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Creates<sp/>and<sp/>executes<sp/>test<sp/>suite</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@example<sp/>suite<sp/>_<sp/>=<sp/>[]<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>suite<sp/>test<sp/>suite<sp/>function</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>explicit(false)<sp/>suite(auto<sp/>suite);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Creates<sp/>a<sp/>test</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@example<sp/>&quot;name&quot;_test<sp/>=<sp/>[]<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return<sp/>test<sp/>object<sp/>to<sp/>be<sp/>executed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_test;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Creates<sp/>a<sp/>test</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@example<sp/>test(&quot;name&quot;)<sp/>=<sp/>[]<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return<sp/>test<sp/>object<sp/>to<sp/>be<sp/>executed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>constexpr<sp/>auto<sp/>test<sp/>=<sp/>[](const<sp/>auto<sp/>name);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Creates<sp/>a<sp/>test</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@example<sp/>should(&quot;name&quot;)<sp/>=<sp/>[]<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return<sp/>test<sp/>object<sp/>to<sp/>be<sp/>executed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>constexpr<sp/>auto<sp/>should<sp/>=<sp/>[](const<sp/>auto<sp/>name);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Behaviour<sp/>Driven<sp/>Development<sp/>(BDD)<sp/>helper<sp/>functions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>name<sp/>step<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return<sp/>test<sp/>object<sp/>to<sp/>be<sp/>executed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>constexpr<sp/>auto<sp/>given<sp/>=<sp/>[](const<sp/>auto<sp/>name);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>constexpr<sp/>auto<sp/>when<sp/><sp/>=<sp/>[](const<sp/>auto<sp/>name);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>constexpr<sp/>auto<sp/>then<sp/><sp/>=<sp/>[](const<sp/>auto<sp/>name);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Evaluates<sp/>an<sp/>expression</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@example<sp/>expect(42<sp/>==<sp/>42_i<sp/>and<sp/>1<sp/>!=<sp/>2_i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>expr<sp/>expression<sp/>to<sp/>be<sp/>evaluated</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>source<sp/>location<sp/>https://en.cppreference.com/w/cpp/utility/source_location</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return<sp/>stream</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>constexpr<sp/>OStream&amp;<sp/>expect(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Expression<sp/>expr,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>std::source_location&amp;<sp/>location<sp/>=<sp/>std::source_location::current()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@example<sp/>(that<sp/>%<sp/>42<sp/>==<sp/>42);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>expr<sp/>expression<sp/>to<sp/>be<sp/>evaluated</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator%(Expression<sp/>expr)<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>that{};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>inline<sp/>namespace<sp/>literals<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>User<sp/>defined<sp/>literals<sp/>to<sp/>represent<sp/>constant<sp/>values</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@example<sp/>42_i,<sp/>0_uc,<sp/>1.23_d</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_i;<sp/><sp/>///<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_s;<sp/><sp/>///<sp/>short</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_c;<sp/><sp/>///<sp/>char</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_l;<sp/><sp/>///<sp/>long</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_ll;<sp/>///<sp/>long<sp/>long</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_u;<sp/><sp/>///<sp/>unsigned</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_uc;<sp/>///<sp/>unsigned<sp/>char</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_us;<sp/>///<sp/>unsigned<sp/>short</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_ul;<sp/>///<sp/>unsigned<sp/>long</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_f;<sp/><sp/>///<sp/>float</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_d;<sp/><sp/>///<sp/>double</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_ld;<sp/>///<sp/>long<sp/>double</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Represents<sp/>dynamic<sp/>values</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@example<sp/>_i(42),<sp/>_f(42.)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>_b(bool);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>_c(char);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>_s(short);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>_i(int);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>_l(long);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>_ll(long<sp/>long);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>_u(unsigned);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>_uc(unsigned<sp/>char);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>_us(unsigned<sp/>short);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>_ul(unsigned<sp/>long);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>_f(float);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>_d(double);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>_ld(long<sp/>double);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Logical<sp/>representation<sp/>of<sp/>constant<sp/>boolean<sp/>(true)<sp/>value</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@example<sp/>&quot;is<sp/>set&quot;_b<sp/><sp/><sp/><sp/><sp/>:<sp/>true</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>not<sp/>&quot;is<sp/>set&quot;_b<sp/>:<sp/>false</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>operator<sp/>&quot;&quot;_b;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>//<sp/>namespace<sp/>literals</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>inline<sp/>namespace<sp/>operators<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Comparison<sp/>functions<sp/>to<sp/>be<sp/>used<sp/>in<sp/>expressions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@example<sp/>eq(42,<sp/>42),<sp/>neq(1,<sp/>2)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>eq(Operator<sp/>lhs,<sp/>Operator<sp/>rhs);<sp/><sp/>///<sp/>==</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>neq(Operator<sp/>lhs,<sp/>Operator<sp/>rhs);<sp/>///<sp/>!=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>gt(Operator<sp/>lhs,<sp/>Operator<sp/>rhs);<sp/><sp/>///<sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>ge(Operator<sp/>lhs,<sp/>Operator<sp/>rhs);<sp/><sp/>///<sp/>&gt;=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>lt(Operator<sp/>lhs,<sp/>Operator<sp/>rhs);<sp/><sp/>///<sp/>&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>le(Operator<sp/>lhs,<sp/>Operator<sp/>rhs);<sp/><sp/>///<sp/>&lt;=</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Overloaded<sp/>comparison<sp/>operators<sp/>to<sp/>be<sp/>used<sp/>in<sp/>expressions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@example<sp/>(42_i<sp/>!=<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>operator==;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>operator!=;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>operator&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>operator&gt;=;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>operator&lt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>operator&lt;=;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Overloaded<sp/>logic<sp/>operators<sp/>to<sp/>be<sp/>used<sp/>in<sp/>expressions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@example<sp/>(42_i<sp/>!=<sp/>0<sp/>and<sp/>1<sp/>==<sp/>2_i)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>operator<sp/>and;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>operator<sp/>or;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>operator<sp/>not;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Executes<sp/>parameterized<sp/>tests</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@example<sp/>&quot;parameterized&quot;_test<sp/>=<sp/>[](auto<sp/>arg)<sp/>{}<sp/>|<sp/>std::tuple{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>operator|;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Creates<sp/>tags</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@example<sp/>tag(&quot;slow&quot;)<sp/>/<sp/>tag(&quot;nightly&quot;)<sp/>/<sp/>&quot;perf&quot;_test<sp/>=<sp/>[]{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>operator/;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Creates<sp/>a<sp/>`fatal_assertion`<sp/>from<sp/>an<sp/>expression</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@example<sp/>(42_i<sp/>==<sp/>0)<sp/>&gt;&gt;<sp/>fatal</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>operator&gt;&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>//<sp/>namespace<sp/>operators</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Creates<sp/>skippable<sp/>test<sp/>object</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@example<sp/>skip<sp/>/<sp/>&quot;don&apos;t<sp/>run&quot;_test<sp/>=<sp/>[]<sp/>{<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>constexpr<sp/>auto<sp/>skip<sp/>=<sp/>tag(&quot;skip&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@example<sp/>log<sp/>&lt;&lt;<sp/>&quot;message!&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>msg<sp/>stringable<sp/>message</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto&amp;<sp/>operator&lt;&lt;(Msg<sp/>msg);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>log{};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Makes<sp/>object<sp/>mutable</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@example<sp/>mut(object)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>t<sp/>object<sp/>to<sp/>be<sp/>mutated</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template&lt;class<sp/>T&gt;<sp/>auto<sp/>mut(const<sp/>T&amp;<sp/>t)<sp/>-&gt;<sp/>T&amp;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Default<sp/>execution<sp/>flow<sp/>policy</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>class<sp/>runner<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@example<sp/>cfg&lt;override&gt;<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.filter<sp/><sp/>=<sp/>&quot;test.section.*&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.colors<sp/><sp/>=<sp/>{<sp/>.none<sp/>=<sp/>&quot;&quot;<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dry__run<sp/>=<sp/>true</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>options.filter<sp/>{default:<sp/>&quot;*&quot;}<sp/>runs<sp/>all<sp/>tests<sp/>which<sp/>names</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matches<sp/>test.section.*<sp/>filter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>options.colors<sp/>{default:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.none<sp/>=<sp/>&quot;\033[0m&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.pass<sp/>=<sp/>&quot;\033[32m&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.fail<sp/><sp/>=<sp/>&quot;\033[31m&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>if<sp/>specified<sp/>then<sp/>overrides<sp/>default<sp/>color<sp/>values</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>options.dry_run<sp/>{default:<sp/>false}<sp/>if<sp/>true<sp/>then<sp/>print<sp/>test<sp/>names<sp/>to<sp/>be</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>executed<sp/>without<sp/>running<sp/>them</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>operator=(options);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@example<sp/>suite<sp/>_<sp/>=<sp/>[]<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>suite()<sp/>executes<sp/>suite</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;class<sp/>TSuite&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>on(ut::events::suite&lt;TSuite&gt;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@example<sp/>&quot;name&quot;_test<sp/>=<sp/>[]<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>test.type<sp/>[&quot;test&quot;,<sp/>&quot;given&quot;,<sp/>&quot;when&quot;,<sp/>&quot;then&quot;]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>test.name<sp/>&quot;name&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>test.arg<sp/>parameterized<sp/>argument</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>test()<sp/>executes<sp/>test</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;class...<sp/>Ts&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>on(ut::events::test&lt;Ts...&gt;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@example<sp/>skip<sp/>/<sp/>&quot;don&apos;t<sp/>run&quot;_test<sp/>=<sp/>[]{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>skip.type<sp/>[&quot;test&quot;,<sp/>&quot;given&quot;,<sp/>&quot;when&quot;,<sp/>&quot;then&quot;]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>skip.name<sp/>&quot;don&apos;t<sp/>run&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>skip.arg<sp/>parameterized<sp/>argument</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;class...<sp/>Ts&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>on(ut::events::skip&lt;Ts...&gt;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@example<sp/>file.cpp:42:<sp/>expect(42_i<sp/>==<sp/>42);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>assertion.expr<sp/>42_i<sp/>==<sp/>42</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>assertion.location<sp/>{<sp/>&quot;file.cpp&quot;,<sp/>42<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@return<sp/>true<sp/>if<sp/>expr<sp/>passes,<sp/>false<sp/>otherwise</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>TExpr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>on(ut::events::assertion&lt;TExpr&gt;)<sp/>-&gt;<sp/>bool;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@example<sp/>expect((2_i<sp/>==<sp/>1)<sp/>&gt;&gt;<sp/>fatal)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@note<sp/>triggered<sp/>by<sp/>`fatal`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>should<sp/>std::exit</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>on(ut::events::fatal_assertion);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@example<sp/>log<sp/>&lt;&lt;<sp/>&quot;message&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>log.msg<sp/>&quot;message&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;class<sp/>TMsg&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>on(ut::events::log&lt;TMsg&gt;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Explicitly<sp/>runs<sp/>registered<sp/>test<sp/>suites</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>not<sp/>called<sp/>directly<sp/>test<sp/>suites<sp/>are<sp/>executed<sp/>with<sp/>run&apos;s<sp/>destructor</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@example<sp/>return<sp/>run({.report_errors<sp/>=<sp/>true})</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>run_cfg.report_errors<sp/>{default:<sp/>false}<sp/>if<sp/>true<sp/>it<sp/>prints<sp/>the<sp/>summary<sp/>after<sp/>running</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>run(run_cfg);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Runs<sp/>registered<sp/>test<sp/>suites<sp/>if<sp/>they<sp/>haven&apos;t<sp/>been<sp/>explicitly<sp/>executed<sp/>already</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>~run();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Default<sp/>reporter<sp/>policy</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>class<sp/>reporter<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@example<sp/>file.cpp:42:<sp/>&quot;name&quot;_test<sp/>=<sp/>[]<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>test_begin.type<sp/>[&quot;test&quot;,<sp/>&quot;given&quot;,<sp/>&quot;when&quot;,<sp/>&quot;then&quot;]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>test_begin.name<sp/>&quot;name&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>test_begin.location<sp/>{<sp/>&quot;file.cpp&quot;,<sp/>42<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>on(ut::events::test_begin)<sp/>-&gt;<sp/>void;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@example<sp/>&quot;name&quot;_test<sp/>=<sp/>[]<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>test_run.type<sp/>[&quot;test&quot;,<sp/>&quot;given&quot;,<sp/>&quot;when&quot;,<sp/>&quot;then&quot;]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>test_run.name<sp/>&quot;name&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>on(ut::events::test_run)<sp/>-&gt;<sp/>void;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@example<sp/>&quot;name&quot;_test<sp/>=<sp/>[]<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>test_skip.type<sp/>[&quot;test&quot;,<sp/>&quot;given&quot;,<sp/>&quot;when&quot;,<sp/>&quot;then&quot;]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>test_skip.name<sp/>&quot;name&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>on(ut::events::test_skip)<sp/>-&gt;<sp/>void;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@example<sp/>&quot;name&quot;_test<sp/>=<sp/>[]<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>test_end.type<sp/>[&quot;test&quot;,<sp/>&quot;given&quot;,<sp/>&quot;when&quot;,<sp/>&quot;then&quot;]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>test_end.name<sp/>&quot;name&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>on(ut::events::test_end)<sp/>-&gt;<sp/>void;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@example<sp/>log<sp/>&lt;&lt;<sp/>&quot;message&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>log.msg<sp/>&quot;message&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;class<sp/>TMsg&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>on(ut::events::log&lt;TMsg&gt;)<sp/>-&gt;<sp/>void;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@example<sp/>file.cpp:42:<sp/>expect(42_i<sp/>==<sp/>42);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>assertion_pass.expr<sp/>42_i<sp/>==<sp/>42</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>assertion_pass.location<sp/>{<sp/>&quot;file.cpp&quot;,<sp/>42<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>TExpr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>on(ut::events::assertion_pass&lt;TExpr&gt;)<sp/>-&gt;<sp/>void;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@example<sp/>file.cpp:42:<sp/>expect(42_i<sp/>!=<sp/>42);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>assertion_fail.expr<sp/>42_i<sp/>!=<sp/>42</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>assertion_fail.location<sp/>{<sp/>&quot;file.cpp&quot;,<sp/>42<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>TExpr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>on(ut::events::assertion_fail&lt;TExpr&gt;)<sp/>-&gt;<sp/>void;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@example<sp/>expect((2_i<sp/>==<sp/>1)<sp/>&gt;&gt;<sp/>fatal)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@note<sp/>triggered<sp/>by<sp/>`fatal`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>should<sp/>std::exit</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>on(ut::events::fatal_assertion)<sp/>-&gt;<sp/>void;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@example<sp/>&quot;exception&quot;_test<sp/>=<sp/>[]<sp/>{<sp/>throw<sp/>std::runtime_error{&quot;&quot;};<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>on(ut::events::exception)<sp/>-&gt;<sp/>void;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@note<sp/>triggered<sp/>on<sp/>destruction<sp/>of<sp/>runner</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>on(ut::events::summary)<sp/>-&gt;<sp/>void;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Used<sp/>to<sp/>override<sp/>default<sp/>running<sp/>policy</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@example<sp/>template<sp/>&lt;&gt;<sp/>auto<sp/>cfg&lt;override&gt;<sp/>=<sp/>runner&lt;reporter&gt;{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>override<sp/>{};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Default<sp/>UT<sp/>execution<sp/>policy</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Can<sp/>be<sp/>overwritten<sp/>with<sp/>override</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>=<sp/>override&gt;<sp/>auto<sp/>cfg<sp/>=<sp/>runner&lt;reporter&gt;{};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Configuration&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Option<sp/>|<sp/>Description<sp/>|<sp/>Example<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|-|-|-|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`BOOST_UT_VERSION`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Current<sp/>version<sp/>|<sp/>`2&apos;3&apos;1`<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;a<sp/>name=&quot;faq&quot;&gt;&lt;/a&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;FAQ&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;a<sp/>name=&quot;how-it-works&quot;&gt;&lt;/a&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;How<sp/>does<sp/>it<sp/>work?&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>`suite`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>```cpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Represents<sp/>suite<sp/>object</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@example<sp/>suite<sp/>_<sp/>=<sp/>[]{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>suite<sp/>final<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Assigns<sp/>and<sp/>executes<sp/>test<sp/>suite</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>constexpr<sp/>explicit(false)<sp/>suite(Suite<sp/>suite)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>suite();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>`test`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>```cpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Creates<sp/>named<sp/>test<sp/>object</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@example<sp/>&quot;hello<sp/>world&quot;_test</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return<sp/>test<sp/>object</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/>constexpr<sp/>Test<sp/>operator<sp/>&quot;&quot;_test(const<sp/>char*<sp/>name,<sp/>std::size_t<sp/>size)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>test{{name,<sp/>size}};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>```cpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Represents<sp/>test<sp/>object</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>test<sp/>final<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::string_view<sp/>name{};<sp/>///<sp/>test<sp/>case<sp/>name</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Assigns<sp/>and<sp/>executes<sp/>test<sp/>function</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>test<sp/>function</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>operator=(const<sp/>Test&amp;<sp/>test)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Running...<sp/>&quot;<sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/>&apos;\n&apos;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>`expect`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>```cpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Evaluates<sp/>an<sp/>expression</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@example<sp/>expect(42_i<sp/>==<sp/>42);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>expr<sp/>expression<sp/>to<sp/>be<sp/>evaluated</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>source<sp/>location<sp/>https://en.cppreference.com/w/cpp/utility/source_location</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return<sp/>stream</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>constexpr<sp/>OStream&amp;<sp/>expect(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Expression<sp/>expr,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>std::source_location&amp;<sp/>location<sp/>=<sp/>std::source_location::current()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(not<sp/>static_cast&lt;bool&gt;(expr)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>location.file()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&apos;:&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>location.line()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;:FAILED:<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>expr</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&apos;\n&apos;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>std::cerr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>```cpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Creates<sp/>constant<sp/>object<sp/>for<sp/>which<sp/>operators<sp/>can<sp/>be<sp/>overloaded</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@example<sp/>42_i</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return<sp/>integral<sp/>constant<sp/>object</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template<sp/>&lt;char...<sp/>Cs&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/>constexpr<sp/>Operator<sp/>operator&quot;&quot;_i()<sp/>-&gt;<sp/>integral_constant&lt;int,<sp/>value&lt;Cs...&gt;&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>```cpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Overloads<sp/>comparison<sp/>if<sp/>at<sp/>least<sp/>one<sp/>of<sp/>{lhs,<sp/>rhs}<sp/>is<sp/>an<sp/>Operator</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@example<sp/>(42_i<sp/>==<sp/>42)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>lhs<sp/>Left-hand<sp/>side<sp/>operator</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>rhs<sp/>Right-hand<sp/>side<sp/>operator</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return<sp/>Comparison<sp/>object</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator==(Operator<sp/>lhs,<sp/>Operator<sp/>rhs)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>eq{lhs,<sp/>rhs};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>```cpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Comparison<sp/>Operator</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template<sp/>&lt;Operator<sp/>TLhs,<sp/>Operator<sp/>TRhs&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>eq<sp/>final<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TLhs<sp/>lhs{};<sp/>//<sp/>Left-hand<sp/>side<sp/>operator</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TRhs<sp/>rhs{};<sp/>//<sp/>Right-hand<sp/>side<sp/>operator</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Performs<sp/>comparison<sp/>operation</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@return<sp/>true<sp/>if<sp/>expression<sp/>is<sp/>successful</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>constexpr<sp/>explicit<sp/>operator<sp/>bool()<sp/>const<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>lhs<sp/>==<sp/>rhs;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Nicely<sp/>prints<sp/>the<sp/>operation</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>friend<sp/>auto<sp/>operator&lt;&lt;(OStream&amp;<sp/>os,<sp/>const<sp/>eq&amp;<sp/>op)<sp/>-&gt;<sp/>Ostream&amp;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(os<sp/>&lt;&lt;<sp/>op.lhs<sp/>&lt;&lt;<sp/>&quot;<sp/>==<sp/>&quot;<sp/>&lt;&lt;<sp/>op.rhs);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>`Sections`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>```cpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Convenient<sp/>aliases<sp/>for<sp/>creating<sp/>test<sp/>named<sp/>object</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@example<sp/>should(&quot;return<sp/>true&quot;)<sp/>=<sp/>[]<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>constexpr<sp/>auto<sp/>should<sp/>=<sp/>[](const<sp/>auto<sp/>name)<sp/>{<sp/>return<sp/>test{name};<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>`Behaviour<sp/>Driven<sp/>Development<sp/>(BDD)`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>```cpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Convenient<sp/>aliases<sp/>for<sp/>creating<sp/>BDD<sp/>tests</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@example<sp/>feature(&quot;Feature&quot;)<sp/>=<sp/>[]<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@example<sp/>scenario(&quot;Scenario&quot;)<sp/>=<sp/>[]<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@example<sp/>given(&quot;I<sp/>have<sp/>an<sp/>object&quot;)<sp/>=<sp/>[]<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@example<sp/>when(&quot;I<sp/>call<sp/>it&quot;)<sp/>=<sp/>[]<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@example<sp/>then(&quot;I<sp/>should<sp/>get&quot;)<sp/>=<sp/>[]<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>constexpr<sp/>auto<sp/>feature<sp/><sp/>=<sp/>[](const<sp/>auto<sp/>name)<sp/>{<sp/>return<sp/>test{name};<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>constexpr<sp/>auto<sp/>scenario<sp/>=<sp/>[](const<sp/>auto<sp/>name)<sp/>{<sp/>return<sp/>test{name};<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>constexpr<sp/>auto<sp/>given<sp/><sp/><sp/><sp/>=<sp/>[](const<sp/>auto<sp/>name)<sp/>{<sp/>return<sp/>test{name};<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>constexpr<sp/>auto<sp/>when<sp/><sp/><sp/><sp/><sp/>=<sp/>[](const<sp/>auto<sp/>name)<sp/>{<sp/>return<sp/>test{name};<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>constexpr<sp/>auto<sp/>then<sp/><sp/><sp/><sp/><sp/>=<sp/>[](const<sp/>auto<sp/>name)<sp/>{<sp/>return<sp/>test{name};<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/6Nk5Mi</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>`Spec`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>```cpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Convenient<sp/>aliases<sp/>for<sp/>creating<sp/>Spec<sp/>tests</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@example<sp/>describe(&quot;test&quot;)<sp/>=<sp/>[]<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@example<sp/>it(&quot;should...&quot;)<sp/>=<sp/>[]<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>constexpr<sp/>auto<sp/>describe<sp/>=<sp/>[](const<sp/>auto<sp/>name)<sp/>{<sp/>return<sp/>test{name};<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>constexpr<sp/>auto<sp/>it<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>[](const<sp/>auto<sp/>name)<sp/>{<sp/>return<sp/>test{name};<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>[Example<sp/>implementation](https://github.com/boost-ext/ut/tree/gh-pages/denver-cpp-2020/example)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Try<sp/>it<sp/>online</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Header<sp/>-<sp/>https://godbolt.org/z/x96n8b</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Module<sp/>-<sp/>https://wandbox.org/permlink/LrV7WwIgghTP1nrs</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;a<sp/>name=&quot;fast-compilation-times&quot;&gt;&lt;/a&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Fast<sp/>compilation<sp/>times<sp/>&lt;a<sp/>href=&quot;#benchmarks&quot;&gt;(Benchmarks)&lt;/a&gt;?&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Implementation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Leveraging<sp/>[C++20](#cpp-20)<sp/>features</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Avoiding<sp/>unique<sp/>types<sp/>for<sp/>lambda<sp/>expressions</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>Test&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>requires<sp/>not<sp/>std::convertible_to&lt;Test,<sp/>void<sp/>(*)()&gt;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>constexpr<sp/>auto<sp/>operator=(Test<sp/>test);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">vs</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Compiles<sp/>5x<sp/>faster<sp/>because<sp/>it<sp/>doesn&apos;t<sp/>introduce<sp/>a<sp/>new<sp/>type<sp/>for<sp/>each<sp/>lambda</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>constexpr<sp/>auto<sp/>operator=(void<sp/>(*test)());</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`Type-name`<sp/>erasure<sp/>(allows<sp/>types/function<sp/>memoization)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>eq&lt;integral_constant&lt;42&gt;,<sp/>int&gt;{<sp/>{},<sp/>42<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">vs</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Can<sp/>be<sp/>memoized<sp/>-<sp/>faster<sp/>to<sp/>compile</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>eq&lt;int,<sp/>int&gt;{42,<sp/>42}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Limiting<sp/>preprocessor<sp/>work</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>Single<sp/>header/module</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>Minimal<sp/>number<sp/>of<sp/>include<sp/>files</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Simplified<sp/>versions<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`std::function`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`std::string_view`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;a<sp/>name=&quot;cpp-20&quot;&gt;&lt;/a&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;C++20<sp/>features?&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>API</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>[Source<sp/>Location](https://eel.is/c++draft/support.srcloc#source.location.syn)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*<sp/>Assertions<sp/>-<sp/>`expect(false)`<sp/>-<sp/>`<sp/>__FILE__:__LINE__:FAILED<sp/>[false]`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>[Designated<sp/>initializers](https://eel.is/c++draft/dcl.init#nt:designated-initializer-list)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*<sp/>Configuration<sp/>-<sp/>`cfg&lt;override&gt;<sp/>=<sp/>{.filter<sp/>=<sp/>&quot;test&quot;}`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>[Non-Type<sp/>Template<sp/>Parameter](https://eel.is/c++draft/temp.arg.nontype)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*<sp/>Constant<sp/>matchers<sp/>-<sp/>`constant&lt;42_i<sp/>==<sp/>42&gt;`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>[Template<sp/>Parameter<sp/>List<sp/>for<sp/>generic<sp/>lambdas](https://eel.is/c++draft/expr.prim.lambda)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*<sp/>Parameterized<sp/>tests<sp/>-<sp/>`&quot;types&quot;_test<sp/>=<sp/>[]&lt;class<sp/>T&gt;()<sp/>{};`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>[Concepts](https://eel.is/c++draft/concepts.lang)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*<sp/>Operators<sp/>-<sp/>`Operator<sp/>@<sp/>Operator`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>[Modules](https://eel.is/c++draft/module)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*<sp/>`import<sp/>boost.ut;`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;a<sp/>name=&quot;cpp-2x&quot;&gt;&lt;/a&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;C++2X<sp/>integration?&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Parameterized<sp/>tests<sp/>with<sp/>Expansion<sp/>statements<sp/>(https://wg21.link/P1306r1)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">template<sp/>for<sp/>(auto<sp/>arg<sp/>:<sp/>std::tuple&lt;int,<sp/>double&gt;{})<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>test(&quot;types<sp/>&quot;<sp/>+<sp/>std::to_string(arg))<sp/>=<sp/>[arg]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>expect(type(arg)<sp/>==<sp/>type&lt;int&gt;<sp/>or<sp/>type(arg)<sp/>==<sp/>type&lt;double&gt;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(2<sp/>asserts<sp/>in<sp/>2<sp/>tests)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://cppx.godbolt.org/z/dMmqmM</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;a<sp/>name=&quot;std&quot;&gt;&lt;/a&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Is<sp/>standardization<sp/>an<sp/>option?&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Personally,<sp/>I<sp/>believe<sp/>that<sp/>C++<sp/>standard<sp/>could<sp/>benefit<sp/>from<sp/>common<sp/>testing<sp/>primitives<sp/>(`expect`,<sp/>`&quot;&quot;_test`)<sp/>because</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>It<sp/>lowers<sp/>the<sp/>entry-level<sp/>to<sp/>the<sp/>language<sp/>(no<sp/>need<sp/>for<sp/>third-party<sp/>libraries)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>It<sp/>improves<sp/>the<sp/>education<sp/>aspect<sp/>(one<sp/>standard<sp/>way<sp/>of<sp/>doing<sp/>it)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>It<sp/>makes<sp/>the<sp/>language<sp/>more<sp/>coherent/stable<sp/>(consistent<sp/>design<sp/>with<sp/>other<sp/>features,<sp/>stable<sp/>API)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>It<sp/>makes<sp/>the<sp/>testing<sp/>a<sp/>first<sp/>class<sp/>citizen<sp/>(shows<sp/>that<sp/>the<sp/>community<sp/>cares<sp/>about<sp/>this<sp/>aspect<sp/>of<sp/>the<sp/>language)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>It<sp/>allows<sp/>to<sp/>publish<sp/>tests<sp/>for<sp/>the<sp/>Standard<sp/>Library<sp/>(STL)<sp/>in<sp/>the<sp/>standard<sp/>way<sp/>(coherency,<sp/>easier<sp/>to<sp/>extend)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>It<sp/>allows<sp/>to<sp/>act<sp/>as<sp/>additional<sp/>documentation<sp/>as<sp/>a<sp/>way<sp/>to<sp/>verify<sp/>whether<sp/>a<sp/>particular<sp/>implementation<sp/>is<sp/>conforming<sp/>(quality,<sp/>self-verification)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>It<sp/>helps<sp/>with<sp/>establishing<sp/>standard<sp/>vocabulary<sp/>for<sp/>testing<sp/>(common<sp/>across<sp/>STL<sp/>and<sp/>other<sp/>projects)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;a<sp/>name=&quot;macros&quot;&gt;&lt;/a&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Can<sp/>I<sp/>still<sp/>use<sp/>macros?&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Sure,<sp/>although<sp/>please<sp/>notice<sp/>that<sp/>there<sp/>are<sp/>negatives<sp/>of<sp/>using<sp/>macros<sp/>such<sp/>as</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Error<sp/>messages<sp/>might<sp/>be<sp/>not<sp/>clear<sp/>and/or<sp/>point<sp/>to<sp/>the<sp/>wrong<sp/>line</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Global<sp/>scope<sp/>will<sp/>be<sp/>polluted</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Type<sp/>safety<sp/>will<sp/>be<sp/>ignored</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EXPECT(...)<sp/>::boost::ut::expect(::boost::ut::that<sp/>%<sp/>__VA_ARGS__)</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>SUITE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>::boost::ut::suite<sp/>_<sp/>=<sp/>[]</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>TEST(name)<sp/><sp/>::boost::ut::detail::test{&quot;test&quot;,<sp/>name}<sp/>=<sp/>[=]()<sp/>mutable</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">SUITE<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TEST(&quot;suite&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT(42<sp/>==<sp/>42);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TEST(&quot;macro&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT(1<sp/>!=<sp/>2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>TEST(&quot;vector&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>v(5);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>EXPECT(fatal(5u<sp/>==<sp/>std::size(v)))<sp/>&lt;&lt;<sp/>&quot;fatal&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TEST(&quot;resize<sp/>bigger&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.resize(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT(10u<sp/>==<sp/>std::size(v));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(4<sp/>asserts<sp/>in<sp/>3<sp/>tests)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://godbolt.org/z/WcEKTr</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What<sp/>about<sp/>Mocks/Stubs/Fakes?&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Consider<sp/>using<sp/>one<sp/>of<sp/>the<sp/>following<sp/>frameworks</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>https://github.com/cpp-testing/GUnit/blob/master/docs/GMock.md</highlight></codeline>
<codeline><highlight class="normal">*<sp/>https://github.com/eranpeer/FakeIt</highlight></codeline>
<codeline><highlight class="normal">*<sp/>https://github.com/dascandy/hippomocks</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What<sp/>about<sp/>Microbenchmarking?&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>[Example<sp/>benchmark](example/benchmark.cpp)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>Consider<sp/>using<sp/>one<sp/>of<sp/>the<sp/>following<sp/>frameworks</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>https://github.com/google/benchmark</highlight></codeline>
<codeline><highlight class="normal">*<sp/>https://github.com/DigitalInBlue/Celero</highlight></codeline>
<codeline><highlight class="normal">*<sp/>https://github.com/libnonius/nonius</highlight></codeline>
<codeline><highlight class="normal">*<sp/>https://github.com/martinus/nanobench</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Related<sp/>materials/talks?&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>[[Boost].UT<sp/>-<sp/>Unit<sp/>Testing<sp/>Framework<sp/>-<sp/>Kris<sp/>Jusiak](https://boost-ext.github.io/ut/denver-cpp-2019)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>[Future<sp/>of<sp/>Testing<sp/>with<sp/>C++20<sp/>-<sp/>Kris<sp/>Jusiak](https://boost-ext.github.io/ut/meeting-cpp-2020)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>[Macro-Free<sp/>Testing<sp/>with<sp/>C++20<sp/>-<sp/>Kris<sp/>Jusiak](https://www.youtube.com/watch?v=irdgFyxOs_Y)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>[&quot;If<sp/>you<sp/>liked<sp/>it<sp/>then<sp/>you<sp/>`&quot;should<sp/>have<sp/>put<sp/>a&quot;_test`<sp/>on<sp/>it&quot;,<sp/>Beyonce<sp/>rule<sp/>-<sp/>Kris<sp/>Jusiak](https://www.youtube.com/watch?v=yCI8MjvOMeE)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>[Principles<sp/>of<sp/>Unit<sp/>Testing<sp/>With<sp/>C++<sp/>-<sp/>Dave<sp/>Steffen<sp/>and<sp/>Kris<sp/>Jusiak](https://www.youtube.com/watch?v=oOcuJdJJ33g)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>[Empirical<sp/>Unit<sp/>Testing<sp/>-<sp/>Dave<sp/>Steffen](https://www.twitch.tv/videos/686512433)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;a<sp/>name=&quot;how-to-contribute&quot;&gt;&lt;/a&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;How<sp/>to<sp/>contribute?&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>[CONTRIBUTING](.github/CONTRIBUTING.md)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;a<sp/>name=&quot;benchmarks&quot;&gt;&lt;/a&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;details<sp/>open&gt;&lt;summary&gt;Benchmarks&lt;/summary&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;p&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Framework<sp/>|<sp/>Version<sp/>|<sp/>Standard<sp/>|<sp/>License<sp/>|<sp/>Linkage<sp/>|<sp/>Test<sp/>configuration<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|-|-|-|-|-|-|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>[Boost.Test](https://github.com/boostorg/test)<sp/>|<sp/>[1.71.0](https://www.boost.org/users/history/version_1_71_0.html)<sp/>|<sp/>C++03<sp/>|<sp/>Boost<sp/>1.0<sp/>|<sp/>single<sp/>header/library<sp/>|<sp/>`static<sp/>library`<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>[GoogleTest](https://github.com/google/googletest)<sp/>|<sp/>[1.10.0](https://github.com/google/googletest/releases/tag/release-1.10.0)<sp/>|<sp/>C++11<sp/>|<sp/>BSD-3<sp/>|<sp/>library<sp/>|<sp/>`static<sp/>library`<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>[Catch](https://github.com/catchorg/Catch2)<sp/>|<sp/>[2.10.2](https://github.com/catchorg/Catch2/releases/download/v2.10.2/catch.hpp)<sp/>|<sp/>C++11<sp/>|<sp/>Boost<sp/>1.0<sp/>|<sp/>single<sp/>header<sp/>|<sp/>`CATCH_CONFIG_FAST_COMPILE`<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>[Doctest](https://github.com/onqtam/doctest)<sp/>|<sp/>[2.3.5](https://github.com/onqtam/doctest/blob/master/doctest/doctest.h)<sp/>|<sp/>C++11<sp/>|<sp/>MIT<sp/>|<sp/>single<sp/>header<sp/>|<sp/>`DOCTEST_CONFIG_SUPER_FAST_ASSERTS`<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>[UT](https://github.com/boost-ext/ut)<sp/>|<sp/>[1.1.0](https://github.com/boost-ext/ut/blob/master/include/boost/ut.hpp)<sp/>|<sp/>C++20<sp/>|<sp/>Boost<sp/>1.0<sp/>|<sp/>single<sp/>header/module<sp/>|<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;table&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;tr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td<sp/>colspan=&quot;3&quot;<sp/>align=&quot;center&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;a<sp/>href=&quot;https://github.com/cpp-testing/ut-benchmark/tree/master/benchmarks&quot;&gt;&lt;b&gt;Include&lt;/b&gt;&lt;/a&gt;<sp/>/<sp/>&lt;i&gt;0<sp/>tests,<sp/>0<sp/>asserts,<sp/>1<sp/>cpp<sp/>file&lt;/i&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/tr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;tr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td<sp/>colspan=&quot;3&quot;<sp/>align=&quot;center&quot;&gt;&lt;a<sp/>href=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Compilation_include.png&quot;&gt;&lt;img<sp/>src=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Compilation_include.png&quot;&gt;&lt;/a&gt;&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td&gt;&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/tr&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;tr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td<sp/>colspan=&quot;3&quot;<sp/>align=&quot;center&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;a<sp/>href=&quot;https://github.com/cpp-testing/ut-benchmark/tree/master/benchmarks&quot;&gt;&lt;b&gt;Assert&lt;/b&gt;&lt;/a&gt;<sp/>/<sp/>&lt;i&gt;1<sp/>test,<sp/>1&apos;000&apos;000<sp/>asserts,<sp/>1<sp/>cpp<sp/>file&lt;/i&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/tr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;tr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td&gt;&lt;a<sp/>href=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Compilation_assert.png&quot;&gt;&lt;img<sp/>src=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Compilation_assert.png&quot;&gt;&lt;/a&gt;&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td&gt;&lt;a<sp/>href=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Execution_assert.png&quot;&gt;&lt;img<sp/>src=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Execution_assert.png&quot;&gt;&lt;/a&gt;&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td&gt;&lt;a<sp/>href=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/BinarySize_assert.png&quot;&gt;&lt;img<sp/>src=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/BinarySize_assert.png&quot;&gt;&lt;/a&gt;&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/tr&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;tr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td<sp/>colspan=&quot;3&quot;<sp/>align=&quot;center&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;a<sp/>href=&quot;https://github.com/cpp-testing/ut-benchmark/tree/master/benchmarks&quot;&gt;&lt;b&gt;Test&lt;/b&gt;&lt;/a&gt;<sp/>/<sp/>&lt;i&gt;1&apos;000<sp/>tests,<sp/>0<sp/>asserts,<sp/>1<sp/>cpp<sp/>file&lt;/i&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/tr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;tr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td&gt;&lt;a<sp/>href=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Compilation_test.png&quot;&gt;&lt;img<sp/>src=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Compilation_test.png&quot;&gt;&lt;/a&gt;&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td&gt;&lt;a<sp/>href=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Execution_test.png&quot;&gt;&lt;img<sp/>src=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Execution_test.png&quot;&gt;&lt;/a&gt;&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td&gt;&lt;a<sp/>href=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/BinarySize_test.png&quot;&gt;&lt;img<sp/>src=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/BinarySize_test.png&quot;&gt;&lt;/a&gt;&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/tr&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;tr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td<sp/>colspan=&quot;3&quot;<sp/>align=&quot;center&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;a<sp/>href=&quot;https://github.com/cpp-testing/ut-benchmark/tree/master/benchmarks&quot;&gt;&lt;b&gt;Suite&lt;/b&gt;&lt;/a&gt;<sp/>/<sp/>&lt;i&gt;10&apos;000<sp/>tests,<sp/>0<sp/>asserts,<sp/>100<sp/>cpp<sp/>files&lt;/i&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/tr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;tr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td&gt;&lt;a<sp/>href=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Compilation_suite.png&quot;&gt;&lt;img<sp/>src=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Compilation_suite.png&quot;&gt;&lt;/a&gt;&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td&gt;&lt;a<sp/>href=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Execution_suite.png&quot;&gt;&lt;img<sp/>src=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Execution_suite.png&quot;&gt;&lt;/a&gt;&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td&gt;&lt;a<sp/>href=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/BinarySize_suite.png&quot;&gt;&lt;img<sp/>src=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/BinarySize_suite.png&quot;&gt;&lt;/a&gt;&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/tr&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;tr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td<sp/>colspan=&quot;3&quot;<sp/>align=&quot;center&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;a<sp/>href=&quot;https://github.com/cpp-testing/ut-benchmark/tree/master/benchmarks&quot;&gt;&lt;b&gt;Suite+Assert&lt;/b&gt;&lt;/a&gt;<sp/>/<sp/>&lt;i&gt;10&apos;000<sp/>tests,<sp/>40&apos;000<sp/>asserts,<sp/>100<sp/>cpp<sp/>files&lt;/i&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/tr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;tr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td&gt;&lt;a<sp/>href=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Compilation_suite+assert.png&quot;&gt;&lt;img<sp/>src=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Compilation_suite+assert.png&quot;&gt;&lt;/a&gt;&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td&gt;&lt;a<sp/>href=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Execution_suite+assert.png&quot;&gt;&lt;img<sp/>src=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Execution_suite+assert.png&quot;&gt;&lt;/a&gt;&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td&gt;&lt;a<sp/>href=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/BinarySize_suite+assert.png&quot;&gt;&lt;img<sp/>src=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/BinarySize_suite+assert.png&quot;&gt;&lt;/a&gt;&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/tr&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;tr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td<sp/>colspan=&quot;3&quot;<sp/>align=&quot;center&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;a<sp/>href=&quot;https://github.com/cpp-testing/ut-benchmark/tree/master/benchmarks&quot;&gt;&lt;b&gt;Suite+Assert+STL&lt;/b&gt;&lt;/a&gt;<sp/>/<sp/>&lt;i&gt;10&apos;000<sp/>tests,<sp/>20&apos;000<sp/>asserts,<sp/>100<sp/>cpp<sp/>files&lt;/i&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/tr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;tr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td&gt;&lt;a<sp/>href=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Compilation_suite+assert+stl.png&quot;&gt;&lt;img<sp/>src=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Compilation_suite+assert+stl.png&quot;&gt;&lt;/a&gt;&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td&gt;&lt;a<sp/>href=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Execution_suite+assert+stl.png&quot;&gt;&lt;img<sp/>src=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Execution_suite+assert+stl.png&quot;&gt;&lt;/a&gt;&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td&gt;&lt;a<sp/>href=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/BinarySize_suite+assert+stl.png&quot;&gt;&lt;img<sp/>src=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/BinarySize_suite+assert+stl.png&quot;&gt;&lt;/a&gt;&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/tr&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;tr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td<sp/>colspan=&quot;3&quot;<sp/>align=&quot;center&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;a<sp/>href=&quot;https://github.com/cpp-testing/ut-benchmark/tree/master/benchmarks&quot;&gt;&lt;b&gt;Incremental<sp/>Build<sp/>-<sp/>Suite+Assert+STL&lt;/b&gt;&lt;/a&gt;<sp/>/<sp/>&lt;i&gt;1<sp/>cpp<sp/>file<sp/>change<sp/>(1&apos;000<sp/>tests,<sp/>20&apos;000<sp/>asserts,<sp/>100<sp/>cpp<sp/>files)&lt;/i&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/tr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;tr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td&gt;&lt;a<sp/>href=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Compilation_incremental.suite+assert+stl.png&quot;&gt;&lt;img<sp/>src=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Compilation_incremental.suite+assert+stl.png&quot;&gt;&lt;/a&gt;&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td&gt;&lt;a<sp/>href=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Execution_incremental.suite+assert+stl.png&quot;&gt;&lt;img<sp/>src=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Execution_incremental.suite+assert+stl.png&quot;&gt;&lt;/a&gt;&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td&gt;&lt;a<sp/>href=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/BinarySize_incremental.suite+assert+stl.png&quot;&gt;&lt;img<sp/>src=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/BinarySize_incremental.suite+assert+stl.png&quot;&gt;&lt;/a&gt;&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/tr&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;tr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td<sp/>colspan=&quot;3&quot;<sp/>align=&quot;center&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;a<sp/>href=&quot;https://github.com/cpp-testing/ut-benchmark/tree/master/benchmarks&quot;&gt;&lt;b&gt;Suite+Assert+STL&lt;/b&gt;&lt;/a&gt;<sp/>/<sp/>&lt;i&gt;10&apos;000<sp/>tests,<sp/>20&apos;000<sp/>asserts,<sp/>100<sp/>cpp<sp/>files&lt;br/&gt;(Headers<sp/>vs<sp/>Precompiled<sp/>headers<sp/>vs<sp/>C++20<sp/>Modules)&lt;/i&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/tr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;tr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td&gt;&lt;a<sp/>href=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/ut_Compilation_suite+assert+stl.png&quot;&gt;&lt;img<sp/>src=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/ut_Compilation_suite+assert+stl.png&quot;&gt;&lt;/a&gt;&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td&gt;&lt;a<sp/>href=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/ut_Execution_suite+assert+stl.png&quot;&gt;&lt;img<sp/>src=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/ut_Execution_suite+assert+stl.png&quot;&gt;&lt;/a&gt;&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;td&gt;&lt;a<sp/>href=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/ut_BinarySize_suite+assert+stl.png&quot;&gt;&lt;img<sp/>src=&quot;https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/ut_BinarySize_suite+assert+stl.png&quot;&gt;&lt;/a&gt;&lt;/td&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/tr&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/table&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>https://github.com/cpp-testing/ut-benchmark</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/p&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/details&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Disclaimer**<sp/>`UT`<sp/>is<sp/>not<sp/>an<sp/>official<sp/>Boost<sp/>library.</highlight></codeline>
    </programlisting>
    <location file="/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/README.md"/>
  </compounddef>
</doxygen>
