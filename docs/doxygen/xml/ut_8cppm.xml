<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="ut_8cppm" kind="file" language="C++">
    <compoundname>ut.cppm</compoundname>
    <includes refid="ut_8hpp" local="yes">ut.hpp</includes>
    <includes local="no">std</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/include/boost/ut.cppm</label>
        <link refid="ut_8cppm"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ut.hpp</label>
        <link refid="ut_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>std</label>
      </node>
      <node id="3">
        <label>version</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="ut_8cppm_1ae7b677da81cb2b40fb3fb71298bf30d0" prot="public" static="no">
        <name>BOOST_UT_CXX_MODULES</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/include/boost/ut.cppm" line="11" column="9" bodyfile="/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/include/boost/ut.cppm" bodystart="11" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ut_8cppm_1afba6461f12244b5625ef9c9f544e43df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void boost::ut::reporter_junit</type>
        <definition>template void boost::ut::reporter_junit ::on&lt; boost::ut::detail::fatal_&lt; bool &gt; &gt;</definition>
        <argsstring>(events::assertion_fail&lt; boost::ut::detail::fatal_&lt; bool &gt; &gt;)</argsstring>
        <name>::on&lt; boost::ut::detail::fatal_&lt; bool &gt; &gt;</name>
        <qualifiedname>on&lt; boost::ut::detail::fatal_&lt; bool &gt; &gt;</qualifiedname>
        <param>
          <type>events::assertion_fail&lt; boost::ut::detail::fatal_&lt; bool &gt; &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/include/boost/ut.cppm" line="20" column="10" declfile="/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/include/boost/ut.cppm" declline="20" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="ut_8cppm_1a19d6f9445968eee95336d47001bc1c61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void boost::ut::reporter_junit</type>
        <definition>template void boost::ut::reporter_junit ::on&lt; boost::ut::detail::fatal_&lt; bool &gt; &gt;</definition>
        <argsstring>(events::assertion_pass&lt; boost::ut::detail::fatal_&lt; bool &gt; &gt;)</argsstring>
        <name>::on&lt; boost::ut::detail::fatal_&lt; bool &gt; &gt;</name>
        <qualifiedname>on&lt; boost::ut::detail::fatal_&lt; bool &gt; &gt;</qualifiedname>
        <param>
          <type>events::assertion_pass&lt; boost::ut::detail::fatal_&lt; bool &gt; &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/include/boost/ut.cppm" line="21" column="10" declfile="/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/include/boost/ut.cppm" declline="21" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="ut_8cppm_1a1e76d6a1720ff1bd484c2320f94d9f39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template void boost::ut::reporter_junit</type>
        <definition>template void boost::ut::reporter_junit ::on&lt; boost::ut::detail::fatal_&lt; bool &gt; &gt;</definition>
        <argsstring>(events::log&lt; boost::ut::detail::fatal_&lt; bool &gt; &gt;)</argsstring>
        <name>::on&lt; boost::ut::detail::fatal_&lt; bool &gt; &gt;</name>
        <qualifiedname>on&lt; boost::ut::detail::fatal_&lt; bool &gt; &gt;</qualifiedname>
        <param>
          <type>events::log&lt; boost::ut::detail::fatal_&lt; bool &gt; &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/include/boost/ut.cppm" line="22" column="10" declfile="/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/include/boost/ut.cppm" declline="22" declcolumn="10"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">module</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__has_include(&lt;unistd.h&gt;)<sp/>and<sp/>__has_include(&lt;sys/wait.h&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/wait.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">export</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">module</highlight><highlight class="normal"><sp/><ref refid="module_boost_8ut" kindref="compound">boost.ut</ref>;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">export</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>std;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOST_UT_CXX_MODULES<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ut_8hpp" kindref="compound">ut.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">boost::ut::reporter_junit&lt;boost::ut::printer&gt;;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>boost::ut::reporter_junit&lt;boost::ut::printer&gt;::on&lt;bool&gt;(boost::ut::events::log&lt;bool&gt;);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>boost::ut::reporter_junit&lt;boost::ut::printer&gt;::on&lt;bool&gt;(boost::ut::events::assertion_pass&lt;bool&gt;);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>boost::ut::reporter_junit&lt;boost::ut::printer&gt;::on&lt;bool&gt;(boost::ut::events::assertion_fail&lt;bool&gt;);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>boost::ut::detail::test::operator=&lt;&gt;(test_location&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*)()&gt;<sp/>_test);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>boost::ut::expect&lt;bool&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;expr,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>reflection::source_location&amp;);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>boost::ut::reporter_junit&lt;&gt;::on&lt;boost::ut::detail::fatal_&lt;bool&gt;&gt;(events::assertion_fail&lt;boost::ut::detail::fatal_&lt;bool&gt;&gt;);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>boost::ut::reporter_junit&lt;&gt;::on&lt;boost::ut::detail::fatal_&lt;bool&gt;&gt;(events::assertion_pass&lt;boost::ut::detail::fatal_&lt;bool&gt;&gt;);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>boost::ut::reporter_junit&lt;&gt;::on&lt;boost::ut::detail::fatal_&lt;bool&gt;&gt;(events::log&lt;boost::ut::detail::fatal_&lt;bool&gt;&gt;);</highlight></codeline>
    </programlisting>
    <location file="/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/include/boost/ut.cppm"/>
  </compounddef>
</doxygen>
