<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="ut_8hpp" kind="file" language="C++">
    <compoundname>ut.hpp</compoundname>
    <includes local="no">version</includes>
    <includedby refid="benchmark_2expect_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/benchmark/expect.cpp</includedby>
    <includedby refid="include_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/benchmark/include.cpp</includedby>
    <includedby refid="benchmark_2suite_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/benchmark/suite.cpp</includedby>
    <includedby refid="benchmark_2test_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/benchmark/test.cpp</includedby>
    <includedby refid="BDD_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/BDD.cpp</includedby>
    <includedby refid="abort_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/abort.cpp</includedby>
    <includedby refid="attr_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/attr.cpp</includedby>
    <includedby refid="benchmark_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/benchmark.cpp</includedby>
    <includedby refid="parallel__runner_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/cfg/parallel_runner.cpp</includedby>
    <includedby refid="printer_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/cfg/printer.cpp</includedby>
    <includedby refid="reporter_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/cfg/reporter.cpp</includedby>
    <includedby refid="runner_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/cfg/runner.cpp</includedby>
    <includedby refid="cli_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/cli.cpp</includedby>
    <includedby refid="exception_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/exception.cpp</includedby>
    <includedby refid="example_2expect_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/expect.cpp</includedby>
    <includedby refid="fatal_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/fatal.cpp</includedby>
    <includedby refid="filter_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/filter.cpp</includedby>
    <includedby refid="gherkin_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/gherkin.cpp</includedby>
    <includedby refid="hello__world_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/hello_world.cpp</includedby>
    <includedby refid="log_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/log.cpp</includedby>
    <includedby refid="macro_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/macro.cpp</includedby>
    <includedby refid="deps_2ut_2example_2main_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/main.cpp</includedby>
    <includedby refid="matcher_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/matcher.cpp</includedby>
    <includedby refid="minimal_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/minimal.cpp</includedby>
    <includedby refid="mut_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/mut.cpp</includedby>
    <includedby refid="parameterized_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/parameterized.cpp</includedby>
    <includedby refid="run_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/run.cpp</includedby>
    <includedby refid="run__report_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/run_report.cpp</includedby>
    <includedby refid="section_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/section.cpp</includedby>
    <includedby refid="should_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/should.cpp</includedby>
    <includedby refid="skip_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/skip.cpp</includedby>
    <includedby refid="sl_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/sl.cpp</includedby>
    <includedby refid="spec_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/spec.cpp</includedby>
    <includedby refid="example_2suite_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/suite.cpp</includedby>
    <includedby refid="tag_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/tag.cpp</includedby>
    <includedby refid="terse_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/terse.cpp</includedby>
    <includedby refid="example_2test_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/test.cpp</includedby>
    <includedby refid="tmp_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/tmp.cpp</includedby>
    <includedby refid="using_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/using.cpp</includedby>
    <includedby refid="ut_8cppm" local="yes">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/include/boost/ut.cppm</includedby>
    <includedby refid="test_8hpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/test/ft/include/test.hpp</includedby>
    <includedby refid="deps_2ut_2test_2ft_2main_8cpp" local="no">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/test/ft/main.cpp</includedby>
    <includedby refid="ut_8cpp" local="yes">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/test/ut/ut.cpp</includedby>
    <includedby refid="win__compat__test_8cpp" local="yes">/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/test/ut/win_compat_test.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/include/boost/ut.hpp</label>
        <link refid="ut_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>version</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/benchmark/expect.cpp</label>
        <link refid="benchmark_2expect_8cpp"/>
      </node>
      <node id="3">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/benchmark/include.cpp</label>
        <link refid="include_8cpp"/>
      </node>
      <node id="4">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/benchmark/suite.cpp</label>
        <link refid="benchmark_2suite_8cpp"/>
      </node>
      <node id="5">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/benchmark/test.cpp</label>
        <link refid="benchmark_2test_8cpp"/>
      </node>
      <node id="6">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/BDD.cpp</label>
        <link refid="BDD_8cpp"/>
      </node>
      <node id="7">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/abort.cpp</label>
        <link refid="abort_8cpp"/>
      </node>
      <node id="8">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/attr.cpp</label>
        <link refid="attr_8cpp"/>
      </node>
      <node id="9">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/benchmark.cpp</label>
        <link refid="benchmark_8cpp"/>
      </node>
      <node id="10">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/cfg/parallel_runner.cpp</label>
        <link refid="parallel__runner_8cpp"/>
      </node>
      <node id="11">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/cfg/printer.cpp</label>
        <link refid="printer_8cpp"/>
      </node>
      <node id="12">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/cfg/reporter.cpp</label>
        <link refid="reporter_8cpp"/>
      </node>
      <node id="13">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/cfg/runner.cpp</label>
        <link refid="runner_8cpp"/>
      </node>
      <node id="14">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/cli.cpp</label>
        <link refid="cli_8cpp"/>
      </node>
      <node id="15">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/exception.cpp</label>
        <link refid="exception_8cpp"/>
      </node>
      <node id="16">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/expect.cpp</label>
        <link refid="example_2expect_8cpp"/>
      </node>
      <node id="17">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/fatal.cpp</label>
        <link refid="fatal_8cpp"/>
      </node>
      <node id="18">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/filter.cpp</label>
        <link refid="filter_8cpp"/>
      </node>
      <node id="19">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/gherkin.cpp</label>
        <link refid="gherkin_8cpp"/>
      </node>
      <node id="20">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/hello_world.cpp</label>
        <link refid="hello__world_8cpp"/>
      </node>
      <node id="21">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/log.cpp</label>
        <link refid="log_8cpp"/>
      </node>
      <node id="22">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/macro.cpp</label>
        <link refid="macro_8cpp"/>
      </node>
      <node id="23">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/main.cpp</label>
        <link refid="deps_2ut_2example_2main_8cpp"/>
      </node>
      <node id="24">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/matcher.cpp</label>
        <link refid="matcher_8cpp"/>
      </node>
      <node id="25">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/minimal.cpp</label>
        <link refid="minimal_8cpp"/>
      </node>
      <node id="26">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/mut.cpp</label>
        <link refid="mut_8cpp"/>
      </node>
      <node id="27">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/parameterized.cpp</label>
        <link refid="parameterized_8cpp"/>
      </node>
      <node id="28">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/run.cpp</label>
        <link refid="run_8cpp"/>
      </node>
      <node id="29">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/run_report.cpp</label>
        <link refid="run__report_8cpp"/>
      </node>
      <node id="30">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/section.cpp</label>
        <link refid="section_8cpp"/>
      </node>
      <node id="31">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/should.cpp</label>
        <link refid="should_8cpp"/>
      </node>
      <node id="32">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/skip.cpp</label>
        <link refid="skip_8cpp"/>
      </node>
      <node id="33">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/sl.cpp</label>
        <link refid="sl_8cpp"/>
      </node>
      <node id="34">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/spec.cpp</label>
        <link refid="spec_8cpp"/>
      </node>
      <node id="35">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/suite.cpp</label>
        <link refid="example_2suite_8cpp"/>
      </node>
      <node id="36">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/tag.cpp</label>
        <link refid="tag_8cpp"/>
      </node>
      <node id="37">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/terse.cpp</label>
        <link refid="terse_8cpp"/>
      </node>
      <node id="38">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/test.cpp</label>
        <link refid="example_2test_8cpp"/>
      </node>
      <node id="39">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/tmp.cpp</label>
        <link refid="tmp_8cpp"/>
      </node>
      <node id="40">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/using.cpp</label>
        <link refid="using_8cpp"/>
      </node>
      <node id="41">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/include/boost/ut.cppm</label>
        <link refid="ut_8cppm"/>
      </node>
      <node id="1">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/include/boost/ut.hpp</label>
        <link refid="ut_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/test/ft/include/test.hpp</label>
        <link refid="test_8hpp"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/test/ft/main.cpp</label>
        <link refid="deps_2ut_2test_2ft_2main_8cpp"/>
      </node>
      <node id="43">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/test/ft/test_suite_1.cpp</label>
        <link refid="test__suite__1_8cpp"/>
      </node>
      <node id="44">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/test/ft/test_suite_2.cpp</label>
        <link refid="test__suite__2_8cpp"/>
      </node>
      <node id="45">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/test/ft/test_suite_3.cpp</label>
        <link refid="test__suite__3_8cpp"/>
      </node>
      <node id="47">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/test/ut/ut.cpp</label>
        <link refid="ut_8cpp"/>
      </node>
      <node id="48">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/test/ut/win_compat_test.cpp</label>
        <link refid="win__compat__test_8cpp"/>
      </node>
    </invincdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="ut_8hpp_1af8cb2d4b02a7463d1fd1fc361c3ba163" prot="public" static="no">
        <name>BOOST_UT_EXPORT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/include/boost/ut.hpp" line="12" column="11" bodyfile="/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/include/boost/ut.hpp" bodystart="12" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2019-2021<sp/>Kris<sp/>Jusiak<sp/>(kris<sp/>at<sp/>jusiak<sp/>dot<sp/>net)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(See<sp/>accompanying<sp/>file<sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BOOST_UT_CXX_MODULES)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOST_UT_EXPORT<sp/>export</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="ut_8hpp_1af8cb2d4b02a7463d1fd1fc361c3ba163" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOST_UT_EXPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(BOOST_UT_CXX_MODULES)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;version&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>push_macro(&quot;min&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>push_macro(&quot;max&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Before<sp/>libc++<sp/>17<sp/>had<sp/>experimental<sp/>support<sp/>for<sp/>format<sp/>and<sp/>it<sp/>required<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>special<sp/>build<sp/>flag.<sp/>Currently<sp/>libc++<sp/>has<sp/>not<sp/>implemented<sp/>all<sp/>C++20<sp/>chrono</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>improvements.<sp/>Therefore<sp/>doesn&apos;t<sp/>define<sp/>__cpp_lib_format,<sp/>instead<sp/>query<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>library<sp/>version<sp/>to<sp/>detect<sp/>the<sp/>support<sp/>status.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC<sp/>STL<sp/>and<sp/>libstdc++<sp/>provide<sp/>__cpp_lib_format.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cpp_lib_format)<sp/>or<sp/>\</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(defined(_LIBCPP_VERSION)<sp/>and<sp/>_LIBCPP_VERSION<sp/>&gt;=<sp/>170000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOST_UT_HAS_FORMAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>not<sp/>defined(__cpp_rvalue_references)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;[Boost::ext].UT<sp/>requires<sp/>support<sp/>for<sp/>rvalue<sp/>references&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>not<sp/>defined(__cpp_decltype)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;[Boost::ext].UT<sp/>requires<sp/>support<sp/>for<sp/>decltype&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>not<sp/>defined(__cpp_return_type_deduction)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;[Boost::ext].UT<sp/>requires<sp/>support<sp/>for<sp/>return<sp/>type<sp/>deduction&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>not<sp/>defined(__cpp_deduction_guides)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;[Boost::ext].UT<sp/>requires<sp/>support<sp/>for<sp/>return<sp/>deduction<sp/>guides&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>not<sp/>defined(__cpp_generic_lambdas)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;[Boost::ext].UT<sp/>requires<sp/>support<sp/>for<sp/>generic<sp/>lambdas&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>not<sp/>defined(__cpp_constexpr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;[Boost::ext].UT<sp/>requires<sp/>support<sp/>for<sp/>constexpr&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>not<sp/>defined(__cpp_alias_templates)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;[Boost::ext].UT<sp/>requires<sp/>support<sp/>for<sp/>alias<sp/>templates&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>not<sp/>defined(__cpp_variadic_templates)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;[Boost::ext].UT<sp/>requires<sp/>support<sp/>for<sp/>variadic<sp/>templates&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>not<sp/>defined(__cpp_fold_expressions)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;[Boost::ext].UT<sp/>requires<sp/>support<sp/>for<sp/>return<sp/>fold<sp/>expressions&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>not<sp/>defined(__cpp_static_assert)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;[Boost::ext].UT<sp/>requires<sp/>support<sp/>for<sp/>static<sp/>assert&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOOST_UT_VERSION<sp/>2&apos;3&apos;1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__has_builtin)<sp/>and<sp/>defined(__GNUC__)<sp/>and<sp/>(__GNUC__<sp/>&lt;<sp/>10)<sp/>and<sp/>\</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>not<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>__has_builtin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>not<sp/>defined(__has_builtin)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)<sp/>and<sp/>(__GNUC__<sp/>&gt;=<sp/>9)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__has___builtin_FILE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__has___builtin_LINE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__has_builtin(...)<sp/>__has_##__VA_ARGS__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(BOOST_UT_CXX_MODULES)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;concepts&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;optional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stack&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string_view&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;variant&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__has_include(&lt;unistd.h&gt;)<sp/>and<sp/>__has_include(&lt;sys/wait.h&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/wait.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cpp_exceptions)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;exception&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__has_include(&lt;format&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;format&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__has_include(&lt;source_location&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;source_location&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>cxx<sp/>modules</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">unique_name_for_auto_detect_prefix_and_suffix_length_0123456789_struct_<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal">};</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><ref refid="ut_8hpp_1af8cb2d4b02a7463d1fd1fc361c3ba163" kindref="member">BOOST_UT_EXPORT</ref></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">boost::inline<sp/><ref refid="namespaceext" kindref="compound">ext</ref>::ut::inline<sp/>v2_3_1<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">utility<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">function;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">R,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>TArgs&gt;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">function&lt;R(TArgs...)&gt;<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>function()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*explicit(false)*/</highlight><highlight class="normal"><sp/>function(T<sp/>data)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>invoke_{invoke_impl&lt;T&gt;},</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destroy_{destroy_impl&lt;T&gt;},</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_{new<sp/>T{static_cast&lt;T&amp;&amp;&gt;(data)}}<sp/>{}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>function(function&amp;&amp;<sp/>other)<sp/>noexcept</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>invoke_{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">decltype(other.invoke_)&amp;&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(other.invoke_)},</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destroy_{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">decltype(other.destroy_)&amp;&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(other.destroy_)},</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">decltype(other.data_)&amp;&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(other.data_)}<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>other.data_<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>function(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>function&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>~function()<sp/>{<sp/>destroy_(data_);<sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>function&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>function&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>function&amp;<sp/>operator=(function&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()(TArgs...<sp/>args)<sp/>-&gt;<sp/>R<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>invoke_(data_,<sp/>args...);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()(TArgs...<sp/>args)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>R<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>invoke_(data_,<sp/>args...);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>invoke_impl(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/>TArgs...<sp/>args)<sp/>-&gt;<sp/>R<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data))(args...);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>destroy_impl(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>R<sp/>(*invoke_)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/>TArgs...){};</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>void<sp/>(*destroy_)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*){};</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data_{};</highlight></codeline>
<codeline lineno="157"><highlight class="normal">};</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>is_match(std::string_view<sp/>input,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string_view<sp/>pattern)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::empty(pattern))<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::empty(input);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::empty(input))<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pattern[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal"><sp/>?<sp/>is_match(input,<sp/>pattern.substr(1))<sp/>:<sp/>false;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pattern[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal"><sp/>and<sp/>pattern[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal"><sp/>and<sp/>pattern[0]<sp/>!=<sp/>input[0])<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pattern[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::size(input))<sp/>i<sp/>=<sp/>0u;<sp/>i<sp/>&lt;=<sp/>std::size(input);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_match(input.substr(i),<sp/>pattern.substr(1)))<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_match(input.substr(1),<sp/>pattern.substr(1));</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TPattern,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TStr&gt;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>match(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TPattern&amp;<sp/>pattern,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TStr&amp;<sp/>str)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/>std::vector&lt;TStr&gt;<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>std::vector&lt;TStr&gt;<sp/>groups{};</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pi<sp/>=<sp/>0u;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>si<sp/>=<sp/>0u;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classmatcher" kindref="compound">matcher</ref><sp/>=<sp/>[&amp;](</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>e,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>match<sp/>=<sp/>si;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(str[si]<sp/>and<sp/>str[si]<sp/>!=<sp/>b<sp/>and<sp/>str[si]<sp/>!=<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++si;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>groups.emplace_back(str.substr(match,<sp/>si<sp/>-<sp/>match));</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pattern[pi]<sp/>and<sp/>pattern[pi]<sp/>!=<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++pi;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>pi++;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pi<sp/>&lt;<sp/>std::size(pattern)<sp/>&amp;&amp;<sp/>si<sp/>&lt;<sp/>std::size(str))<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pattern[pi]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal"><sp/>and<sp/>str[si]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal"><sp/>and<sp/>pattern[pi<sp/>+<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++si;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmatcher" kindref="compound">matcher</ref>(</highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pattern[pi]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmatcher" kindref="compound">matcher</ref>(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pattern[pi]<sp/>!=<sp/>str[si])<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>++pi;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>++si;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(si<sp/>&lt;<sp/>str.size()<sp/>or<sp/>pi<sp/>&lt;<sp/>std::size(pattern))<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>groups;</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">_view,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TDelim&gt;</highlight></codeline>
<codeline lineno="225"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>split(T<sp/>input,<sp/>TDelim<sp/>delim)<sp/>-&gt;<sp/>std::vector&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>std::vector&lt;T&gt;<sp/>output{};</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>std::size_t<sp/>first{};</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(first<sp/>&lt;<sp/>std::size(input))<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>second<sp/>=<sp/>input.find_first_of(delim,<sp/>first);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first<sp/>!=<sp/>second)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output.emplace_back(input.substr(first,<sp/>second<sp/>-<sp/>first));</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(second<sp/>==<sp/>T::npos)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>first<sp/>=<sp/>second<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>regex_match(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pattern)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pattern<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*str<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pattern<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*str<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*str<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*pattern<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pattern<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>regex_match(str<sp/>+<sp/>1,<sp/>pattern<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*pattern<sp/>==<sp/>*str)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>regex_match(str<sp/>+<sp/>1,<sp/>pattern<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>utility</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">reflection<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cpp_lib_source_location)<sp/>&amp;&amp;<sp/>!defined(_LIBCPP_APPLE_CLANG_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">source_location<sp/>=<sp/>std::source_location;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">source_location<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>current(</highlight></codeline>
<codeline lineno="267"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__has_builtin(__builtin_FILE)<sp/>and<sp/>__has_builtin(__builtin_LINE))</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file<sp/>=<sp/>__builtin_FILE(),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line<sp/>=<sp/>__builtin_LINE()</highlight></codeline>
<codeline lineno="269"><highlight class="normal">#</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;unknown&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>source_location<sp/>sl{};</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>sl.file_<sp/>=<sp/>file;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>sl.line_<sp/>=<sp/>line;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sl;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>file_name()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file_;<sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>line()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>line_;<sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file_{</highlight><highlight class="stringliteral">&quot;unknown&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line_{};</highlight></codeline>
<codeline lineno="284"><highlight class="normal">};</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TargetType&gt;</highlight></codeline>
<codeline lineno="288"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get_template_function_name_use_type()</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/>std::string_view<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>over<sp/>compiler<sp/>need<sp/>over<sp/>macros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>!defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{&amp;__FUNCSIG__[0],<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__FUNCSIG__)};</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{&amp;__PRETTY_FUNCTION__[0],<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__PRETTY_FUNCTION__)};</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment">//<sp/>decay<sp/>allows<sp/>you<sp/>to<sp/>highlight<sp/>a<sp/>cleaner<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TargetType&gt;</highlight></codeline>
<codeline lineno="300"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get_template_function_name_use_decay_type()</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/>std::string_view<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_template_function_name_use_type&lt;std::decay_t&lt;TargetType&gt;&gt;();</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string_view<sp/>raw_type_name<sp/>=</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>get_template_function_name_use_decay_type&lt;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unique_name_for_auto_detect_prefix_and_suffix_length_0123456789_struct_&gt;();</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>raw_length<sp/>=<sp/>raw_type_name.length();</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string_view<sp/>need_name<sp/>=</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>and<sp/>not<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;struct<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;unique_name_for_auto_detect_prefix_and_suffix_length_0123456789_struct_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;unique_name_for_auto_detect_prefix_and_suffix_length_0123456789_struct_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>need_length<sp/>=<sp/>need_name.length();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(need_length<sp/>&lt;=<sp/>raw_length,</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Auto<sp/>find<sp/>prefix<sp/>and<sp/>suffix<sp/>length<sp/>broken<sp/>error<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>prefix_length<sp/>=</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>raw_type_name.find(need_name);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(prefix_length<sp/>!=<sp/>std::string_view::npos,</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Auto<sp/>find<sp/>prefix<sp/>and<sp/>suffix<sp/>length<sp/>broken<sp/>error<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(prefix_length<sp/>&lt;=<sp/>raw_length,</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Auto<sp/>find<sp/>prefix<sp/>and<sp/>suffix<sp/>length<sp/>broken<sp/>error<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>tail_length<sp/>=<sp/>raw_length<sp/>-<sp/>prefix_length;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(need_length<sp/>&lt;=<sp/>tail_length,</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Auto<sp/>find<sp/>prefix<sp/>and<sp/>suffix<sp/>length<sp/>broken<sp/>error<sp/>4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>suffix_length<sp/>=<sp/>tail_length<sp/>-<sp/>need_length;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TargetType&gt;</highlight></codeline>
<codeline lineno="334"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type_name()<sp/>-&gt;<sp/>std::string_view<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string_view<sp/>raw_type_name<sp/>=</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>detail::get_template_function_name_use_type&lt;TargetType&gt;();</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>end<sp/>=<sp/>raw_type_name.length()<sp/>-<sp/>detail::suffix_length;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>len<sp/>=<sp/>end<sp/>-<sp/>detail::prefix_length;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>std::string_view<sp/>result<sp/>=<sp/>raw_type_name.substr(detail::prefix_length,<sp/>len);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="comment">//<sp/>decay<sp/>allows<sp/>you<sp/>to<sp/>highlight<sp/>a<sp/>cleaner<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TargetType&gt;</highlight></codeline>
<codeline lineno="345"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>decay_type_name()<sp/>-&gt;<sp/>std::string_view<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string_view<sp/>raw_type_name<sp/>=</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>detail::get_template_function_name_use_decay_type&lt;TargetType&gt;();</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>end<sp/>=<sp/>raw_type_name.length()<sp/>-<sp/>detail::suffix_length;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>len<sp/>=<sp/>end<sp/>-<sp/>detail::prefix_length;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>std::string_view<sp/>result<sp/>=<sp/>raw_type_name.substr(detail::prefix_length,<sp/>len);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>reflection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">math<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="357"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>abs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>t)<sp/>-&gt;<sp/>T<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t<sp/>&lt;<sp/>T{}<sp/>?<sp/>-t<sp/>:<sp/>t;</highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="362"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>abs_diff(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U<sp/>u)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(t<sp/>&lt;<sp/>u<sp/>?<sp/>u<sp/>-<sp/>t<sp/>:<sp/>t<sp/>-<sp/>u)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t<sp/>&lt;<sp/>u<sp/>?<sp/>u<sp/>-<sp/>t<sp/>:<sp/>t<sp/>-<sp/>u;</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="368"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>min_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>rhs)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(rhs<sp/>&lt;<sp/>lhs)<sp/>?<sp/>rhs<sp/>:<sp/>lhs;</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TExp&gt;</highlight></codeline>
<codeline lineno="373"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pow(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TExp<sp/>exp)<sp/>-&gt;<sp/>T<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exp<sp/>?<sp/>T(base<sp/>*<sp/>pow(base,<sp/>exp<sp/>-<sp/>TExp(1)))<sp/>:<sp/>T(1);</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">...<sp/>Cs&gt;</highlight></codeline>
<codeline lineno="378"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>num()<sp/>-&gt;<sp/>T<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>((Cs<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal"><sp/>or<sp/>Cs<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal"><sp/>or<sp/>(Cs<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>and<sp/>Cs<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">))<sp/>and<sp/>...));</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>T<sp/>result{};</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>:<sp/>std::array{Cs...})<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>and<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>result<sp/>*<sp/>T(10)<sp/>+<sp/>T(c<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">...<sp/>Cs&gt;</highlight></codeline>
<codeline lineno="394"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>den()<sp/>-&gt;<sp/>T<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array<sp/>cs{Cs...};</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>T<sp/>result{};</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0u;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(cs[i++]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i;<sp/>j<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Cs);<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>pow(T(10),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Cs)<sp/>-<sp/>j)<sp/>*<sp/>T(cs[j]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">...<sp/>Cs&gt;</highlight></codeline>
<codeline lineno="408"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>den_size()<sp/>-&gt;<sp/>T<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array<sp/>cs{Cs...};</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>T<sp/>i{};</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(cs[i++]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>T(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Cs))<sp/>-<sp/>i<sp/>+<sp/>T(1);</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TValue&gt;</highlight></codeline>
<codeline lineno="418"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>den_size(TValue<sp/>value)<sp/>-&gt;<sp/>T<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>precision<sp/>=<sp/>TValue(1e-7);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>T<sp/>result{};</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>TValue<sp/>tmp{};</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>*=<sp/>10;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>value<sp/>-<sp/>T(value);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>++result;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(tmp<sp/>&gt;<sp/>precision);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>math</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">type_traits<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...&gt;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlist" kindref="compound">list</ref><sp/>{};</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...&gt;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">identity<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">type<sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="440"><highlight class="normal">};</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">function_traits<sp/>:<sp/>function_traits&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(&amp;T::operator())&gt;<sp/>{};</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">R,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>TArgs&gt;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">function_traits&lt;R<sp/>(*)(TArgs...)&gt;<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">result_type<sp/>=<sp/>R;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">args<sp/>=<sp/><ref refid="structlist" kindref="compound">list</ref>&lt;TArgs...&gt;;</highlight></codeline>
<codeline lineno="449"><highlight class="normal">};</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">R,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>TArgs&gt;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">function_traits&lt;R(TArgs...)&gt;<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">result_type<sp/>=<sp/>R;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">args<sp/>=<sp/><ref refid="structlist" kindref="compound">list</ref>&lt;TArgs...&gt;;</highlight></codeline>
<codeline lineno="455"><highlight class="normal">};</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">R,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>TArgs&gt;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">function_traits&lt;R<sp/>(T::*)(TArgs...)&gt;<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">result_type<sp/>=<sp/>R;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">args<sp/>=<sp/><ref refid="structlist" kindref="compound">list</ref>&lt;TArgs...&gt;;</highlight></codeline>
<codeline lineno="461"><highlight class="normal">};</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">R,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>TArgs&gt;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">function_traits&lt;R<sp/>(T::*)(TArgs...)<sp/>const&gt;<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">result_type<sp/>=<sp/>R;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">args<sp/>=<sp/><ref refid="structlist" kindref="compound">list</ref>&lt;TArgs...&gt;;</highlight></codeline>
<codeline lineno="467"><highlight class="normal">};</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_static_member_object_value<sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_static_member_object_value&lt;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>T,<sp/>std::void_t&lt;decltype(std::declval&lt;T&gt;().value)&gt;&gt;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::bool_constant&lt;!std::is_member_pointer_v&lt;decltype(&amp;T::value)&gt;<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_function_v&lt;decltype(T::value)&gt;&gt;<sp/>{};</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_static_member_object_value_v<sp/>=</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>has_static_member_object_value&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_static_member_object_epsilon<sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">has_static_member_object_epsilon&lt;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>T,<sp/>std::void_t&lt;decltype(std::declval&lt;T&gt;().epsilon)&gt;&gt;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::bool_constant&lt;!std::is_member_pointer_v&lt;decltype(&amp;T::epsilon)&gt;<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_function_v&lt;decltype(T::epsilon)&gt;&gt;<sp/>{};</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_static_member_object_epsilon_v<sp/>=</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>has_static_member_object_epsilon&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>type_traits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">concepts<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::convertible_to<sp/>also<sp/>requires<sp/>implicit<sp/>conversion<sp/>to<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>https://stackoverflow.com/a/76547623</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>From,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>To&gt;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal">explicitly_convertible_to<sp/>=</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">To</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::declval&lt;From&gt;());<sp/>};</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal">ostreamable<sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(std::ostringstream&amp;<sp/>os,<sp/>T<sp/>t)<sp/>{<sp/>os<sp/>&lt;&lt;<sp/>t;<sp/>};</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>concepts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharT,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>SIZE&gt;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">fixed_string<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::size_t<sp/>N<sp/>=<sp/>SIZE;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>CharT<sp/>_data[N<sp/>+<sp/>1]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal">(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>fixed_string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharT<sp/>(&amp;str)[N<sp/>+<sp/>1])<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(N<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_data[i]<sp/>=<sp/>str[i];</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>std::size_t<sp/>size()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>N;<sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>empty()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>N<sp/>==<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::string_view()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{_data,<sp/>N};</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::string()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{_data,<sp/>N};</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data;<sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecolor_1a8588d7afe41d3f541b62b2b4b78ff0c7" kindref="member">operator==</ref>(</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>fixed_string&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string_view{_data,<sp/>N}<sp/>==<sp/>std::string_view(other);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N2&gt;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacecolor_1a8588d7afe41d3f541b62b2b4b78ff0c7" kindref="member">operator==</ref>(</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>fixed_string&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>fixed_string&lt;CharT,<sp/>N2&gt;&amp;)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal">};</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharT,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="545"><highlight class="normal">fixed_string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharT<sp/>(&amp;str)[N])<sp/>-&gt;<sp/>fixed_string&lt;CharT,<sp/>N<sp/>-<sp/>1&gt;;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">none<sp/>{};</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">events<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">run_begin<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc{};</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv{};</highlight></codeline>
<codeline lineno="553"><highlight class="normal">};</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">test_begin<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>std::string_view<sp/>type{};</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>std::string_view<sp/>name{};</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>reflection::source_location<sp/>location{};</highlight></codeline>
<codeline lineno="558"><highlight class="normal">};</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">suite_begin<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>std::string_view<sp/>type{};</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>std::string_view<sp/>name{};</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>reflection::source_location<sp/>location{};</highlight></codeline>
<codeline lineno="563"><highlight class="normal">};</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">suite_end<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>std::string_view<sp/>type{};</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>std::string_view<sp/>name{};</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>reflection::source_location<sp/>location{};</highlight></codeline>
<codeline lineno="568"><highlight class="normal">};</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Test,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TArg<sp/>=<sp/>none&gt;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">test<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>std::string_view<sp/>type{};</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>std::string<sp/>name{};<sp/><sp/></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string_view&gt;<sp/>tag{};</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>reflection::source_location<sp/>location{};</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>TArg<sp/>arg{};</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>Test<sp/>run{};</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()()<sp/>{<sp/>run_impl(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Test&amp;&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(run),<sp/>arg);<sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>run_impl(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Test&amp;&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(run),<sp/>arg);<sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>run_impl(Test<sp/>test,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>none&amp;)<sp/>{<sp/>test();<sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>run_impl(T<sp/>test,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TArg&amp;<sp/>arg)</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(test(arg),<sp/>void())<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>test(arg);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>run_impl(T<sp/>test,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TArg&amp;)</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(test.template<sp/>operator()&lt;TArg&gt;(),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">())<sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>test.template<sp/>operator()&lt;TArg&gt;();</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal">};</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Test,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TArg&gt;</highlight></codeline>
<codeline lineno="597"><highlight class="normal">test(std::string_view,<sp/>std::string_view,<sp/>std::string_view,</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>reflection::source_location,<sp/>TArg,<sp/>Test)<sp/>-&gt;<sp/>test&lt;Test,<sp/>TArg&gt;;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TSuite&gt;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">suite<sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>TSuite<sp/>run{};</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>std::string_view<sp/>name{};</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()()<sp/>{<sp/>run();<sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>run();<sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal">};</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TSuite&gt;</highlight></codeline>
<codeline lineno="607"><highlight class="normal">suite(TSuite)<sp/>-&gt;<sp/>suite&lt;TSuite&gt;;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">test_run<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>std::string_view<sp/>type{};</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>std::string_view<sp/>name{};</highlight></codeline>
<codeline lineno="611"><highlight class="normal">};</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">test_finish<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>std::string_view<sp/>type{};</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>std::string_view<sp/>name{};</highlight></codeline>
<codeline lineno="615"><highlight class="normal">};</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TArg<sp/>=<sp/>none&gt;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">skip<sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>std::string_view<sp/>type{};</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>std::string_view<sp/>name{};</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>TArg<sp/>arg{};</highlight></codeline>
<codeline lineno="621"><highlight class="normal">};</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TArg&gt;</highlight></codeline>
<codeline lineno="623"><highlight class="normal">skip(std::string_view,<sp/>std::string_view,<sp/>TArg)<sp/>-&gt;<sp/>skip&lt;TArg&gt;;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">test_skip<sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>std::string_view<sp/>type{};</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>std::string_view<sp/>name{};</highlight></codeline>
<codeline lineno="627"><highlight class="normal">};</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TExpr&gt;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">assertion<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>TExpr<sp/>expr{};</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>reflection::source_location<sp/>location{};</highlight></codeline>
<codeline lineno="632"><highlight class="normal">};</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TExpr&gt;</highlight></codeline>
<codeline lineno="634"><highlight class="normal">assertion(TExpr,<sp/>reflection::source_location)<sp/>-&gt;<sp/>assertion&lt;TExpr&gt;;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TExpr&gt;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">assertion_pass<sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>TExpr<sp/>expr{};</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>reflection::source_location<sp/>location{};</highlight></codeline>
<codeline lineno="639"><highlight class="normal">};</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TExpr&gt;</highlight></codeline>
<codeline lineno="641"><highlight class="normal">assertion_pass(TExpr)<sp/>-&gt;<sp/>assertion_pass&lt;TExpr&gt;;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TExpr&gt;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">assertion_fail<sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>TExpr<sp/>expr{};</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>reflection::source_location<sp/>location{};</highlight></codeline>
<codeline lineno="646"><highlight class="normal">};</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TExpr&gt;</highlight></codeline>
<codeline lineno="648"><highlight class="normal">assertion_fail(TExpr)<sp/>-&gt;<sp/>assertion_fail&lt;TExpr&gt;;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">test_end<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>std::string_view<sp/>type{};</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>std::string_view<sp/>name{};</highlight></codeline>
<codeline lineno="652"><highlight class="normal">};</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TMsg&gt;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">log<sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>TMsg<sp/>msg{};</highlight></codeline>
<codeline lineno="656"><highlight class="normal">};</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TMsg<sp/>=<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">_view&gt;</highlight></codeline>
<codeline lineno="658"><highlight class="normal">log(TMsg)<sp/>-&gt;<sp/>log&lt;TMsg&gt;;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">fatal_assertion<sp/>:<sp/>std::exception<sp/>{};</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">exception<sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>msg{};</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>what()<sp/>const<sp/>-&gt;<sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>msg;<sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal">};</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">summary<sp/>{};</highlight></codeline>
<codeline lineno="665"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">op<sp/>{};</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">fatal_;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">fatal<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::fatal_{t};</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal">};</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="namespacecfg" kindref="compound">cfg</ref><sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">value_ref<sp/>=<sp/>std::variant&lt;std::monostate,<sp/>std::reference_wrapper&lt;bool&gt;,</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::reference_wrapper&lt;std::size_t&gt;,</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::reference_wrapper&lt;std::string&gt;&gt;;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">option<sp/>=<sp/>std::tuple&lt;std::string,<sp/>std::string,<sp/>value_ref,<sp/>std::string&gt;;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>reflection::source_location<sp/>location{};</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>wip{};</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>largc<sp/>=<sp/>__argc;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>largv<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(__argv);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>largc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>largv<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>executable_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>executable&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>query_pattern;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;-<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>invert_query_pattern<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;-<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>query_regex_pattern;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;-<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>show_help<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;-<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>show_tests<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;-<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>list_tags<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;-<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>show_successful_tests<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;-<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>output_filename;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>use_reporter<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;console&quot;</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;-<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>suite_name;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>abort_early<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;-<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t<sp/>abort_after_n_failures<sp/>=</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::numeric_limits&lt;std::size_t&gt;::max();<sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;-<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>show_duration<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;-<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t<sp/>show_min_duration<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>input_filename;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>show_test_names<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;-<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>show_reporters<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;-<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>sort_order<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;decl&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t<sp/>rnd_seed<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0:<sp/>use<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>use_colour<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;-<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>show_lib_identity<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;-<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>wait_for_keypress<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;never&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;option&gt;<sp/>options<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;short<sp/>long<sp/>option<sp/>name&gt;,<sp/>&lt;option<sp/>arg&gt;,<sp/>&lt;ref<sp/>to<sp/>cfg&gt;,<sp/>&lt;description&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;-?<sp/>-h<sp/>--help&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>std::ref(show_help),<sp/></highlight><highlight class="stringliteral">&quot;display<sp/>usage<sp/>information&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;-l<sp/>--list-tests&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>std::ref(show_tests),<sp/></highlight><highlight class="stringliteral">&quot;list<sp/>all/matching<sp/>test<sp/>cases&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;-t,<sp/>--list-tags&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>std::ref(list_tags),<sp/></highlight><highlight class="stringliteral">&quot;list<sp/>all/matching<sp/>tags&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;-s,<sp/>--success&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>std::ref(show_successful_tests),<sp/></highlight><highlight class="stringliteral">&quot;include<sp/>successful<sp/>tests<sp/>in<sp/>output&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;-o,<sp/>--out&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&lt;filename&gt;&quot;</highlight><highlight class="normal">,<sp/>std::ref(output_filename),<sp/></highlight><highlight class="stringliteral">&quot;output<sp/>filename&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;-r,<sp/>--reporter&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&lt;name&gt;&quot;</highlight><highlight class="normal">,<sp/>std::ref(use_reporter),<sp/></highlight><highlight class="stringliteral">&quot;reporter<sp/>to<sp/>use<sp/>(defaults<sp/>to<sp/>console)&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;-n,<sp/>--name&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&lt;name&gt;&quot;</highlight><highlight class="normal">,<sp/>std::ref(suite_name),<sp/></highlight><highlight class="stringliteral">&quot;suite<sp/>name&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;-a,<sp/>--abort&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>std::ref(abort_early),<sp/></highlight><highlight class="stringliteral">&quot;abort<sp/>at<sp/>first<sp/>failure&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;-x,<sp/>--abortx&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&lt;no.<sp/>failures&gt;&quot;</highlight><highlight class="normal">,<sp/>std::ref(abort_after_n_failures),<sp/></highlight><highlight class="stringliteral">&quot;abort<sp/>after<sp/>x<sp/>failures&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;-d,<sp/>--durations&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>std::ref(show_duration),<sp/></highlight><highlight class="stringliteral">&quot;show<sp/>test<sp/>durations&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;-D,<sp/>--min-duration&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&lt;seconds&gt;&quot;</highlight><highlight class="normal">,<sp/>std::ref(show_min_duration),<sp/></highlight><highlight class="stringliteral">&quot;show<sp/>test<sp/>durations<sp/>for<sp/>[...]&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;-f,<sp/>--input-file&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&lt;filename&gt;&quot;</highlight><highlight class="normal">,<sp/>std::ref(input_filename),<sp/></highlight><highlight class="stringliteral">&quot;load<sp/>test<sp/>names<sp/>to<sp/>run<sp/>from<sp/>a<sp/>file&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;--list-test-names-only&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>std::ref(show_test_names),<sp/></highlight><highlight class="stringliteral">&quot;list<sp/>all/matching<sp/>test<sp/>cases<sp/>names<sp/>only&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;--list-reporters&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>std::ref(show_reporters),<sp/></highlight><highlight class="stringliteral">&quot;list<sp/>all<sp/>reporters&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;--order<sp/>&lt;decl|lex|rand&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>std::ref(sort_order),<sp/></highlight><highlight class="stringliteral">&quot;test<sp/>case<sp/>order<sp/>(defaults<sp/>to<sp/>decl)&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;--rng-seed&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&lt;&apos;time&apos;|number&gt;&quot;</highlight><highlight class="normal">,<sp/>std::ref(rnd_seed),<sp/></highlight><highlight class="stringliteral">&quot;set<sp/>a<sp/>specific<sp/>seed<sp/>for<sp/>random<sp/>numbers&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;--use-colour&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&lt;yes|no&gt;&quot;</highlight><highlight class="normal">,<sp/>std::ref(use_colour),<sp/></highlight><highlight class="stringliteral">&quot;should<sp/>output<sp/>be<sp/>colourised&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;--libidentify&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>std::ref(show_lib_identity),<sp/></highlight><highlight class="stringliteral">&quot;report<sp/>name<sp/>and<sp/>version<sp/>according<sp/>to<sp/>libidentify<sp/>standard&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;--wait-for-keypress&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&lt;never|start|exit|both&gt;&quot;</highlight><highlight class="normal">,<sp/>std::ref(wait_for_keypress),<sp/></highlight><highlight class="stringliteral">&quot;waits<sp/>for<sp/>a<sp/>keypress<sp/>before<sp/>exiting&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::optional&lt;cfg::option&gt;<sp/>find_arg(std::string_view<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>option<sp/>:<sp/><ref refid="namespacecfg" kindref="compound">cfg</ref>::options)<sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::get&lt;0&gt;(option).find(arg)<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>option;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print_usage()<sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>opt_width<sp/>=<sp/>30;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>cfg::executable_name</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>[&lt;test<sp/>name|pattern|tags&gt;<sp/>...<sp/>]<sp/>options\n\nwith<sp/>options:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[cmd,<sp/>arg,<sp/>val,<sp/>description]<sp/>:<sp/><ref refid="namespacecfg" kindref="compound">cfg</ref>::options)<sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>s<sp/>=<sp/>cmd;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s.append(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s.append(arg);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pad<sp/>fixed<sp/>column<sp/>width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pad_by<sp/>=<sp/>(s.size()<sp/>&lt;=<sp/>opt_width)<sp/>?<sp/>opt_width<sp/>-<sp/>s.size()<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s.insert(s.end(),<sp/>pad_by,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s<sp/>&lt;&lt;<sp/>description<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print_identity()<sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>according<sp/>to:<sp/>https://github.com/janwilmans/LibIdentify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;description:<sp/><sp/><sp/><sp/>A<sp/>UT<sp/>/<sp/>μt<sp/>test<sp/>executable\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;category:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>testframework\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;framework:<sp/><sp/><sp/><sp/><sp/><sp/>UT:<sp/>C++20<sp/>μ(micro)/Unit<sp/>Testing<sp/>Framework\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;version:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>BOOST_UT_VERSION<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>parse_arg_with_fallback(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])<sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>before<sp/>call<sp/>main</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>argv<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cfg::largc<sp/>=<sp/>argc;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cfg::largv<sp/>=<sp/>argv;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cfg::largc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cfg::largv<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>parse(cfg::largc,<sp/>cfg::largv);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>parse(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])<sp/>{</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>n_args<sp/>=<sp/>argc<sp/>&gt;<sp/>0<sp/>?<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(argc)<sp/>:<sp/>0U;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_args<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>argv<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>executable_name<sp/>=<sp/>argv[0];</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>query_pattern<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found_first_option<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1U;<sp/>i<sp/>&lt;<sp/>n_args<sp/>&amp;&amp;<sp/>argv<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>cmd(argv[i]);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cmd_option<sp/>=<sp/>find_arg(cmd);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cmd_option.has_value())<sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found_first_option)<sp/>{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>option:<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cmd<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>run:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>executable_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>--help&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;for<sp/>additional<sp/>help&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::exit(-1);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>1U)<sp/>{</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query_pattern.append(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query_pattern.append(cmd);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>found_first_option<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>std::get&lt;value_ref&gt;(*cmd_option);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_option_arg<sp/>=<sp/>!std::get&lt;1&gt;(*cmd_option).empty();</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!has_option_arg<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::holds_alternative&lt;std::reference_wrapper&lt;bool&gt;&gt;(var))<sp/>{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;std::reference_wrapper&lt;bool&gt;&gt;(var).get()<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>+<sp/>1)<sp/>&gt;=<sp/>n_args)<sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;missing<sp/>argument<sp/>for<sp/>option<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>argv[i]<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::exit(-1);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>1;<sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>to<sp/>next<sp/>argv<sp/>for<sp/>parsing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::holds_alternative&lt;std::reference_wrapper&lt;std::size_t&gt;&gt;(var))<sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>size<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>last;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>argument(argv[i]);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>val<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::stoull(argument,<sp/>&amp;last));</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last<sp/>!=<sp/>argument.length())<sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>parse<sp/>option<sp/>of<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>argv[i<sp/>-<sp/>1]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>argv[i]<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::exit(-1);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;std::reference_wrapper&lt;std::size_t&gt;&gt;(var).get()<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::holds_alternative&lt;std::reference_wrapper&lt;std::string&gt;&gt;(var))<sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>string<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;std::reference_wrapper&lt;std::string&gt;&gt;(var).get()<sp/>=<sp/>argv[i];</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(show_help)<sp/>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>print_usage();</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::exit(0);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(show_lib_identity)<sp/>{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>print_identity();</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::exit(0);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!query_pattern.empty())<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>simple<sp/>glob-like<sp/>search</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>query_regex_pattern<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>:<sp/>query_pattern)<sp/>{</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invert_query_pattern<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query_regex_pattern<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;.*&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query_regex_pattern<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query_regex_pattern<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\\.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query_regex_pattern<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\\\\&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query_regex_pattern<sp/>+=<sp/>c;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="876"><highlight class="normal">};</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="879"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get_impl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(t.get())<sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t.get();</highlight></codeline>
<codeline lineno="881"><highlight class="normal">}</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="883"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get_impl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t,<sp/>...)<sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="885"><highlight class="normal">}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="887"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_impl(t,<sp/>0);</highlight></codeline>
<codeline lineno="889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">type_<sp/>:<sp/>op<sp/>{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TOther&gt;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(readability-const-return-type)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TOther&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type_&lt;TOther&gt;<sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacecolor_1a8588d7afe41d3f541b62b2b4b78ff0c7" kindref="member">operator==</ref>(type_&lt;T&gt;)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TOther&gt;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacecolor_1a8588d7afe41d3f541b62b2b4b78ff0c7" kindref="member">operator==</ref>(type_&lt;TOther&gt;)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TOther&gt;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacecolor_1a8588d7afe41d3f541b62b2b4b78ff0c7" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TOther&amp;)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::is_same_v&lt;TOther,<sp/>T&gt;;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator!=(type_&lt;T&gt;)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TOther&gt;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator!=(type_&lt;TOther&gt;)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TOther&gt;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TOther&amp;)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>not<sp/>std::is_same_v&lt;TOther,<sp/>T&gt;;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="917"><highlight class="normal">};</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">value<sp/>:<sp/>op<sp/>{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">value_type<sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*explicit(false)*/</highlight><highlight class="normal"><sp/>value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>_value)<sp/>:<sp/>value_{_value}<sp/>{}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>T()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/>get()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/>T<sp/>value_{};</highlight></codeline>
<codeline lineno="928"><highlight class="normal">};</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;std::</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">ing_po</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">value&lt;T&gt;<sp/>:<sp/>op<sp/>{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">value_type<sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>epsilon<sp/>=<sp/>T{};</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>_value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>precision)<sp/>:<sp/>value_{_value}<sp/>{</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>epsilon<sp/>=<sp/>precision;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*explicit(false)*/</highlight><highlight class="normal"><sp/>value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>val)</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>value{val,<sp/>T(1)<sp/>/<sp/>math::pow(T(10),</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>math::den_size&lt;unsigned<sp/>long<sp/>long&gt;(val))}<sp/>{}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>T()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/>get()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/>T<sp/>value_{};</highlight></codeline>
<codeline lineno="946"><highlight class="normal">};</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">value_location<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>detail::value&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*explicit(false)*/</highlight><highlight class="normal"><sp/>value_location(</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>reflection::source_location&amp;<sp/>sl<sp/>=</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reflection::source_location::current())</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>detail::value&lt;T&gt;{t}<sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>cfg::location<sp/>=<sp/>sl;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>value_location(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>precision,</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>reflection::source_location&amp;<sp/>sl<sp/>=</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reflection::source_location::current())</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>detail::value&lt;T&gt;{t,<sp/>precision}<sp/>{</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>cfg::location<sp/>=<sp/>sl;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="964"><highlight class="normal">};</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;auto<sp/>N&gt;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">integral_constant<sp/>:<sp/>op<sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">value_type<sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(N);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>N;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacecolor_1a024ddfc4222d81fefa8f0ff061b51547" kindref="member">operator-</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>integral_constant&lt;-N&gt;{};</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>value_type()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>N;<sp/>}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>N;<sp/>}</highlight></codeline>
<codeline lineno="976"><highlight class="normal">};</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/>auto<sp/>N,<sp/>auto<sp/>D,<sp/>auto<sp/>Size,<sp/>auto<sp/>P<sp/>=<sp/>1&gt;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">floating_point_constant<sp/>:<sp/>op<sp/>{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">value_type<sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>epsilon<sp/>=<sp/>T(1)<sp/>/<sp/>math::pow(T(10),<sp/>Size<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>T(P)<sp/>*<sp/>(T(N)<sp/>+<sp/>(T(D)<sp/>/<sp/>math::pow(T(10),<sp/>Size)));</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacecolor_1a024ddfc4222d81fefa8f0ff061b51547" kindref="member">operator-</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>floating_point_constant&lt;T,<sp/>N,<sp/>D,<sp/>Size,<sp/>-1&gt;{};</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>value_type()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;<sp/>}</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;<sp/>}</highlight></codeline>
<codeline lineno="990"><highlight class="normal">};</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TLhs,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">eq_<sp/>:<sp/>op<sp/>{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>eq_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TLhs&amp;<sp/>lhs<sp/>=<sp/>{},<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TRhs&amp;<sp/>rhs<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>lhs_{lhs},<sp/>rhs_{rhs},<sp/>value_{[&amp;]<sp/>{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::operator==;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::operator&lt;;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(type_traits::has_static_member_object_value_v&lt;TLhs&gt;<sp/>and</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_traits::has_static_member_object_value_v&lt;TRhs&gt;)<sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.value<sp/>==<sp/>rhs.value;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(type_traits::has_static_member_object_epsilon_v&lt;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TLhs&gt;<sp/>and</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_traits::has_static_member_object_epsilon_v&lt;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRhs&gt;)<sp/>{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>math::abs(get(lhs)<sp/>-<sp/>get(rhs))<sp/>&lt;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>math::min_value(TLhs::epsilon,<sp/>TRhs::epsilon);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(type_traits::has_static_member_object_epsilon_v&lt;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TLhs&gt;)<sp/>{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>math::abs(get(lhs)<sp/>-<sp/>get(rhs))<sp/>&lt;<sp/>TLhs::epsilon;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(type_traits::has_static_member_object_epsilon_v&lt;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRhs&gt;)<sp/>{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>math::abs(get(lhs)<sp/>-<sp/>get(rhs))<sp/>&lt;<sp/>TRhs::epsilon;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get(lhs)<sp/>==<sp/>get(rhs);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}()}<sp/>{}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lhs()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get(lhs_);<sp/>}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rhs()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get(rhs_);<sp/>}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TLhs<sp/>lhs_{};</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TRhs<sp/>rhs_{};</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value_{};</highlight></codeline>
<codeline lineno="1026"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TLhs,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TRhs,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TEpsilon&gt;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">approx_<sp/>:<sp/>op<sp/>{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>approx_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TLhs&amp;<sp/>lhs<sp/>=<sp/>{},<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TRhs&amp;<sp/>rhs<sp/>=<sp/>{},</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TEpsilon&amp;<sp/>epsilon<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>lhs_{lhs},<sp/>rhs_{rhs},<sp/>epsilon_{epsilon},<sp/>value_{[&amp;]<sp/>{</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::operator&lt;;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(type_traits::has_static_member_object_value_v&lt;TLhs&gt;<sp/>and</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_traits::has_static_member_object_value_v&lt;TRhs&gt;<sp/>and</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_traits::has_static_member_object_value_v&lt;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEpsilon&gt;)<sp/>{</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>math::abs_diff(TLhs::value,<sp/>TRhs::value)<sp/>&lt;<sp/>TEpsilon::value;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>math::abs_diff(get(lhs),<sp/>get(rhs))<sp/>&lt;<sp/>get(epsilon);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}()}<sp/>{}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lhs()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get(lhs_);<sp/>}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rhs()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get(rhs_);<sp/>}</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>epsilon()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get(epsilon_);<sp/>}</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TLhs<sp/>lhs_{};</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TRhs<sp/>rhs_{};</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TEpsilon<sp/>epsilon_{};</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value_{};</highlight></codeline>
<codeline lineno="1054"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TLhs,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">neq_<sp/>:<sp/>op<sp/>{</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>neq_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TLhs&amp;<sp/>lhs<sp/>=<sp/>{},<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TRhs&amp;<sp/>rhs<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>lhs_{lhs},<sp/>rhs_{rhs},<sp/>value_{[&amp;]<sp/>{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::operator==;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::operator!=;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::operator&gt;;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(type_traits::has_static_member_object_value_v&lt;TLhs&gt;<sp/>and</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_traits::has_static_member_object_value_v&lt;TRhs&gt;)<sp/>{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.value<sp/>!=<sp/>rhs.value;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(type_traits::has_static_member_object_epsilon_v&lt;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TLhs&gt;<sp/>and</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_traits::has_static_member_object_epsilon_v&lt;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRhs&gt;)<sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>math::abs(get(lhs_)<sp/>-<sp/>get(rhs_))<sp/>&gt;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>math::min_value(TLhs::epsilon,<sp/>TRhs::epsilon);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(type_traits::has_static_member_object_epsilon_v&lt;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TLhs&gt;)<sp/>{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>math::abs(get(lhs_)<sp/>-<sp/>get(rhs_))<sp/>&gt;<sp/>TLhs::epsilon;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(type_traits::has_static_member_object_epsilon_v&lt;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TRhs&gt;)<sp/>{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>math::abs(get(lhs_)<sp/>-<sp/>get(rhs_))<sp/>&gt;<sp/>TRhs::epsilon;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get(lhs_)<sp/>!=<sp/>get(rhs_);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}()}<sp/>{}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lhs()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get(lhs_);<sp/>}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rhs()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get(rhs_);<sp/>}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TLhs<sp/>lhs_{};</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TRhs<sp/>rhs_{};</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value_{};</highlight></codeline>
<codeline lineno="1091"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TLhs,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">gt_<sp/>:<sp/>op<sp/>{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>gt_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TLhs&amp;<sp/>lhs<sp/>=<sp/>{},<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TRhs&amp;<sp/>rhs<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>lhs_{lhs},<sp/>rhs_{rhs},<sp/>value_{[&amp;]<sp/>{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::operator&gt;;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(type_traits::has_static_member_object_value_v&lt;TLhs&gt;<sp/>and</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_traits::has_static_member_object_value_v&lt;TRhs&gt;)<sp/>{</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.value<sp/>&gt;<sp/>rhs.value;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get(lhs_)<sp/>&gt;<sp/>get(rhs_);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}()}<sp/>{}</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lhs()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get(lhs_);<sp/>}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rhs()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get(rhs_);<sp/>}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TLhs<sp/>lhs_{};</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TRhs<sp/>rhs_{};</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value_{};</highlight></codeline>
<codeline lineno="1114"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TLhs,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ge_<sp/>:<sp/>op<sp/>{</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>ge_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TLhs&amp;<sp/>lhs<sp/>=<sp/>{},<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TRhs&amp;<sp/>rhs<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>lhs_{lhs},<sp/>rhs_{rhs},<sp/>value_{[&amp;]<sp/>{</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::operator&gt;=;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(type_traits::has_static_member_object_value_v&lt;TLhs&gt;<sp/>and</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_traits::has_static_member_object_value_v&lt;TRhs&gt;)<sp/>{</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.value<sp/>&gt;=<sp/>rhs.value;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get(lhs_)<sp/>&gt;=<sp/>get(rhs_);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}()}<sp/>{}</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lhs()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get(lhs_);<sp/>}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rhs()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get(rhs_);<sp/>}</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TLhs<sp/>lhs_{};</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TRhs<sp/>rhs_{};</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value_{};</highlight></codeline>
<codeline lineno="1137"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TLhs,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">lt_<sp/>:<sp/>op<sp/>{</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>lt_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TLhs&amp;<sp/>lhs<sp/>=<sp/>{},<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TRhs&amp;<sp/>rhs<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>lhs_{lhs},<sp/>rhs_{rhs},<sp/>value_{[&amp;]<sp/>{</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::operator&lt;;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(type_traits::has_static_member_object_value_v&lt;TLhs&gt;<sp/>and</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_traits::has_static_member_object_value_v&lt;TRhs&gt;)<sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>!defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>some<sp/>reason,<sp/>accessing<sp/>the<sp/>static<sp/>member<sp/>via<sp/>::<sp/>does<sp/>not<sp/>compile<sp/>on<sp/>MSVC,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>next<sp/>line<sp/>does<sp/>not<sp/>compile<sp/>on<sp/>clang,<sp/>so<sp/>we<sp/>have<sp/>to<sp/>use<sp/>the<sp/>ifdef<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.value<sp/>&lt;<sp/>rhs.value;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TLhs::value<sp/>&lt;<sp/>TRhs::value;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get(lhs_)<sp/>&lt;<sp/>get(rhs_);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}()}<sp/>{</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lhs()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get(lhs_);<sp/>}</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rhs()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get(rhs_);<sp/>}</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TLhs<sp/>lhs_{};</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TRhs<sp/>rhs_{};</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value_{};</highlight></codeline>
<codeline lineno="1168"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TLhs,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">le_<sp/>:<sp/>op<sp/>{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>le_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TLhs&amp;<sp/>lhs<sp/>=<sp/>{},<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TRhs&amp;<sp/>rhs<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>lhs_{lhs},<sp/>rhs_{rhs},<sp/>value_{[&amp;]<sp/>{</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::operator&lt;=;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(type_traits::has_static_member_object_value_v&lt;TLhs&gt;<sp/>and</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_traits::has_static_member_object_value_v&lt;TRhs&gt;)<sp/>{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.value<sp/>&lt;=<sp/>rhs.value;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get(lhs_)<sp/>&lt;=<sp/>get(rhs_);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}()}<sp/>{}</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lhs()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get(lhs_);<sp/>}</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rhs()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get(rhs_);<sp/>}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TLhs<sp/>lhs_{};</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TRhs<sp/>rhs_{};</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value_{};</highlight></codeline>
<codeline lineno="1191"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TLhs,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">and_<sp/>:<sp/>op<sp/>{</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>and_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TLhs&amp;<sp/>lhs<sp/>=<sp/>{},<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TRhs&amp;<sp/>rhs<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>lhs_{lhs},</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs_{rhs},</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_{static_cast&lt;bool&gt;(lhs)<sp/>and<sp/>static_cast&lt;bool&gt;(rhs)}<sp/>{}</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lhs()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get(lhs_);<sp/>}</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rhs()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get(rhs_);<sp/>}</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TLhs<sp/>lhs_{};</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TRhs<sp/>rhs_{};</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value_{};</highlight></codeline>
<codeline lineno="1207"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TLhs,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">or_<sp/>:<sp/>op<sp/>{</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>or_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TLhs&amp;<sp/>lhs<sp/>=<sp/>{},<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TRhs&amp;<sp/>rhs<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>lhs_{lhs},</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs_{rhs},</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_{static_cast&lt;bool&gt;(lhs)<sp/>or<sp/>static_cast&lt;bool&gt;(rhs)}<sp/>{}</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lhs()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get(lhs_);<sp/>}</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rhs()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get(rhs_);<sp/>}</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TLhs<sp/>lhs_{};</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TRhs<sp/>rhs_{};</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value_{};</highlight></codeline>
<codeline lineno="1223"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">not_<sp/>:<sp/>op<sp/>{</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>not_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>t_{t},<sp/>value_{not<sp/>static_cast&lt;bool&gt;(t)}<sp/>{}</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get(t_);<sp/>}</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>t_{};</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value_{};</highlight></codeline>
<codeline lineno="1235"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">fatal_;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cpp_exceptions)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TExpr,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TException<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">throws_<sp/>:<sp/>op<sp/>{</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>throws_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TExpr&amp;<sp/>expr)</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>value_{[&amp;expr]<sp/>{</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr();</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TException&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}()}<sp/>{}</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value_{};</highlight></codeline>
<codeline lineno="1258"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TExpr&gt;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">throws_&lt;TExpr,<sp/>void&gt;<sp/>:<sp/>op<sp/>{</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>throws_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TExpr&amp;<sp/>expr)</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>value_{[&amp;expr]<sp/>{</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr();</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}()}<sp/>{}</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value_{};</highlight></codeline>
<codeline lineno="1275"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TExpr&gt;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">nothrow_<sp/>:<sp/>op<sp/>{</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>nothrow_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TExpr&amp;<sp/>expr)</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>value_{[&amp;expr]<sp/>{</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr();</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}()}<sp/>{}</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value_{};</highlight></codeline>
<codeline lineno="1292"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__has_include(&lt;unistd.h&gt;)<sp/>and<sp/>__has_include(&lt;sys/wait.h&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TExpr&gt;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">aborts_<sp/>:<sp/>op<sp/>{</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>aborts_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TExpr&amp;<sp/>expr)</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>value_{[&amp;expr]()<sp/>-&gt;<sp/>bool<sp/>{</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(const<sp/>auto<sp/>pid<sp/>=<sp/>fork();<sp/>not<sp/>pid)<sp/>{</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr();</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::exit(0);</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>exit_status<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wait(&amp;exit_status);</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exit_status;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}()}<sp/>{}</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value_{};</highlight></codeline>
<codeline lineno="1312"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">type_traits<sp/>{</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal">is_op<sp/>=<sp/>std::derived_from&lt;T,<sp/>detail::op&gt;;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_stream_insertable<sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_stream_insertable&lt;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/>T,<sp/>std::void_t&lt;decltype(std::declval&lt;std::ostream&amp;&gt;()</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>detail::get(std::declval&lt;T&gt;()))&gt;&gt;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="1328"><highlight class="normal">template<sp/>&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal">inline<sp/>constexpr<sp/>bool<sp/>is_stream_insertable_v<sp/>=<sp/>is_stream_insertable&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="1330"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>type_traits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal">struct<sp/>colors<sp/>{</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/>std::string_view<sp/>none<sp/>=<sp/>&quot;\033[0m&quot;;</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/>std::string_view<sp/>pass<sp/>=<sp/>&quot;\033[32m&quot;;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/>std::string_view<sp/>fail<sp/>=<sp/>&quot;\033[31m&quot;;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/>std::string_view<sp/>skip<sp/>=<sp/>&quot;\033[33m&quot;;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal">class<sp/>printer<sp/>{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/>auto<sp/>color(const<sp/>bool<sp/>cond)<sp/>{</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>cond<sp/>?<sp/>colors_.pass<sp/>:<sp/>colors_.fail;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/>printer()<sp/>=<sp/>default;</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*explicit(false)*/</highlight><highlight class="normal"><sp/>printer(const<sp/>colors<sp/>colors)<sp/>:<sp/>colors_{colors}<sp/>{}</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/>auto&amp;<sp/>operator&lt;&lt;(const<sp/>T&amp;<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/>out_<sp/>&lt;&lt;<sp/>detail::get(t);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/>requires<sp/>std::ranges::range&lt;T&gt;<sp/>&amp;&amp;<sp/>(!concepts::ostreamable&lt;T&gt;)</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/>auto&amp;<sp/>operator&lt;&lt;(T&amp;&amp;<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>*this<sp/>&lt;&lt;<sp/>&apos;{&apos;;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>first<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(const<sp/>auto&amp;<sp/>arg<sp/>:<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*this<sp/>&lt;&lt;<sp/>(first<sp/>?<sp/>&quot;&quot;<sp/>:<sp/>&quot;,<sp/>&quot;)<sp/>&lt;&lt;<sp/>arg;</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/>*this<sp/>&lt;&lt;<sp/>&apos;}&apos;;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/>auto&amp;<sp/>operator&lt;&lt;(std::string_view<sp/>sv)<sp/>{</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/>out_<sp/>&lt;&lt;<sp/>sv;</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>TLhs,<sp/>class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/>auto&amp;<sp/>operator&lt;&lt;(const<sp/>detail::eq_&lt;TLhs,<sp/>TRhs&gt;&amp;<sp/>op)<sp/>{</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(*this<sp/>&lt;&lt;<sp/>color(op)<sp/>&lt;&lt;<sp/>op.lhs()<sp/>&lt;&lt;<sp/>&quot;<sp/>==<sp/>&quot;<sp/>&lt;&lt;<sp/>op.rhs()</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>colors_.none);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>TLhs,<sp/>class<sp/>TRhs,<sp/>class<sp/>TEpsilon&gt;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/>auto&amp;<sp/>operator&lt;&lt;(const<sp/>detail::approx_&lt;TLhs,<sp/>TRhs,<sp/>TEpsilon&gt;&amp;<sp/>op)<sp/>{</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(*this<sp/>&lt;&lt;<sp/>color(op)<sp/>&lt;&lt;<sp/>op.lhs()<sp/>&lt;&lt;<sp/>&quot;<sp/>~<sp/>(&quot;<sp/>&lt;&lt;<sp/>op.rhs()<sp/>&lt;&lt;<sp/>&quot;<sp/>+/-<sp/>&quot;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>op.epsilon()<sp/>&lt;&lt;<sp/>&apos;)&apos;<sp/>&lt;&lt;<sp/>colors_.none);</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>TLhs,<sp/>class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/>auto&amp;<sp/>operator&lt;&lt;(const<sp/>detail::neq_&lt;TLhs,<sp/>TRhs&gt;&amp;<sp/>op)<sp/>{</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(*this<sp/>&lt;&lt;<sp/>color(op)<sp/>&lt;&lt;<sp/>op.lhs()<sp/>&lt;&lt;<sp/>&quot;<sp/>!=<sp/>&quot;<sp/>&lt;&lt;<sp/>op.rhs()</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>colors_.none);</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>TLhs,<sp/>class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/>auto&amp;<sp/>operator&lt;&lt;(const<sp/>detail::gt_&lt;TLhs,<sp/>TRhs&gt;&amp;<sp/>op)<sp/>{</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(*this<sp/>&lt;&lt;<sp/>color(op)<sp/>&lt;&lt;<sp/>op.lhs()<sp/>&lt;&lt;<sp/>&quot;<sp/>&gt;<sp/>&quot;<sp/>&lt;&lt;<sp/>op.rhs()</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>colors_.none);</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>TLhs,<sp/>class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/>auto&amp;<sp/>operator&lt;&lt;(const<sp/>detail::ge_&lt;TLhs,<sp/>TRhs&gt;&amp;<sp/>op)<sp/>{</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(*this<sp/>&lt;&lt;<sp/>color(op)<sp/>&lt;&lt;<sp/>op.lhs()<sp/>&lt;&lt;<sp/>&quot;<sp/>&gt;=<sp/>&quot;<sp/>&lt;&lt;<sp/>op.rhs()</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>colors_.none);</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>TLhs,<sp/>class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/>auto&amp;<sp/>operator&lt;&lt;(const<sp/>detail::lt_&lt;TRhs,<sp/>TLhs&gt;&amp;<sp/>op)<sp/>{</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(*this<sp/>&lt;&lt;<sp/>color(op)<sp/>&lt;&lt;<sp/>op.lhs()<sp/>&lt;&lt;<sp/>&quot;<sp/>&lt;<sp/>&quot;<sp/>&lt;&lt;<sp/>op.rhs()</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>colors_.none);</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>TLhs,<sp/>class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/>auto&amp;<sp/>operator&lt;&lt;(const<sp/>detail::le_&lt;TRhs,<sp/>TLhs&gt;&amp;<sp/>op)<sp/>{</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(*this<sp/>&lt;&lt;<sp/>color(op)<sp/>&lt;&lt;<sp/>op.lhs()<sp/>&lt;&lt;<sp/>&quot;<sp/>&lt;=<sp/>&quot;<sp/>&lt;&lt;<sp/>op.rhs()</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>colors_.none);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>TLhs,<sp/>class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/>auto&amp;<sp/>operator&lt;&lt;(const<sp/>detail::and_&lt;TLhs,<sp/>TRhs&gt;&amp;<sp/>op)<sp/>{</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(*this<sp/>&lt;&lt;<sp/>&apos;(&apos;<sp/>&lt;&lt;<sp/>op.lhs()<sp/>&lt;&lt;<sp/>color(op)<sp/>&lt;&lt;<sp/>&quot;<sp/>and<sp/>&quot;<sp/>&lt;&lt;<sp/>colors_.none</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>op.rhs()<sp/>&lt;&lt;<sp/>&apos;)&apos;);</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>TLhs,<sp/>class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/>auto&amp;<sp/>operator&lt;&lt;(const<sp/>detail::or_&lt;TLhs,<sp/>TRhs&gt;&amp;<sp/>op)<sp/>{</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(*this<sp/>&lt;&lt;<sp/>&apos;(&apos;<sp/>&lt;&lt;<sp/>op.lhs()<sp/>&lt;&lt;<sp/>color(op)<sp/>&lt;&lt;<sp/>&quot;<sp/>or<sp/>&quot;<sp/>&lt;&lt;<sp/>colors_.none</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>op.rhs()<sp/>&lt;&lt;<sp/>&apos;)&apos;);</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/>auto&amp;<sp/>operator&lt;&lt;(const<sp/>detail::not_&lt;T&gt;&amp;<sp/>op)<sp/>{</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(*this<sp/>&lt;&lt;<sp/>color(op)<sp/>&lt;&lt;<sp/>&quot;not<sp/>&quot;<sp/>&lt;&lt;<sp/>op.value()<sp/>&lt;&lt;<sp/>colors_.none);</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/>auto&amp;<sp/>operator&lt;&lt;(const<sp/>detail::fatal_&lt;T&gt;&amp;<sp/>fatal)<sp/>{</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(*this<sp/>&lt;&lt;<sp/>fatal.get());</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal">#if<sp/>defined(__cpp_exceptions)</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>TExpr,<sp/>class<sp/>TException&gt;</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/>auto&amp;<sp/>operator&lt;&lt;(const<sp/>detail::throws_&lt;TExpr,<sp/>TException&gt;&amp;<sp/>op)<sp/>{</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(*this<sp/>&lt;&lt;<sp/>color(op)<sp/>&lt;&lt;<sp/>&quot;throws&lt;&quot;</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>reflection::type_name&lt;TException&gt;()<sp/>&lt;&lt;<sp/>&quot;&gt;&quot;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>colors_.none);</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>TExpr&gt;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/>auto&amp;<sp/>operator&lt;&lt;(const<sp/>detail::throws_&lt;TExpr,<sp/>void&gt;&amp;<sp/>op)<sp/>{</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(*this<sp/>&lt;&lt;<sp/>color(op)<sp/>&lt;&lt;<sp/>&quot;throws&quot;<sp/>&lt;&lt;<sp/>colors_.none);</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>TExpr&gt;</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/>auto&amp;<sp/>operator&lt;&lt;(const<sp/>detail::nothrow_&lt;TExpr&gt;&amp;<sp/>op)<sp/>{</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(*this<sp/>&lt;&lt;<sp/>color(op)<sp/>&lt;&lt;<sp/>&quot;nothrow&quot;<sp/>&lt;&lt;<sp/>colors_.none);</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1453"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal">#if<sp/>__has_include(&lt;unistd.h&gt;)<sp/>and<sp/>__has_include(&lt;sys/wait.h&gt;)</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>TExpr&gt;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/>auto&amp;<sp/>operator&lt;&lt;(const<sp/>detail::aborts_&lt;TExpr&gt;&amp;<sp/>op)<sp/>{</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(*this<sp/>&lt;&lt;<sp/>color(op)<sp/>&lt;&lt;<sp/>&quot;aborts&quot;<sp/>&lt;&lt;<sp/>colors_.none);</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1460"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/>auto&amp;<sp/>operator&lt;&lt;(const<sp/>detail::type_&lt;T&gt;&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(*this<sp/>&lt;&lt;<sp/>reflection::type_name&lt;T&gt;());</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/>auto<sp/>str()<sp/>const<sp/>{<sp/>return<sp/>out_.str();<sp/>}</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/>const<sp/>auto&amp;<sp/>colors()<sp/>const<sp/>{<sp/>return<sp/>colors_;<sp/>}</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/>private:</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/>ut::colors<sp/>colors_{};</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/>std::ostringstream<sp/>out_{};</highlight></codeline>
<codeline lineno="1473"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal">template<sp/>&lt;class<sp/>TPrinter<sp/>=<sp/>printer&gt;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal">class<sp/>reporter<sp/>{</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/>constexpr<sp/>auto<sp/>operator=(TPrinter<sp/>printer)<sp/>{</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/>printer_<sp/>=<sp/>static_cast&lt;TPrinter&amp;&amp;&gt;(printer);</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/>auto<sp/>on(events::run_begin)<sp/>-&gt;<sp/>void<sp/>{}</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/>auto<sp/>on(events::test_begin<sp/>test_begin)<sp/>-&gt;<sp/>void<sp/>{</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/>printer_<sp/>&lt;&lt;<sp/>&quot;Running<sp/>\&quot;&quot;<sp/>&lt;&lt;<sp/>test_begin.name<sp/>&lt;&lt;<sp/>&quot;\&quot;...&quot;;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/>fails_<sp/>=<sp/>asserts_.fail;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/>auto<sp/>on(events::test_run<sp/>test_run)<sp/>-&gt;<sp/>void<sp/>{</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/>printer_<sp/>&lt;&lt;<sp/>&quot;\n<sp/>\&quot;&quot;<sp/>&lt;&lt;<sp/>test_run.name<sp/>&lt;&lt;<sp/>&quot;\&quot;...&quot;;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/>auto<sp/>on(events::test_skip<sp/>test_skip)<sp/>-&gt;<sp/>void<sp/>{</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/>printer_<sp/>&lt;&lt;<sp/>test_skip.name<sp/>&lt;&lt;<sp/>&quot;...SKIPPED\n&quot;;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/>++tests_.skip;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/>auto<sp/>on(events::test_end)<sp/>-&gt;<sp/>void<sp/>{</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(asserts_.fail<sp/>&gt;<sp/>fails_)<sp/>{</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++tests_.fail;</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printer_<sp/>&lt;&lt;<sp/>&apos;\n&apos;</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>printer_.colors().fail<sp/>&lt;&lt;<sp/>&quot;FAILED&quot;<sp/>&lt;&lt;<sp/>printer_.colors().none</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&apos;\n&apos;;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++tests_.pass;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printer_<sp/>&lt;&lt;<sp/>printer_.colors().pass<sp/>&lt;&lt;<sp/>&quot;PASSED&quot;<sp/>&lt;&lt;<sp/>printer_.colors().none</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&apos;\n&apos;;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>TMsg&gt;</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/>auto<sp/>on(events::log&lt;TMsg&gt;<sp/>l)<sp/>-&gt;<sp/>void<sp/>{</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/>printer_<sp/>&lt;&lt;<sp/>l.msg;</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/>auto<sp/>on(events::exception<sp/>exception)<sp/>-&gt;<sp/>void<sp/>{</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/>printer_<sp/>&lt;&lt;<sp/>&quot;\n<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>printer_.colors().fail</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;Unexpected<sp/>exception<sp/>with<sp/>message:\n&quot;</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>exception.what()<sp/>&lt;&lt;<sp/>printer_.colors().none;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/>++asserts_.fail;</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>TExpr&gt;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/>auto<sp/>on(events::assertion_pass&lt;TExpr&gt;)<sp/>-&gt;<sp/>void<sp/>{</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/>++asserts_.pass;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>TExpr&gt;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/>auto<sp/>on(events::assertion_fail&lt;TExpr&gt;<sp/>assertion)<sp/>-&gt;<sp/>void<sp/>{</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>short_name<sp/>=<sp/>[](std::string_view<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>name.rfind(&apos;/&apos;)<sp/>!=<sp/>std::string_view::npos</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>name.substr(name.rfind(&apos;/&apos;)<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>name;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/>printer_<sp/>&lt;&lt;<sp/>&quot;\n<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>short_name(assertion.location.file_name())<sp/>&lt;&lt;<sp/>&apos;:&apos;</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>assertion.location.line()<sp/>&lt;&lt;<sp/>&apos;:&apos;<sp/>&lt;&lt;<sp/>printer_.colors().fail</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;FAILED&quot;<sp/>&lt;&lt;<sp/>printer_.colors().none<sp/>&lt;&lt;<sp/>&quot;<sp/>[&quot;<sp/>&lt;&lt;<sp/>std::boolalpha</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>assertion.expr<sp/>&lt;&lt;<sp/>printer_.colors().none<sp/>&lt;&lt;<sp/>&apos;]&apos;;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/>++asserts_.fail;</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/>auto<sp/>on(const<sp/>events::fatal_assertion&amp;)<sp/>-&gt;<sp/>void<sp/>{}</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/>auto<sp/>on(events::summary)<sp/>-&gt;<sp/>void<sp/>{</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(tests_.fail<sp/>or<sp/>asserts_.fail)<sp/>{</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printer_<sp/>&lt;&lt;<sp/>&quot;\n========================================================&quot;</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;=======================\n&quot;</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;tests:<sp/><sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>(tests_.pass<sp/>+<sp/>tests_.fail)<sp/>&lt;&lt;<sp/>&quot;<sp/>|<sp/>&quot;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>printer_.colors().fail<sp/>&lt;&lt;<sp/>tests_.fail<sp/>&lt;&lt;<sp/>&quot;<sp/>failed&quot;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>printer_.colors().none<sp/>&lt;&lt;<sp/>&apos;\n&apos;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;asserts:<sp/>&quot;<sp/>&lt;&lt;<sp/>(asserts_.pass<sp/>+<sp/>asserts_.fail)<sp/>&lt;&lt;<sp/>&quot;<sp/>|<sp/>&quot;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>asserts_.pass<sp/>&lt;&lt;<sp/>&quot;<sp/>passed&quot;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>|<sp/>&quot;<sp/>&lt;&lt;<sp/>printer_.colors().fail<sp/>&lt;&lt;<sp/>asserts_.fail<sp/>&lt;&lt;<sp/>&quot;<sp/>failed&quot;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>printer_.colors().none<sp/>&lt;&lt;<sp/>&apos;\n&apos;;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>printer_.str()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>printer_.colors().pass<sp/>&lt;&lt;<sp/>&quot;All<sp/>tests<sp/>passed&quot;</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>printer_.colors().none<sp/>&lt;&lt;<sp/>&quot;<sp/>(&quot;<sp/>&lt;&lt;<sp/>asserts_.pass</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>asserts<sp/>in<sp/>&quot;<sp/>&lt;&lt;<sp/>tests_.pass<sp/>&lt;&lt;<sp/>&quot;<sp/>tests)\n&quot;;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(tests_.skip)<sp/>{</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tests_.skip<sp/>&lt;&lt;<sp/>&quot;<sp/>tests<sp/>skipped\n&quot;;</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout.flush();</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/>protected:</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/>struct<sp/>{</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>pass{};</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>fail{};</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>skip{};</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/>}<sp/>tests_{};</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/>struct<sp/>{</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>pass{};</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>fail{};</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/>}<sp/>asserts_{};</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/>std::size_t<sp/>fails_{};</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/>TPrinter<sp/>printer_{};</highlight></codeline>
<codeline lineno="1584"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal">template<sp/>&lt;class<sp/>TPrinter<sp/>=<sp/>printer&gt;</highlight></codeline>
<codeline lineno="1587"><highlight class="normal">class<sp/>reporter_junit<sp/>{</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/>template<sp/>&lt;typename<sp/>Key,<sp/>typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/>using<sp/>map<sp/>=<sp/>std::unordered_map&lt;Key,<sp/>T&gt;;</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/>using<sp/>clock_ref<sp/>=<sp/>std::chrono::high_resolution_clock;</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/>using<sp/>timePoint<sp/>=<sp/>std::chrono::time_point&lt;clock_ref&gt;;</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/>using<sp/>timeDiff<sp/>=<sp/>std::chrono::milliseconds;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/>enum<sp/>class<sp/>ReportType<sp/>:<sp/>std::uint8_t<sp/>{<sp/>CONSOLE,<sp/>JUNIT<sp/>}<sp/>report_type_;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/>static<sp/>constexpr<sp/>ReportType<sp/>CONSOLE<sp/>=<sp/>ReportType::CONSOLE;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/>static<sp/>constexpr<sp/>ReportType<sp/>JUNIT<sp/>=<sp/>ReportType::JUNIT;</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/>struct<sp/>test_result<sp/>{</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/>test_result*<sp/>parent<sp/>=<sp/>nullptr;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>class_name;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>suite_name;</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>test_name;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>status<sp/>=<sp/>&quot;STARTED&quot;;</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/>timePoint<sp/>run_start<sp/>=<sp/>clock_ref::now();</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/>timePoint<sp/>run_stop<sp/>=<sp/>clock_ref::now();</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>n_tests<sp/>=<sp/>0LU;</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>assertions<sp/>=<sp/>0LU;</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>passed<sp/>=<sp/>0LU;</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>skipped<sp/>=<sp/>0LU;</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>fails<sp/>=<sp/>0LU;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>report_string{};</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;map&lt;std::string,<sp/>test_result&gt;&gt;<sp/>nested_tests<sp/>=</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;map&lt;std::string,<sp/>test_result&gt;&gt;();</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/>colors<sp/>color_{};</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/>map&lt;std::string,<sp/>test_result&gt;<sp/>results_;</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/>std::string<sp/>active_suite_{&quot;global&quot;};</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/>test_result*<sp/>active_scope_<sp/>=<sp/>&amp;results_[active_suite_];</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/>std::stack&lt;std::string&gt;<sp/>active_test_{};</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/>std::streambuf*<sp/>cout_save<sp/>=<sp/>std::cout.rdbuf();</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/>std::ostream<sp/>lcout_;</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/>TPrinter<sp/>printer_;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>ss_out_{};</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/>void<sp/>reset_printer()<sp/>{</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/>ss_out_.str(&quot;&quot;);</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/>ss_out_.clear();</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/>void<sp/>check_for_scope(std::string_view<sp/>test_name)<sp/>{</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>std::string<sp/>str_name(test_name);</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/>active_test_.push(str_name);</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>[iter,<sp/>inserted]<sp/>=<sp/>active_scope_-&gt;nested_tests-&gt;try_emplace(</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_name,<sp/>test_result{active_scope_,<sp/>detail::cfg::executable_name,</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>active_suite_,<sp/>str_name});</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/>active_scope_<sp/>=<sp/>&amp;active_scope_-&gt;nested_tests-&gt;at(str_name);</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(active_test_.size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reset_printer();</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/>active_scope_-&gt;run_start<sp/>=<sp/>clock_ref::now();</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!inserted)<sp/>{</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;WARNING<sp/>test<sp/>&apos;&quot;<sp/>&lt;&lt;<sp/>str_name<sp/>&lt;&lt;<sp/>&quot;&apos;<sp/>for<sp/>test<sp/>suite<sp/>&apos;&quot;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>active_suite_<sp/>&lt;&lt;<sp/>&quot;&apos;<sp/>already<sp/>present\n&quot;;</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/>void<sp/>pop_scope(std::string_view<sp/>test_name_sv)<sp/>{</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>std::string<sp/>test_name(test_name_sv);</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/>active_scope_-&gt;run_stop<sp/>=<sp/>clock_ref::now();</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(active_scope_-&gt;skipped)<sp/>{</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>active_scope_-&gt;status<sp/>=<sp/>&quot;SKIPPED&quot;;</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>active_scope_-&gt;status<sp/>=<sp/>active_scope_-&gt;fails<sp/>&gt;<sp/>0<sp/>?<sp/>&quot;FAILED&quot;<sp/>:<sp/>&quot;PASSED&quot;;</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/>active_scope_-&gt;assertions<sp/>=</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>active_scope_-&gt;assertions<sp/>+<sp/>active_scope_-&gt;fails;</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(active_test_.top()<sp/>==<sp/>test_name)<sp/>{</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>active_test_.pop();</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>old_scope<sp/>=<sp/>active_scope_;</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(active_scope_-&gt;parent<sp/>!=<sp/>nullptr)<sp/>{</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>active_scope_<sp/>=<sp/>active_scope_-&gt;parent;</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>active_scope_<sp/>=<sp/>&amp;results_[std::string{&quot;global&quot;}];</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>active_scope_-&gt;n_tests<sp/>+=<sp/>old_scope-&gt;n_tests<sp/>+<sp/>1LU;</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>active_scope_-&gt;assertions<sp/>+=<sp/>old_scope-&gt;assertions;</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>active_scope_-&gt;passed<sp/>+=<sp/>old_scope-&gt;passed;</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>active_scope_-&gt;skipped<sp/>+=<sp/>old_scope-&gt;skipped;</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>active_scope_-&gt;fails<sp/>+=<sp/>old_scope-&gt;fails;</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss(&quot;runner<sp/>returned<sp/>from<sp/>test<sp/>w/o<sp/>signaling:<sp/>&quot;);</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>&quot;not<sp/>popping<sp/>because<sp/>&apos;&quot;<sp/>&lt;&lt;<sp/>active_test_.top()<sp/>&lt;&lt;<sp/>&quot;&apos;<sp/>differs<sp/>from<sp/>&apos;&quot;</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>test_name<sp/>&lt;&lt;<sp/>&quot;&apos;&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1676"><highlight class="normal">#if<sp/>defined(__cpp_exceptions)</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/>throw<sp/>std::logic_error(ss.str());</highlight></codeline>
<codeline lineno="1678"><highlight class="normal">#else</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/>std::abort();</highlight></codeline>
<codeline lineno="1680"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/>constexpr<sp/>auto<sp/>operator=(TPrinter<sp/>printer)<sp/>{</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/>printer_<sp/>=<sp/>static_cast&lt;TPrinter&amp;&amp;&gt;(printer);</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/>reporter_junit()<sp/>:<sp/>lcout_(std::cout.rdbuf())<sp/>{}</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/>~reporter_junit()<sp/>{<sp/>std::cout.rdbuf(cout_save);<sp/>}</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/>auto<sp/>on(events::run_begin<sp/>run)<sp/>{</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/>::boost::ut::detail::cfg::parse_arg_with_fallback(run.argc,<sp/>run.argv);</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(detail::cfg::show_reporters)<sp/>{</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;available<sp/>reporter:\n&quot;;</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>console<sp/>(default)\n&quot;;</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>junit&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::exit(0);</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(detail::cfg::use_reporter.starts_with(&quot;junit&quot;))<sp/>{</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>report_type_<sp/>=<sp/>JUNIT;</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>report_type_<sp/>=<sp/>CONSOLE;</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!detail::cfg::use_colour.starts_with(&quot;yes&quot;))<sp/>{</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color_<sp/>=<sp/>{&quot;&quot;,<sp/>&quot;&quot;,<sp/>&quot;&quot;,<sp/>&quot;&quot;};</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!detail::cfg::show_tests<sp/>&amp;&amp;<sp/>!detail::cfg::show_test_names)<sp/>{</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout.rdbuf(ss_out_.rdbuf());</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/>auto<sp/>on(events::suite_begin<sp/>suite)<sp/>-&gt;<sp/>void<sp/>{</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(active_test_.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pop_scope(active_test_.top());</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/>active_suite_<sp/>=<sp/>suite.name;</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/>active_scope_<sp/>=<sp/>&amp;results_[active_suite_];</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/>auto<sp/>on(events::suite_end)<sp/>-&gt;<sp/>void<sp/>{</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(active_test_.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pop_scope(active_test_.top());</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/>active_suite_<sp/>=<sp/>&quot;global&quot;;</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/>active_scope_<sp/>=<sp/>&amp;results_[active_suite_];</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/>auto<sp/>on(events::test_begin<sp/>test_event)<sp/>-&gt;<sp/>void<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>starts<sp/>outermost<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/>check_for_scope(test_event.name);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(report_type_<sp/>==<sp/>CONSOLE)<sp/>{</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ss_out_<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ss_out_<sp/>&lt;&lt;<sp/>std::string((2<sp/>*<sp/>active_test_.size())<sp/>-<sp/>2,<sp/>&apos;<sp/>&apos;);</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ss_out_<sp/>&lt;&lt;<sp/>&quot;Running<sp/>&quot;<sp/>&lt;&lt;<sp/>test_event.type<sp/>&lt;&lt;<sp/>&quot;<sp/>\&quot;&quot;<sp/>&lt;&lt;<sp/>test_event.name</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;\&quot;...<sp/>&quot;;</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/>auto<sp/>on(events::test_end<sp/>test_event)<sp/>-&gt;<sp/>void<sp/>{</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(active_scope_-&gt;fails<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reset_printer();</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>active_scope_-&gt;report_string<sp/>=<sp/>ss_out_.str();</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>active_scope_-&gt;passed<sp/>+=<sp/>1LU;</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(report_type_<sp/>==<sp/>CONSOLE)<sp/>{</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(detail::cfg::show_successful_tests)<sp/>{</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!active_scope_-&gt;nested_tests-&gt;empty())<sp/>{</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss_out_<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss_out_<sp/>&lt;&lt;<sp/>std::string((2<sp/>*<sp/>active_test_.size())<sp/>-<sp/>2,<sp/>&apos;<sp/>&apos;);</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss_out_<sp/>&lt;&lt;<sp/>&quot;Running<sp/>test<sp/>\&quot;&quot;<sp/>&lt;&lt;<sp/>test_event.name<sp/>&lt;&lt;<sp/>&quot;\&quot;<sp/>-<sp/>&quot;;</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss_out_<sp/>&lt;&lt;<sp/>color_.pass<sp/>&lt;&lt;<sp/>&quot;PASSED&quot;<sp/>&lt;&lt;<sp/>color_.none;</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_duration(ss_out_);</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lcout_<sp/>&lt;&lt;<sp/>ss_out_.str();</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reset_printer();</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/>pop_scope(test_event.name);</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/>auto<sp/>on(events::test_run<sp/>test_event)<sp/>-&gt;<sp/>void<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>starts<sp/>nested<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/>on(events::test_begin{.type<sp/>=<sp/>test_event.type,<sp/>.name<sp/>=<sp/>test_event.name});</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/>auto<sp/>on(events::test_finish<sp/>test_event)<sp/>-&gt;<sp/>void<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>finishes<sp/>nested<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/>on(events::test_end{.type<sp/>=<sp/>test_event.type,<sp/>.name<sp/>=<sp/>test_event.name});</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/>auto<sp/>on(events::test_skip<sp/>test_event)<sp/>-&gt;<sp/>void<sp/>{</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/>ss_out_.clear();</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!active_scope_-&gt;nested_tests-&gt;contains(std::string(test_event.name)))<sp/>{</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_for_scope(test_event.name);</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>active_scope_-&gt;status<sp/>=<sp/>&quot;SKIPPED&quot;;</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>active_scope_-&gt;skipped<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(report_type_<sp/>==<sp/>CONSOLE)<sp/>{</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lcout_<sp/>&lt;&lt;<sp/>&apos;\n&apos;<sp/>&lt;&lt;<sp/>std::string((2<sp/>*<sp/>active_test_.size())<sp/>-<sp/>2,<sp/>&apos;<sp/>&apos;);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lcout_<sp/>&lt;&lt;<sp/>&quot;Running<sp/>\&quot;&quot;<sp/>&lt;&lt;<sp/>test_event.name<sp/>&lt;&lt;<sp/>&quot;\&quot;...<sp/>&quot;;</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lcout_<sp/>&lt;&lt;<sp/>color_.skip<sp/>&lt;&lt;<sp/>&quot;SKIPPED&quot;<sp/>&lt;&lt;<sp/>color_.none<sp/>&lt;&lt;<sp/>&apos;\n&apos;;</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reset_printer();</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pop_scope(test_event.name);</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>TMsg&gt;</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/>auto<sp/>on(events::log&lt;TMsg&gt;<sp/>log)<sp/>-&gt;<sp/>void<sp/>{</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/>ss_out_<sp/>&lt;&lt;<sp/>log.msg;</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(report_type_<sp/>==<sp/>CONSOLE)<sp/>{</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lcout_<sp/>&lt;&lt;<sp/>log.msg;</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/>auto<sp/>on(events::exception<sp/>exception)<sp/>-&gt;<sp/>void<sp/>{</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/>active_scope_-&gt;fails++;</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!active_test_.empty())<sp/>{</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>active_scope_-&gt;report_string<sp/>+=<sp/>color_.fail;</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>active_scope_-&gt;report_string<sp/>+=<sp/>&quot;Unexpected<sp/>exception<sp/>with<sp/>message:\n&quot;;</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>active_scope_-&gt;report_string<sp/>+=<sp/>exception.what();</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>active_scope_-&gt;report_string<sp/>+=<sp/>color_.none;</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(report_type_<sp/>==<sp/>CONSOLE)<sp/>{</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lcout_<sp/>&lt;&lt;<sp/>std::string((2<sp/>*<sp/>active_test_.size())<sp/>-<sp/>2,<sp/>&apos;<sp/>&apos;);</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lcout_<sp/>&lt;&lt;<sp/>&quot;Running<sp/>test<sp/>\&quot;&quot;<sp/>&lt;&lt;<sp/>active_test_.top()<sp/>&lt;&lt;<sp/>&quot;\&quot;...<sp/>&quot;;</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lcout_<sp/>&lt;&lt;<sp/>color_.fail<sp/>&lt;&lt;<sp/>&quot;FAILED&quot;<sp/>&lt;&lt;<sp/>color_.none;</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>print_duration(lcout_);</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lcout_<sp/>&lt;&lt;<sp/>&apos;\n&apos;;</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lcout_<sp/>&lt;&lt;<sp/>active_scope_-&gt;report_string<sp/>&lt;&lt;<sp/>&apos;\n&apos;;</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(detail::cfg::abort_early<sp/>||</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>active_scope_-&gt;fails<sp/>&gt;=<sp/>detail::cfg::abort_after_n_failures)<sp/>{</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;early<sp/>abort<sp/>for<sp/>test<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>active_test_.top()<sp/>&lt;&lt;<sp/>&quot;after<sp/>&quot;;</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>active_scope_-&gt;fails<sp/>&lt;&lt;<sp/>&quot;<sp/>failures<sp/>total.&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::exit(-1);</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>TExpr&gt;</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/>auto<sp/>on(events::assertion_pass&lt;TExpr&gt;)<sp/>-&gt;<sp/>void<sp/>{</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/>active_scope_-&gt;assertions++;</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>TExpr&gt;</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/>auto<sp/>on(events::assertion_fail&lt;TExpr&gt;<sp/>assertion)<sp/>-&gt;<sp/>void<sp/>{</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/>TPrinter<sp/>ss{};</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>ss_out_.str();</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(report_type_<sp/>==<sp/>CONSOLE)<sp/>{</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>color_.fail<sp/>&lt;&lt;<sp/>&quot;FAILED\n&quot;<sp/>&lt;&lt;<sp/>color_.none;</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>print_duration(ss);</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>&quot;in:<sp/>&quot;<sp/>&lt;&lt;<sp/>assertion.location.file_name()<sp/>&lt;&lt;<sp/>&apos;:&apos;</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>assertion.location.line();</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>color_.fail<sp/>&lt;&lt;<sp/>&quot;<sp/>-<sp/>test<sp/>condition:<sp/>&quot;;</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>&quot;<sp/>[&quot;<sp/>&lt;&lt;<sp/>std::boolalpha<sp/>&lt;&lt;<sp/>assertion.expr;</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>color_.fail<sp/>&lt;&lt;<sp/>&apos;]&apos;<sp/>&lt;&lt;<sp/>color_.none;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/>active_scope_-&gt;report_string<sp/>+=<sp/>ss.str();</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/>active_scope_-&gt;fails++;</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/>reset_printer();</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(report_type_<sp/>==<sp/>CONSOLE)<sp/>{</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lcout_<sp/>&lt;&lt;<sp/>active_scope_-&gt;report_string<sp/>&lt;&lt;<sp/>&quot;\n\n&quot;;</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(detail::cfg::abort_early<sp/>||</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>active_scope_-&gt;fails<sp/>&gt;=<sp/>detail::cfg::abort_after_n_failures)<sp/>{</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;early<sp/>abort<sp/>for<sp/>test<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>active_test_.top()<sp/>&lt;&lt;<sp/>&quot;after<sp/>&quot;;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>active_scope_-&gt;fails<sp/>&lt;&lt;<sp/>&quot;<sp/>failures<sp/>total.&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::exit(-1);</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/>auto<sp/>on(const<sp/>events::fatal_assertion&amp;)<sp/>-&gt;<sp/>void<sp/>{<sp/>active_scope_-&gt;fails++;<sp/>}</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/>auto<sp/>on(events::summary)<sp/>-&gt;<sp/>void<sp/>{</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout.flush();</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout.rdbuf(cout_save);</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>maybe_of;</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(detail::cfg::output_filename<sp/>!=<sp/>&quot;&quot;)<sp/>{</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maybe_of<sp/>=<sp/>std::ofstream(detail::cfg::output_filename);</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(report_type_<sp/>==<sp/>JUNIT)<sp/>{</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>print_junit_summary(detail::cfg::output_filename<sp/>!=<sp/>&quot;&quot;<sp/>?<sp/>maybe_of</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>std::cout);</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/>print_console_summary(</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::cfg::output_filename<sp/>!=<sp/>&quot;&quot;<sp/>?<sp/>maybe_of<sp/>:<sp/>std::cout,</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::cfg::output_filename<sp/>!=<sp/>&quot;&quot;<sp/>?<sp/>maybe_of<sp/>:<sp/>std::cerr);</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/>protected:</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/>void<sp/>print_duration(auto&amp;<sp/>printer)<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(detail::cfg::show_duration)<sp/>{</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::int64_t<sp/>time_ms<sp/>=</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>active_scope_-&gt;run_stop<sp/>-<sp/>active_scope_-&gt;run_start)</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.count();</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rounded<sp/>to<sp/>nearest<sp/>ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>time_s<sp/>=<sp/>static_cast&lt;double&gt;(time_ms)<sp/>/<sp/>1000.0;</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printer<sp/>&lt;&lt;<sp/>&quot;<sp/>after<sp/>&quot;<sp/>&lt;&lt;<sp/>time_s<sp/>&lt;&lt;<sp/>&quot;<sp/>seconds&quot;;</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/>void<sp/>print_console_summary(std::ostream&amp;<sp/>out_stream,</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>err_stream)<sp/>{</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(const<sp/>auto&amp;<sp/>[suite_name,<sp/>suite_result]<sp/>:<sp/>results_)<sp/>{</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(suite_result.fails)<sp/>{</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err_stream</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;\n========================================================&quot;</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;=======================\n&quot;</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;Suite<sp/>&quot;<sp/>&lt;&lt;<sp/>suite_name<sp/>&lt;&lt;<sp/>&apos;\n&apos;<sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;tests:<sp/><sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>(suite_result.n_tests)<sp/>&lt;&lt;<sp/>&quot;<sp/>|<sp/>&quot;<sp/>&lt;&lt;<sp/>color_.fail</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>suite_result.fails<sp/>&lt;&lt;<sp/>&quot;<sp/>failed&quot;<sp/>&lt;&lt;<sp/>color_.none<sp/>&lt;&lt;<sp/>&apos;\n&apos;</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;asserts:<sp/>&quot;<sp/>&lt;&lt;<sp/>(suite_result.assertions)<sp/>&lt;&lt;<sp/>&quot;<sp/>|<sp/>&quot;</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>suite_result.passed<sp/>&lt;&lt;<sp/>&quot;<sp/>passed&quot;</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>|<sp/>&quot;<sp/>&lt;&lt;<sp/>color_.fail<sp/>&lt;&lt;<sp/>suite_result.fails<sp/>&lt;&lt;<sp/>&quot;<sp/>failed&quot;</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>color_.none<sp/>&lt;&lt;<sp/>&apos;\n&apos;;</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_stream<sp/>&lt;&lt;<sp/>color_.pass<sp/>&lt;&lt;<sp/>&quot;Suite<sp/>&apos;&quot;<sp/>&lt;&lt;<sp/>suite_name</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;&apos;:<sp/>all<sp/>tests<sp/>passed&quot;<sp/>&lt;&lt;<sp/>color_.none<sp/>&lt;&lt;<sp/>&quot;<sp/>(&quot;</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>suite_result.assertions<sp/>&lt;&lt;<sp/>&quot;<sp/>asserts<sp/>in<sp/>&quot;</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>suite_result.n_tests<sp/>&lt;&lt;<sp/>&quot;<sp/>tests)\n&quot;;</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(suite_result.skipped)<sp/>{</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>suite_result.skipped<sp/>&lt;&lt;<sp/>&quot;<sp/>tests<sp/>skipped\n&quot;;</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"></highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout.flush();</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/>void<sp/>print_junit_summary(std::ostream&amp;<sp/>stream)<sp/>{</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>aggregate<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/>size_t<sp/>n_tests<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/>size_t<sp/>n_fails<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>total_time<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>suite_time<sp/>=<sp/>[](auto<sp/>const&amp;<sp/>suite_result)<sp/>{</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::int64_t<sp/>time_ms<sp/>=</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>suite_result.run_stop<sp/>-<sp/>suite_result.run_start)</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.count();</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>static_cast&lt;double&gt;(time_ms)<sp/>/<sp/>1000.0;</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(const<sp/>auto&amp;<sp/>[suite_name,<sp/>suite_result]<sp/>:<sp/>results_)<sp/>{</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n_tests<sp/>+=<sp/>suite_result.assertions;</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n_fails<sp/>+=<sp/>suite_result.fails;</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>total_time<sp/>+=<sp/>suite_time(suite_result);</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"></highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mock<sp/>junit<sp/>output:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;&lt;?xml<sp/>version=\&quot;1.0\&quot;<sp/>encoding=\&quot;UTF-8\&quot;?&gt;\n&quot;;</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;&lt;testsuites&quot;;</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;<sp/>name=\&quot;all\&quot;&quot;;</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;<sp/>tests=\&quot;&quot;<sp/>&lt;&lt;<sp/>n_tests<sp/>&lt;&lt;<sp/>&apos;\&quot;&apos;;</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;<sp/>failures=\&quot;&quot;<sp/>&lt;&lt;<sp/>n_fails<sp/>&lt;&lt;<sp/>&apos;\&quot;&apos;;</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;<sp/>time=\&quot;&quot;<sp/>&lt;&lt;<sp/>total_time<sp/>&lt;&lt;<sp/>&apos;\&quot;&apos;;</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;&gt;\n&quot;;</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(const<sp/>auto&amp;<sp/>[suite_name,<sp/>suite_result]<sp/>:<sp/>results_)<sp/>{</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;&lt;testsuite&quot;;</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;<sp/>classname=\&quot;&quot;<sp/>&lt;&lt;<sp/>detail::cfg::executable_name<sp/>&lt;&lt;<sp/>&apos;\&quot;&apos;;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;<sp/>name=\&quot;&quot;<sp/>&lt;&lt;<sp/>suite_name<sp/>&lt;&lt;<sp/>&apos;\&quot;&apos;;</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;<sp/>tests=\&quot;&quot;<sp/>&lt;&lt;<sp/>suite_result.assertions<sp/>&lt;&lt;<sp/>&apos;\&quot;&apos;;</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;<sp/>errors=\&quot;&quot;<sp/>&lt;&lt;<sp/>suite_result.fails<sp/>&lt;&lt;<sp/>&apos;\&quot;&apos;;</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;<sp/>failures=\&quot;&quot;<sp/>&lt;&lt;<sp/>suite_result.fails<sp/>&lt;&lt;<sp/>&apos;\&quot;&apos;;</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;<sp/>skipped=\&quot;&quot;<sp/>&lt;&lt;<sp/>suite_result.skipped<sp/>&lt;&lt;<sp/>&apos;\&quot;&apos;;</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;<sp/>time=\&quot;&quot;<sp/>&lt;&lt;<sp/>suite_time(suite_result)<sp/>&lt;&lt;<sp/>&apos;\&quot;&apos;;</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;<sp/>version=\&quot;&quot;<sp/>&lt;&lt;<sp/>BOOST_UT_VERSION<sp/>&lt;&lt;<sp/>&quot;\&quot;&gt;\n&quot;;</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>print_result(stream,<sp/>suite_name,<sp/>&quot;<sp/>&quot;,<sp/>suite_result);</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;&lt;/testsuite&gt;\n&quot;;</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream.flush();</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;&lt;/testsuites&gt;&quot;;</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/>void<sp/>print_result(std::ostream&amp;<sp/>stream,<sp/>const<sp/>std::string&amp;<sp/>suite_name,</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::string&amp;<sp/>indent,<sp/>const<sp/>test_result&amp;<sp/>parent)<sp/>{</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(const<sp/>auto&amp;<sp/>[name,<sp/>result]<sp/>:<sp/>*parent.nested_tests)<sp/>{</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>indent;</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;&lt;testcase<sp/>classname=\&quot;&quot;<sp/>&lt;&lt;<sp/>result.suite_name<sp/>&lt;&lt;<sp/>&apos;\&quot;&apos;;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;<sp/>name=\&quot;&quot;<sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/>&apos;\&quot;&apos;;</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;<sp/>tests=\&quot;&quot;<sp/>&lt;&lt;<sp/>result.assertions<sp/>&lt;&lt;<sp/>&apos;\&quot;&apos;;</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;<sp/>errors=\&quot;&quot;<sp/>&lt;&lt;<sp/>result.fails<sp/>&lt;&lt;<sp/>&apos;\&quot;&apos;;</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;<sp/>failures=\&quot;&quot;<sp/>&lt;&lt;<sp/>result.fails<sp/>&lt;&lt;<sp/>&apos;\&quot;&apos;;</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;<sp/>skipped=\&quot;&quot;<sp/>&lt;&lt;<sp/>result.skipped<sp/>&lt;&lt;<sp/>&apos;\&quot;&apos;;</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::int64_t<sp/>time_ms<sp/>=</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.run_stop<sp/>-<sp/>result.run_start)</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.count();</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;<sp/>time=\&quot;&quot;<sp/>&lt;&lt;<sp/>(static_cast&lt;double&gt;(time_ms)<sp/>/<sp/>1000.0)<sp/>&lt;&lt;<sp/>&quot;\&quot;&quot;;</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;<sp/>status=\&quot;&quot;<sp/>&lt;&lt;<sp/>result.status<sp/>&lt;&lt;<sp/>&apos;\&quot;&apos;;</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(result.report_string.empty()<sp/>&amp;&amp;<sp/>result.nested_tests-&gt;empty())<sp/>{</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;<sp/>/&gt;\n&quot;;</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(!result.nested_tests-&gt;empty())<sp/>{</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;<sp/>/&gt;\n&quot;;</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_result(stream,<sp/>suite_name,<sp/>indent<sp/>+<sp/>&quot;<sp/><sp/>&quot;,<sp/>result);</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>indent<sp/>&lt;&lt;<sp/>&quot;&lt;/testcase&gt;\n&quot;;</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(!result.report_string.empty())<sp/>{</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;&gt;\n&quot;;</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>indent<sp/>&lt;&lt;<sp/>indent<sp/>&lt;&lt;<sp/>&quot;&lt;system-out&gt;\n&quot;;</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>result.report_string<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>indent<sp/>&lt;&lt;<sp/>indent<sp/>&lt;&lt;<sp/>&quot;&lt;/system-out&gt;\n&quot;;</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>indent<sp/>&lt;&lt;<sp/>&quot;&lt;/testcase&gt;\n&quot;;</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1988"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"></highlight></codeline>
<codeline lineno="1990"><highlight class="normal">struct<sp/>options<sp/>{</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/>std::string_view<sp/>filter{};</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string_view&gt;<sp/>tag{};</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/>ut::colors<sp/>colors{};</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/>bool<sp/>dry_run{};</highlight></codeline>
<codeline lineno="1995"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"></highlight></codeline>
<codeline lineno="1997"><highlight class="normal">struct<sp/>run_cfg<sp/>{</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/>bool<sp/>report_errors{false};</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/>int<sp/>argc{0};</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/>const<sp/>char**<sp/>argv{nullptr};</highlight></codeline>
<codeline lineno="2001"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal">template<sp/>&lt;class<sp/>TReporter<sp/>=<sp/>reporter&lt;printer&gt;,<sp/>auto<sp/>MaxPathSize<sp/>=<sp/>16&gt;</highlight></codeline>
<codeline lineno="2004"><highlight class="normal">class<sp/>runner<sp/>{</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/>class<sp/>filter<sp/>{</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>auto<sp/>delim<sp/>=<sp/>&quot;.&quot;;</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/>public:</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="comment">/*explicit(false)*/</highlight><highlight class="normal"><sp/>filter(std::string_view<sp/>_filter<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>path_{utility::split(_filter,<sp/>delim)}<sp/>{}</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"></highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>TPath&gt;</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>operator()(const<sp/>std::size_t<sp/>level,<sp/>const<sp/>TPath&amp;<sp/>path)<sp/>const</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>bool<sp/>{</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>i<sp/>=<sp/>0u;<sp/>i<sp/>&lt;<sp/>math::min_value(level<sp/>+<sp/>1,<sp/>std::size(path_));<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(not<sp/>utility::is_match(path[i],<sp/>path_[i]))<sp/>{</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"></highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/>private:</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string_view&gt;<sp/>path_{};</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"></highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/>constexpr<sp/>runner()<sp/>=<sp/>default;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/>constexpr<sp/>runner(TReporter<sp/>reporter,<sp/>std::size_t<sp/>suites_size)</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>reporter_{std::move(reporter)},<sp/>suites_(suites_size)<sp/>{}</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/>~runner()<sp/>{</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>should_run<sp/>=<sp/>not<sp/>run_;</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(should_run)<sp/>{</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;void&gt;(run());</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(not<sp/>dry_run_)<sp/>{</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>report_summary();</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(should_run<sp/>and<sp/>fails_)<sp/>{</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::exit(-1);</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/>auto<sp/>operator=(const<sp/>options&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/>filter_<sp/>=<sp/>options.filter;</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/>tag_<sp/>=<sp/>options.tag;</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/>dry_run_<sp/>=<sp/>options.dry_run;</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/>reporter_<sp/>=<sp/>{options.colors};</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"></highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>TSuite&gt;</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/>auto<sp/>on(events::suite&lt;TSuite&gt;<sp/>suite)<sp/>{</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/>suites_.emplace_back(suite.run,<sp/>suite.name);</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"></highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/>auto<sp/>on(events::test&lt;Ts...&gt;<sp/>test)<sp/>{</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/>path_[level_]<sp/>=<sp/>test.name;</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(detail::cfg::list_tags)<sp/>{</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::for_each(test.tag.cbegin(),<sp/>test.tag.cend(),<sp/>[](const<sp/>auto&amp;<sp/>tag)<sp/>{</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;tag:<sp/>&quot;<sp/>&lt;&lt;<sp/>tag<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>execute<sp/>=<sp/>std::empty(test.tag);</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(const<sp/>auto&amp;<sp/>tag_element<sp/>:<sp/>test.tag)<sp/>{</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(utility::is_match(tag_element,<sp/>&quot;skip&quot;)<sp/>&amp;&amp;<sp/>!detail::cfg::show_tests<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!detail::cfg::show_test_names)<sp/>{</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on(events::skip&lt;&gt;{.type<sp/>=<sp/>test.type,<sp/>.name<sp/>=<sp/>test.name});</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"></highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(const<sp/>auto&amp;<sp/>ftag<sp/>:<sp/>tag_)<sp/>{</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(utility::is_match(tag_element,<sp/>ftag))<sp/>{</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>execute<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!detail::cfg::query_pattern.empty())<sp/>{</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>static<sp/>auto<sp/>regex<sp/>=<sp/>detail::cfg::query_regex_pattern;</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>matches<sp/>=<sp/>utility::regex_match(test.name.data(),<sp/>regex.c_str());</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(const<sp/>auto&amp;<sp/>tag2<sp/>:<sp/>test.tag)<sp/>{</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matches<sp/>|=<sp/>utility::regex_match(tag2.data(),<sp/>regex.c_str());</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(matches)<sp/>{</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>execute<sp/>=<sp/>!detail::cfg::invert_query_pattern;</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>execute<sp/>=<sp/>detail::cfg::invert_query_pattern;</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"></highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(detail::cfg::show_tests<sp/>||<sp/>detail::cfg::show_test_names)<sp/>{</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!detail::cfg::show_test_names)<sp/>{</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;matching<sp/>test:<sp/>&quot;;</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>test.name<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(not<sp/>execute)<sp/>{</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>on(events::skip&lt;&gt;{.type<sp/>=<sp/>test.type,<sp/>.name<sp/>=<sp/>test.name});</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"></highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(filter_(level_,<sp/>path_))<sp/>{</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(not<sp/>level_++)<sp/>{</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reporter_.on(events::test_begin{</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/>=<sp/>test.type,<sp/>.name<sp/>=<sp/>test.name,<sp/>.location<sp/>=<sp/>test.location});</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reporter_.on(events::test_run{.type<sp/>=<sp/>test.type,<sp/>.name<sp/>=<sp/>test.name});</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"></highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(dry_run_)<sp/>{</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>i<sp/>=<sp/>0u;<sp/>i<sp/>&lt;<sp/>level_;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(i<sp/>?<sp/>&quot;.&quot;<sp/>:<sp/>&quot;&quot;)<sp/>&lt;&lt;<sp/>path_[i];</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&apos;\n&apos;;</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"></highlight></codeline>
<codeline lineno="2128"><highlight class="normal">#if<sp/>defined(__cpp_exceptions)</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>try<sp/>{</highlight></codeline>
<codeline lineno="2130"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test();</highlight></codeline>
<codeline lineno="2132"><highlight class="normal">#if<sp/>defined(__cpp_exceptions)</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>catch<sp/>(const<sp/>events::fatal_assertion&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>catch<sp/>(const<sp/>std::exception&amp;<sp/>exception)<sp/>{</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++fails_;</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reporter_.on(events::exception{exception.what()});</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>catch<sp/>(...)<sp/>{</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++fails_;</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reporter_.on(events::exception{&quot;Unknown<sp/>exception&quot;});</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2141"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(not--level_)<sp/>{</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reporter_.on(events::test_end{.type<sp/>=<sp/>test.type,<sp/>.name<sp/>=<sp/>test.name});</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>N.B.<sp/>prev.<sp/>only<sp/>root-level<sp/>tests<sp/>were<sp/>signalled<sp/>on<sp/>finish</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr<sp/>(requires<sp/>{</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reporter_.on(events::test_finish{.type<sp/>=<sp/>test.type,</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.name<sp/>=<sp/>test.name});</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})<sp/>{</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reporter_.on(</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>events::test_finish{.type<sp/>=<sp/>test.type,<sp/>.name<sp/>=<sp/>test.name});</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/>auto<sp/>on(events::skip&lt;Ts...&gt;<sp/>test)<sp/>{</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/>reporter_.on(events::test_skip{.type<sp/>=<sp/>test.type,<sp/>.name<sp/>=<sp/>test.name});</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"></highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>TExpr&gt;</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/>auto<sp/>on(events::assertion&lt;TExpr&gt;<sp/>assertion)<sp/>-&gt;<sp/>bool<sp/>{</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(dry_run_)<sp/>{</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"></highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(static_cast&lt;bool&gt;(assertion.expr))<sp/>{</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reporter_.on(events::assertion_pass&lt;TExpr&gt;{</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.expr<sp/>=<sp/>assertion.expr,<sp/>.location<sp/>=<sp/>assertion.location});</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/>++fails_;</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/>reporter_.on(events::assertion_fail&lt;TExpr&gt;{.expr<sp/>=<sp/>assertion.expr,</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.location<sp/>=<sp/>assertion.location});</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"></highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/>auto<sp/>on(events::fatal_assertion<sp/>fatal_assertion)<sp/>{</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/>reporter_.on(fatal_assertion);</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"></highlight></codeline>
<codeline lineno="2183"><highlight class="normal">#if<sp/>defined(__cpp_exceptions)</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(not<sp/>level_)<sp/>{</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>report_summary();</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/>throw<sp/>fatal_assertion;</highlight></codeline>
<codeline lineno="2188"><highlight class="normal">#else</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(level_)<sp/>{</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reporter_.on(events::test_end{});</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/>report_summary();</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/>std::abort();</highlight></codeline>
<codeline lineno="2194"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"></highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>TMsg&gt;</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/>auto<sp/>on(events::log&lt;TMsg&gt;<sp/>l)<sp/>{</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/>reporter_.on(l);</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/>auto<sp/>run(run_cfg<sp/>rc<sp/>=<sp/>{})<sp/>-&gt;<sp/>bool<sp/>{</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/>run_<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/>reporter_.on(events::run_begin{.argc<sp/>=<sp/>rc.argc,<sp/>.argv<sp/>=<sp/>rc.argv});</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(const<sp/>auto&amp;<sp/>[suite,<sp/>suite_name]<sp/>:<sp/>suites_)<sp/>{</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>reporter<sp/>in/out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr<sp/>(requires<sp/>{<sp/>reporter_.on(events::suite_begin{});<sp/>})<sp/>{</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reporter_.on(events::suite_begin{.type<sp/>=<sp/>&quot;suite&quot;,<sp/>.name<sp/>=<sp/>suite_name});</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>suite();</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr<sp/>(requires<sp/>{<sp/>reporter_.on(events::suite_end{});<sp/>})<sp/>{</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reporter_.on(events::suite_end{.type<sp/>=<sp/>&quot;suite&quot;,<sp/>.name<sp/>=<sp/>suite_name});</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/>suites_.clear();</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"></highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(rc.report_errors)<sp/>{</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>report_summary();</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>fails_<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/>auto<sp/>report_summary()<sp/>-&gt;<sp/>void<sp/>{</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(static<sp/>auto<sp/>once<sp/>=<sp/>true;<sp/>once)<sp/>{</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>once<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reporter_.on(events::summary{});</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/>protected:</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/>TReporter<sp/>reporter_{};</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/>std::vector&lt;std::pair&lt;void<sp/>(*)(),<sp/>std::string_view&gt;&gt;<sp/>suites_{};</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/>std::size_t<sp/>level_{};</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/>bool<sp/>run_{};</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/>std::size_t<sp/>fails_{};</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/>std::array&lt;std::string_view,<sp/>MaxPathSize&gt;<sp/>path_{};</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/>filter<sp/>filter_{};</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string_view&gt;<sp/>tag_{};</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/>bool<sp/>dry_run_{};</highlight></codeline>
<codeline lineno="2241"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"></highlight></codeline>
<codeline lineno="2243"><highlight class="normal">struct<sp/>override<sp/>{};</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"></highlight></codeline>
<codeline lineno="2245"><highlight class="normal">template<sp/>&lt;class<sp/>=<sp/>override,<sp/>class...&gt;</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"></highlight><highlight class="comment">//[[maybe_unused]]<sp/>inline<sp/>auto<sp/>cfg<sp/>=<sp/>runner&lt;reporter&lt;printer&gt;&gt;{};//<sp/>alt<sp/>reporter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="normal">[[maybe_unused]]<sp/>inline<sp/>auto<sp/>cfg<sp/>=<sp/>runner&lt;reporter_junit&lt;printer&gt;&gt;{};</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"></highlight></codeline>
<codeline lineno="2249"><highlight class="normal">namespace<sp/>detail<sp/>{</highlight></codeline>
<codeline lineno="2250"><highlight class="normal">struct<sp/>tag<sp/>{</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string_view&gt;<sp/>name{};</highlight></codeline>
<codeline lineno="2252"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal">template<sp/>&lt;class...<sp/>Ts,<sp/>class<sp/>TEvent&gt;</highlight></codeline>
<codeline lineno="2255"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>decltype(auto)<sp/>on(TEvent&amp;&amp;<sp/>event)<sp/>{</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/>return<sp/>ut::cfg&lt;typename<sp/>type_traits::identity&lt;override,<sp/>Ts...&gt;::type&gt;.on(</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;TEvent&amp;&amp;&gt;(event));</highlight></codeline>
<codeline lineno="2258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal">template<sp/>&lt;class<sp/>Test&gt;</highlight></codeline>
<codeline lineno="2261"><highlight class="normal">struct<sp/>test_location<sp/>{</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/>constexpr<sp/>test_location(const<sp/>T&amp;<sp/>t,</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>reflection::source_location&amp;<sp/>sl<sp/>=</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reflection::source_location::current())</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>test{t},<sp/>location{sl}<sp/>{}</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/>Test<sp/>test{};</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/>reflection::source_location<sp/>location{};</highlight></codeline>
<codeline lineno="2270"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal">struct<sp/>test<sp/>{</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/>std::string_view<sp/>type{};</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/>std::string_view<sp/>name{};</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string_view&gt;<sp/>tag{};</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"></highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/>constexpr<sp/>auto<sp/>operator=(test_location&lt;void<sp/>(*)()&gt;<sp/>_test)<sp/>{</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/>on&lt;Ts...&gt;(events::test&lt;void<sp/>(*)()&gt;{.type<sp/>=<sp/>type,</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.name<sp/>=<sp/>std::string{name},</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.tag<sp/>=<sp/>tag,</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.location<sp/>=<sp/>_test.location,</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.arg<sp/>=<sp/>none{},</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.run<sp/>=<sp/>_test.test});</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_test.test;</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"></highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>Test&gt;</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/>requires<sp/>std::invocable&lt;Test&gt;<sp/>&amp;&amp;<sp/>(!std::convertible_to&lt;Test,<sp/>void<sp/>(*)()&gt;)</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/>constexpr<sp/>auto<sp/>operator=(Test<sp/>_test)<sp/>{</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/>on&lt;Test&gt;(events::test&lt;Test&gt;{.type<sp/>=<sp/>type,</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.name<sp/>=<sp/>std::string{name},</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.tag<sp/>=<sp/>tag,</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.location<sp/>=<sp/>{},</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.arg<sp/>=<sp/>none{},</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.run<sp/>=<sp/>static_cast&lt;Test&amp;&amp;&gt;(_test)});</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_test;</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/>constexpr<sp/>void<sp/>operator=(void<sp/>(*_test)(std::string_view,</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string_view))<sp/>const<sp/>{</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/>_test(type,<sp/>name);</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>Test&gt;</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/>requires<sp/>std::invocable&lt;Test,<sp/>std::string_view,<sp/>std::string_view&gt;<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!std::convertible_to&lt;Test,<sp/>void<sp/>(*)(std::string_view,</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string_view)&gt;)</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/>constexpr<sp/>auto<sp/>operator=(Test<sp/>_test)<sp/>{</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_test(type,<sp/>name);</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2312"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"></highlight></codeline>
<codeline lineno="2314"><highlight class="normal">struct<sp/>log<sp/>{</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/>struct<sp/>next<sp/>{</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>TMsg&gt;</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/>auto&amp;<sp/>operator&lt;&lt;(const<sp/>TMsg&amp;<sp/>msg)<sp/>{</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>on&lt;TMsg&gt;(events::log{&apos;<sp/>&apos;});</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>on&lt;TMsg&gt;(events::log{msg});</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"></highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>TMsg&gt;</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/>auto<sp/>operator&lt;&lt;(const<sp/>TMsg&amp;<sp/>msg)<sp/>-&gt;<sp/>next<sp/>{</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/>on&lt;TMsg&gt;(events::log{&apos;\n&apos;});</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/>on&lt;TMsg&gt;(events::log{msg});</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>next{};</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"></highlight></codeline>
<codeline lineno="2331"><highlight class="normal">#if<sp/>defined(BOOST_UT_HAS_FORMAT)</highlight></codeline>
<codeline lineno="2332"><highlight class="normal">#if<sp/>__cpp_lib_format<sp/>&gt;=<sp/>202207L</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/>void<sp/>operator()(std::format_string&lt;Args...&gt;<sp/>fmt,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/>on&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>events::log{std::vformat(fmt.get(),<sp/>std::make_format_args(args...))});</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2338"><highlight class="normal">#else</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/>void<sp/>operator()(std::string_view<sp/>fmt,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/>on&lt;std::string&gt;(</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>events::log{std::vformat(fmt,<sp/>std::make_format_args(args...))});</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2344"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="2345"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="2346"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"></highlight></codeline>
<codeline lineno="2348"><highlight class="normal">template<sp/>&lt;class<sp/>TExpr&gt;</highlight></codeline>
<codeline lineno="2349"><highlight class="normal">class<sp/>terse_<sp/>{</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/>constexpr<sp/>explicit<sp/>terse_(const<sp/>TExpr&amp;<sp/>expr)<sp/>:<sp/>expr_{expr}<sp/>{<sp/>cfg::wip<sp/>=<sp/>{};<sp/>}</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"></highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/>~terse_()<sp/>noexcept(false)<sp/>{</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(static<sp/>auto<sp/>once<sp/>=<sp/>true;<sp/>once<sp/>and<sp/>not<sp/>cfg::wip)<sp/>{</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>once<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"></highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/>cfg::wip<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"></highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/>void(detail::on&lt;TExpr&gt;(</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>events::assertion&lt;TExpr&gt;{.expr<sp/>=<sp/>expr_,<sp/>.location<sp/>=<sp/>cfg::location}));</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"></highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/>private:</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/>const<sp/>TExpr&amp;<sp/>expr_;</highlight></codeline>
<codeline lineno="2368"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"></highlight></codeline>
<codeline lineno="2370"><highlight class="normal">struct<sp/>that_<sp/>{</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/>struct<sp/>expr<sp/>{</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>type<sp/>=<sp/>expr;</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"></highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>explicit<sp/>expr(const<sp/>T&amp;<sp/>t)<sp/>:<sp/>t_{t}<sp/>{}</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"></highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator!()<sp/>const<sp/>{<sp/>return<sp/>not_{*this};<sp/>}</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"></highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator==(const<sp/>TRhs&amp;<sp/>rhs)<sp/>const<sp/>{</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>eq_{t_,<sp/>rhs};</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"></highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator!=(const<sp/>TRhs&amp;<sp/>rhs)<sp/>const<sp/>{</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>neq_{t_,<sp/>rhs};</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"></highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&gt;(const<sp/>TRhs&amp;<sp/>rhs)<sp/>const<sp/>{</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>gt_{t_,<sp/>rhs};</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"></highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&gt;=(const<sp/>TRhs&amp;<sp/>rhs)<sp/>const<sp/>{</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ge_{t_,<sp/>rhs};</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"></highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&lt;(const<sp/>TRhs&amp;<sp/>rhs)<sp/>const<sp/>{</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>lt_{t_,<sp/>rhs};</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"></highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&lt;=(const<sp/>TRhs&amp;<sp/>rhs)<sp/>const<sp/>{</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>le_{t_,<sp/>rhs};</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"></highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>constexpr<sp/>operator<sp/>bool()<sp/>const<sp/>{</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>static_cast&lt;bool&gt;(t_);</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>T<sp/>t_{};</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator%(const<sp/>T&amp;<sp/>t)<sp/>const<sp/>{</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>expr{t};</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2420"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"></highlight></codeline>
<codeline lineno="2422"><highlight class="normal">template<sp/>&lt;class<sp/>TExpr&gt;</highlight></codeline>
<codeline lineno="2423"><highlight class="normal">struct<sp/>fatal_<sp/>:<sp/>op<sp/>{</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/>using<sp/>type<sp/>=<sp/>fatal_;</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"></highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/>constexpr<sp/>explicit<sp/>fatal_(const<sp/>TExpr&amp;<sp/>expr)<sp/>:<sp/>expr_{expr}<sp/>{}</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"></highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/>constexpr<sp/>operator<sp/>bool()<sp/>const<sp/>{</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(static_cast&lt;bool&gt;(expr_))<sp/>{</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cfg::wip<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>void(on&lt;TExpr&gt;(</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>events::assertion&lt;TExpr&gt;{.expr<sp/>=<sp/>expr_,<sp/>.location<sp/>=<sp/>cfg::location}));</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>on&lt;TExpr&gt;(events::fatal_assertion{});</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>static_cast&lt;bool&gt;(expr_);</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"></highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/>constexpr<sp/>decltype(auto)<sp/>get()<sp/>const<sp/>{<sp/>return<sp/>expr_;<sp/>}</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"></highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/>TExpr<sp/>expr_{};</highlight></codeline>
<codeline lineno="2442"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"></highlight></codeline>
<codeline lineno="2444"><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="2445"><highlight class="normal">struct<sp/>expect_<sp/>{</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/>constexpr<sp/>explicit<sp/>expect_(bool<sp/>value)<sp/>:<sp/>value_{value}<sp/>{<sp/>cfg::wip<sp/>=<sp/>{};<sp/>}</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"></highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>TMsg&gt;</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/>auto&amp;<sp/>operator&lt;&lt;(const<sp/>TMsg&amp;<sp/>msg)<sp/>{</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(not<sp/>value_)<sp/>{</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>on&lt;T&gt;(events::log{&apos;<sp/>&apos;});</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr<sp/>(requires<sp/>{</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>requires<sp/>std::invocable&lt;TMsg&gt;<sp/>and</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>not<sp/>std::is_void_v&lt;</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::invoke_result_t&lt;TMsg&gt;&gt;;</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})<sp/>{</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on&lt;T&gt;(events::log{std::invoke(msg)});</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on&lt;T&gt;(events::log{msg});</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"></highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/>auto&amp;<sp/>operator&lt;&lt;(detail::fatal)<sp/>{</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(not<sp/>value_)<sp/>{</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>on&lt;T&gt;(events::fatal_assertion{});</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"></highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/>constexpr<sp/>operator<sp/>bool()<sp/>const<sp/>{<sp/>return<sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"></highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/>bool<sp/>value_{};</highlight></codeline>
<codeline lineno="2475"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2476"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2477"><highlight class="normal"></highlight></codeline>
<codeline lineno="2478"><highlight class="normal">namespace<sp/>literals<sp/>{</highlight></codeline>
<codeline lineno="2479"><highlight class="normal">[[nodiscard]]<sp/>inline<sp/>auto<sp/>operator&quot;&quot;_test(const<sp/>char*<sp/>name,<sp/>std::size_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/>return<sp/>detail::test{&quot;test&quot;,<sp/>std::string_view{name,<sp/>size}};</highlight></codeline>
<codeline lineno="2481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"></highlight></codeline>
<codeline lineno="2483"><highlight class="normal">template<sp/>&lt;char...<sp/>Cs&gt;</highlight></codeline>
<codeline lineno="2484"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_i()<sp/>{</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/>return<sp/>detail::integral_constant&lt;math::num&lt;int,<sp/>Cs...&gt;()&gt;{};</highlight></codeline>
<codeline lineno="2486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal">template<sp/>&lt;char...<sp/>Cs&gt;</highlight></codeline>
<codeline lineno="2489"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_s()<sp/>{</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/>return<sp/>detail::integral_constant&lt;math::num&lt;short,<sp/>Cs...&gt;()&gt;{};</highlight></codeline>
<codeline lineno="2491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"></highlight></codeline>
<codeline lineno="2493"><highlight class="normal">template<sp/>&lt;char...<sp/>Cs&gt;</highlight></codeline>
<codeline lineno="2494"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_c()<sp/>{</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/>return<sp/>detail::integral_constant&lt;math::num&lt;char,<sp/>Cs...&gt;()&gt;{};</highlight></codeline>
<codeline lineno="2496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"></highlight></codeline>
<codeline lineno="2498"><highlight class="normal">template<sp/>&lt;char...<sp/>Cs&gt;</highlight></codeline>
<codeline lineno="2499"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_sc()<sp/>{</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/>return<sp/>detail::integral_constant&lt;math::num&lt;signed<sp/>char,<sp/>Cs...&gt;()&gt;{};</highlight></codeline>
<codeline lineno="2501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"></highlight></codeline>
<codeline lineno="2503"><highlight class="normal">template<sp/>&lt;char...<sp/>Cs&gt;</highlight></codeline>
<codeline lineno="2504"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_l()<sp/>{</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/>return<sp/>detail::integral_constant&lt;math::num&lt;long,<sp/>Cs...&gt;()&gt;{};</highlight></codeline>
<codeline lineno="2506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"></highlight></codeline>
<codeline lineno="2508"><highlight class="normal">template<sp/>&lt;char...<sp/>Cs&gt;</highlight></codeline>
<codeline lineno="2509"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_ll()<sp/>{</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/>return<sp/>detail::integral_constant&lt;math::num&lt;long<sp/>long,<sp/>Cs...&gt;()&gt;{};</highlight></codeline>
<codeline lineno="2511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"></highlight></codeline>
<codeline lineno="2513"><highlight class="normal">template<sp/>&lt;char...<sp/>Cs&gt;</highlight></codeline>
<codeline lineno="2514"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_u()<sp/>{</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/>return<sp/>detail::integral_constant&lt;math::num&lt;unsigned,<sp/>Cs...&gt;()&gt;{};</highlight></codeline>
<codeline lineno="2516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"></highlight></codeline>
<codeline lineno="2518"><highlight class="normal">template<sp/>&lt;char...<sp/>Cs&gt;</highlight></codeline>
<codeline lineno="2519"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_uc()<sp/>{</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/>return<sp/>detail::integral_constant&lt;math::num&lt;unsigned<sp/>char,<sp/>Cs...&gt;()&gt;{};</highlight></codeline>
<codeline lineno="2521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"></highlight></codeline>
<codeline lineno="2523"><highlight class="normal">template<sp/>&lt;char...<sp/>Cs&gt;</highlight></codeline>
<codeline lineno="2524"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_us()<sp/>{</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/>return<sp/>detail::integral_constant&lt;math::num&lt;unsigned<sp/>short,<sp/>Cs...&gt;()&gt;{};</highlight></codeline>
<codeline lineno="2526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"></highlight></codeline>
<codeline lineno="2528"><highlight class="normal">template<sp/>&lt;char...<sp/>Cs&gt;</highlight></codeline>
<codeline lineno="2529"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_ul()<sp/>{</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/>return<sp/>detail::integral_constant&lt;math::num&lt;unsigned<sp/>long,<sp/>Cs...&gt;()&gt;{};</highlight></codeline>
<codeline lineno="2531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"></highlight></codeline>
<codeline lineno="2533"><highlight class="normal">template<sp/>&lt;char...<sp/>Cs&gt;</highlight></codeline>
<codeline lineno="2534"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_ull()<sp/>{</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/>return<sp/>detail::integral_constant&lt;math::num&lt;unsigned<sp/>long<sp/>long,<sp/>Cs...&gt;()&gt;{};</highlight></codeline>
<codeline lineno="2536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"></highlight></codeline>
<codeline lineno="2538"><highlight class="normal">template<sp/>&lt;char...<sp/>Cs&gt;</highlight></codeline>
<codeline lineno="2539"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_i8()<sp/>{</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/>return<sp/>detail::integral_constant&lt;math::num&lt;std::int8_t,<sp/>Cs...&gt;()&gt;{};</highlight></codeline>
<codeline lineno="2541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"></highlight></codeline>
<codeline lineno="2543"><highlight class="normal">template<sp/>&lt;char...<sp/>Cs&gt;</highlight></codeline>
<codeline lineno="2544"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_i16()<sp/>{</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/>return<sp/>detail::integral_constant&lt;math::num&lt;std::int16_t,<sp/>Cs...&gt;()&gt;{};</highlight></codeline>
<codeline lineno="2546"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"></highlight></codeline>
<codeline lineno="2548"><highlight class="normal">template<sp/>&lt;char...<sp/>Cs&gt;</highlight></codeline>
<codeline lineno="2549"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_i32()<sp/>{</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/>return<sp/>detail::integral_constant&lt;math::num&lt;std::int32_t,<sp/>Cs...&gt;()&gt;{};</highlight></codeline>
<codeline lineno="2551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"></highlight></codeline>
<codeline lineno="2553"><highlight class="normal">template<sp/>&lt;char...<sp/>Cs&gt;</highlight></codeline>
<codeline lineno="2554"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_i64()<sp/>{</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/>return<sp/>detail::integral_constant&lt;math::num&lt;std::int64_t,<sp/>Cs...&gt;()&gt;{};</highlight></codeline>
<codeline lineno="2556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"></highlight></codeline>
<codeline lineno="2558"><highlight class="normal">template<sp/>&lt;char...<sp/>Cs&gt;</highlight></codeline>
<codeline lineno="2559"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_u8()<sp/>{</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/>return<sp/>detail::integral_constant&lt;math::num&lt;std::uint8_t,<sp/>Cs...&gt;()&gt;{};</highlight></codeline>
<codeline lineno="2561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"></highlight></codeline>
<codeline lineno="2563"><highlight class="normal">template<sp/>&lt;char...<sp/>Cs&gt;</highlight></codeline>
<codeline lineno="2564"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_u16()<sp/>{</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/>return<sp/>detail::integral_constant&lt;math::num&lt;std::uint16_t,<sp/>Cs...&gt;()&gt;{};</highlight></codeline>
<codeline lineno="2566"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"></highlight></codeline>
<codeline lineno="2568"><highlight class="normal">template<sp/>&lt;char...<sp/>Cs&gt;</highlight></codeline>
<codeline lineno="2569"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_u32()<sp/>{</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/>return<sp/>detail::integral_constant&lt;math::num&lt;std::uint32_t,<sp/>Cs...&gt;()&gt;{};</highlight></codeline>
<codeline lineno="2571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"></highlight></codeline>
<codeline lineno="2573"><highlight class="normal">template<sp/>&lt;char...<sp/>Cs&gt;</highlight></codeline>
<codeline lineno="2574"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_u64()<sp/>{</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/>return<sp/>detail::integral_constant&lt;math::num&lt;std::uint64_t,<sp/>Cs...&gt;()&gt;{};</highlight></codeline>
<codeline lineno="2576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"></highlight></codeline>
<codeline lineno="2578"><highlight class="normal">template<sp/>&lt;char...<sp/>Cs&gt;</highlight></codeline>
<codeline lineno="2579"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_f()<sp/>{</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/>return<sp/>detail::floating_point_constant&lt;</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>float,<sp/>math::num&lt;unsigned<sp/>long,<sp/>Cs...&gt;(),</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>math::den&lt;unsigned<sp/>long,<sp/>Cs...&gt;(),</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>math::den_size&lt;unsigned<sp/>long,<sp/>Cs...&gt;()&gt;{};</highlight></codeline>
<codeline lineno="2584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"></highlight></codeline>
<codeline lineno="2586"><highlight class="normal">template<sp/>&lt;char...<sp/>Cs&gt;</highlight></codeline>
<codeline lineno="2587"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_d()<sp/>{</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/>return<sp/>detail::floating_point_constant&lt;</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>double,<sp/>math::num&lt;unsigned<sp/>long,<sp/>Cs...&gt;(),</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>math::den&lt;unsigned<sp/>long,<sp/>Cs...&gt;(),</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>math::den_size&lt;unsigned<sp/>long,<sp/>Cs...&gt;()&gt;{};</highlight></codeline>
<codeline lineno="2592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"></highlight></codeline>
<codeline lineno="2594"><highlight class="normal">template<sp/>&lt;char...<sp/>Cs&gt;</highlight></codeline>
<codeline lineno="2595"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&quot;&quot;_ld()<sp/>{</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/>return<sp/>detail::floating_point_constant&lt;</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>double,<sp/>math::num&lt;unsigned<sp/>long<sp/>long,<sp/>Cs...&gt;(),</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>math::den&lt;unsigned<sp/>long<sp/>long,<sp/>Cs...&gt;(),</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>math::den_size&lt;unsigned<sp/>long<sp/>long,<sp/>Cs...&gt;()&gt;{};</highlight></codeline>
<codeline lineno="2600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"></highlight></codeline>
<codeline lineno="2602"><highlight class="normal">constexpr<sp/>auto<sp/>operator&quot;&quot;_b(const<sp/>char*<sp/>name,<sp/>decltype(sizeof(&quot;&quot;))<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/>struct<sp/>named<sp/>:<sp/>std::string_view,<sp/>detail::op<sp/>{</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>value_type<sp/>=<sp/>bool;</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>constexpr<sp/>operator<sp/>value_type()<sp/>const<sp/>{<sp/>return<sp/>true;<sp/>}</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator==(const<sp/>named&amp;)<sp/>const<sp/>{<sp/>return<sp/>true;<sp/>}</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator==(const<sp/>bool<sp/>other)<sp/>const<sp/>{</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>other;</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/>return<sp/>named{{name,<sp/>size},<sp/>{}};</highlight></codeline>
<codeline lineno="2612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2613"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>literals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2614"><highlight class="normal"></highlight></codeline>
<codeline lineno="2615"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>get_ordinal_suffix(int<sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>https://stackoverflow.com/a/13627586</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/>const<sp/>auto<sp/>last_digit<sp/>=<sp/>number<sp/>%<sp/>10;</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/>const<sp/>auto<sp/>last_two_digits<sp/>=<sp/>number<sp/>%<sp/>100;</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/>if<sp/>(last_digit<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>last_two_digits<sp/>!=<sp/>11)<sp/>{</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>&quot;st&quot;;</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/>if<sp/>(last_digit<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>last_two_digits<sp/>!=<sp/>12)<sp/>{</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>&quot;nd&quot;;</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/>if<sp/>(last_digit<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>last_two_digits<sp/>!=<sp/>13)<sp/>{</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>&quot;rd&quot;;</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/>return<sp/>&quot;th&quot;;</highlight></codeline>
<codeline lineno="2629"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"></highlight></codeline>
<codeline lineno="2631"><highlight class="normal">template<sp/>&lt;class<sp/>TArg&gt;</highlight></codeline>
<codeline lineno="2632"><highlight class="normal">inline<sp/>std::string<sp/>format_test_parameter([[maybe_unused]]<sp/>const<sp/>TArg&amp;<sp/>arg,</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>int<sp/>counter)<sp/>{</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/>return<sp/>std::to_string(counter)<sp/>+<sp/>get_ordinal_suffix(counter)<sp/>+<sp/>&quot;<sp/>parameter&quot;;</highlight></codeline>
<codeline lineno="2635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"></highlight></codeline>
<codeline lineno="2637"><highlight class="normal">template<sp/>&lt;class<sp/>F&gt;</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/>requires(std::integral&lt;F&gt;<sp/>||<sp/>std::floating_point&lt;F&gt;)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!std::same_as&lt;F,<sp/>bool&gt;)</highlight></codeline>
<codeline lineno="2640"><highlight class="normal">inline<sp/>std::string</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/>format_test_parameter(const<sp/>F&amp;<sp/>arg,<sp/>[[maybe_unused]]<sp/>const<sp/>int<sp/>counter)<sp/>{</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/>oss<sp/>&lt;&lt;<sp/>arg;</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/>return<sp/>oss.str();</highlight></codeline>
<codeline lineno="2645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"></highlight></codeline>
<codeline lineno="2647"><highlight class="normal">inline<sp/>std::string<sp/>format_test_parameter(const<sp/>bool&amp;<sp/>arg,</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[[maybe_unused]]<sp/>const<sp/>int<sp/>counter)<sp/>{</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/>return<sp/>arg<sp/>?<sp/>&quot;true&quot;<sp/>:<sp/>&quot;false&quot;;</highlight></codeline>
<codeline lineno="2650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"></highlight></codeline>
<codeline lineno="2652"><highlight class="normal">namespace<sp/>operators<sp/>{</highlight></codeline>
<codeline lineno="2653"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator==(std::string_view<sp/>lhs,</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string_view<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/>return<sp/>detail::eq_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="2656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"></highlight></codeline>
<codeline lineno="2658"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator!=(std::string_view<sp/>lhs,</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string_view<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/>return<sp/>detail::neq_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="2661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"></highlight></codeline>
<codeline lineno="2663"><highlight class="normal">template<sp/>&lt;std::ranges::range<sp/>T&gt;</highlight></codeline>
<codeline lineno="2664"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator==(T&amp;&amp;<sp/>lhs,<sp/>T&amp;&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/>return<sp/>detail::eq_{static_cast&lt;T&amp;&amp;&gt;(lhs),<sp/>static_cast&lt;T&amp;&amp;&gt;(rhs)};</highlight></codeline>
<codeline lineno="2666"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"></highlight></codeline>
<codeline lineno="2668"><highlight class="normal">template<sp/>&lt;std::ranges::range<sp/>T&gt;</highlight></codeline>
<codeline lineno="2669"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator!=(T&amp;&amp;<sp/>lhs,<sp/>T&amp;&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/>return<sp/>detail::neq_{static_cast&lt;T&amp;&amp;&gt;(lhs),<sp/>static_cast&lt;T&amp;&amp;&gt;(rhs)};</highlight></codeline>
<codeline lineno="2671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"></highlight></codeline>
<codeline lineno="2673"><highlight class="normal">template<sp/>&lt;class<sp/>TLhs,<sp/>class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_op&lt;TLhs&gt;<sp/>||<sp/>type_traits::is_op&lt;TRhs&gt;</highlight></codeline>
<codeline lineno="2675"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator==(const<sp/>TLhs&amp;<sp/>lhs,<sp/>const<sp/>TRhs&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/>return<sp/>detail::eq_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="2677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"></highlight></codeline>
<codeline lineno="2679"><highlight class="normal">template<sp/>&lt;class<sp/>TLhs,<sp/>class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_op&lt;TLhs&gt;<sp/>||<sp/>type_traits::is_op&lt;TRhs&gt;</highlight></codeline>
<codeline lineno="2681"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator!=(const<sp/>TLhs&amp;<sp/>lhs,<sp/>const<sp/>TRhs&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/>return<sp/>detail::neq_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="2683"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"></highlight></codeline>
<codeline lineno="2685"><highlight class="normal">template<sp/>&lt;class<sp/>TLhs,<sp/>class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_op&lt;TLhs&gt;<sp/>||<sp/>type_traits::is_op&lt;TRhs&gt;</highlight></codeline>
<codeline lineno="2687"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&gt;(const<sp/>TLhs&amp;<sp/>lhs,<sp/>const<sp/>TRhs&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/>return<sp/>detail::gt_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="2689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"></highlight></codeline>
<codeline lineno="2691"><highlight class="normal">template<sp/>&lt;class<sp/>TLhs,<sp/>class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_op&lt;TLhs&gt;<sp/>||<sp/>type_traits::is_op&lt;TRhs&gt;</highlight></codeline>
<codeline lineno="2693"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&gt;=(const<sp/>TLhs&amp;<sp/>lhs,<sp/>const<sp/>TRhs&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/>return<sp/>detail::ge_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="2695"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"></highlight></codeline>
<codeline lineno="2697"><highlight class="normal">template<sp/>&lt;class<sp/>TLhs,<sp/>class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_op&lt;TLhs&gt;<sp/>||<sp/>type_traits::is_op&lt;TRhs&gt;</highlight></codeline>
<codeline lineno="2699"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&lt;(const<sp/>TLhs&amp;<sp/>lhs,<sp/>const<sp/>TRhs&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/>return<sp/>detail::lt_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="2701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"></highlight></codeline>
<codeline lineno="2703"><highlight class="normal">template<sp/>&lt;class<sp/>TLhs,<sp/>class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_op&lt;TLhs&gt;<sp/>||<sp/>type_traits::is_op&lt;TRhs&gt;</highlight></codeline>
<codeline lineno="2705"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator&lt;=(const<sp/>TLhs&amp;<sp/>lhs,<sp/>const<sp/>TRhs&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/>return<sp/>detail::le_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="2707"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"></highlight></codeline>
<codeline lineno="2709"><highlight class="normal">template<sp/>&lt;class<sp/>TLhs,<sp/>class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_op&lt;TLhs&gt;<sp/>||<sp/>type_traits::is_op&lt;TRhs&gt;</highlight></codeline>
<codeline lineno="2711"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator<sp/>and(const<sp/>TLhs&amp;<sp/>lhs,<sp/>const<sp/>TRhs&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/>return<sp/>detail::and_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="2713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"></highlight></codeline>
<codeline lineno="2715"><highlight class="normal">template<sp/>&lt;class<sp/>TLhs,<sp/>class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_op&lt;TLhs&gt;<sp/>||<sp/>type_traits::is_op&lt;TRhs&gt;</highlight></codeline>
<codeline lineno="2717"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator<sp/>or(const<sp/>TLhs&amp;<sp/>lhs,<sp/>const<sp/>TRhs&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/>return<sp/>detail::or_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="2719"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"></highlight></codeline>
<codeline lineno="2721"><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_op&lt;T&gt;</highlight></codeline>
<codeline lineno="2723"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator<sp/>not(const<sp/>T&amp;<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/>return<sp/>detail::not_{t};</highlight></codeline>
<codeline lineno="2725"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"></highlight></codeline>
<codeline lineno="2727"><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="2728"><highlight class="normal">[[nodiscard]]<sp/>inline<sp/>auto<sp/>operator&gt;&gt;(</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>T&amp;<sp/>t,<sp/>const<sp/>detail::value_location&lt;detail::fatal&gt;&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/>return<sp/>detail::fatal_{t};</highlight></codeline>
<codeline lineno="2731"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"></highlight></codeline>
<codeline lineno="2733"><highlight class="normal">template<sp/>&lt;class<sp/>Test&gt;</highlight></codeline>
<codeline lineno="2734"><highlight class="normal">[[nodiscard]]<sp/>auto<sp/>operator/(const<sp/>detail::tag&amp;<sp/>tag,<sp/>Test<sp/>test)<sp/>{</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/>for<sp/>(const<sp/>auto&amp;<sp/>name<sp/>:<sp/>tag.name)<sp/>{</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/>test.tag.push_back(name);</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/>return<sp/>test;</highlight></codeline>
<codeline lineno="2739"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"></highlight></codeline>
<codeline lineno="2741"><highlight class="normal">[[nodiscard]]<sp/>inline<sp/>auto<sp/>operator/(const<sp/>detail::tag&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>detail::tag&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string_view&gt;<sp/>tag;</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/>tag.reserve(lhs.name.size()<sp/>+<sp/>rhs.name.size());</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/>for<sp/>(const<sp/>auto&amp;<sp/>name<sp/>:<sp/>lhs.name)<sp/>{</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/>tag.push_back(name);</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/>for<sp/>(const<sp/>auto&amp;<sp/>name<sp/>:<sp/>rhs.name)<sp/>{</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/>tag.push_back(name);</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/>return<sp/>detail::tag{tag};</highlight></codeline>
<codeline lineno="2752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"></highlight></codeline>
<codeline lineno="2754"><highlight class="normal">template<sp/>&lt;class<sp/>F,<sp/>class<sp/>T&gt;</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/>requires<sp/>std::ranges::range&lt;T&gt;</highlight></codeline>
<codeline lineno="2756"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator|(const<sp/>F&amp;<sp/>f,<sp/>const<sp/>T&amp;<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/>return<sp/>[f,<sp/>t](std::string_view<sp/>type,<sp/>std::string_view<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>counter<sp/>=<sp/>1;<sp/>const<sp/>auto&amp;<sp/>arg<sp/>:<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>detail::on&lt;F&gt;(events::test&lt;F,<sp/>decltype(arg)&gt;{</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/>=<sp/>type,</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.name<sp/>=<sp/>std::string{name}<sp/>+<sp/>&quot;<sp/>(&quot;<sp/>+</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format_test_parameter(arg,<sp/>counter)<sp/>+<sp/>&quot;)&quot;,</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.tag<sp/>=<sp/>{},</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.location<sp/>=<sp/>{},</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.arg<sp/>=<sp/>arg,</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.run<sp/>=<sp/>f});</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++counter;</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2770"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"></highlight></codeline>
<codeline lineno="2772"><highlight class="normal">template<sp/>&lt;class<sp/>F,<sp/>template<sp/>&lt;class...&gt;<sp/>class<sp/>T,<sp/>class...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/>requires(!std::ranges::range&lt;T&lt;Ts...&gt;&gt;)</highlight></codeline>
<codeline lineno="2774"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>operator|(const<sp/>F&amp;<sp/>f,<sp/>const<sp/>T&lt;Ts...&gt;&amp;<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/>constexpr<sp/>auto<sp/>unique_name<sp/>=<sp/>[]&lt;class<sp/>TArg&gt;(std::string_view<sp/>name,</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TArg&amp;<sp/>arg,<sp/>int&amp;<sp/>counter)<sp/>{</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>ret<sp/>=<sp/>std::string{name}<sp/>+<sp/>&quot;<sp/>(&quot;;</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(std::invocable&lt;F,<sp/>TArg&gt;)<sp/>{</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/>format_test_parameter(arg,<sp/>counter)<sp/>+<sp/>&quot;,<sp/>&quot;;</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/>std::string(reflection::type_name&lt;TArg&gt;())<sp/>+<sp/>&quot;)&quot;;</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/>++counter;</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>ret;</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"></highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/>return<sp/>[f,<sp/>t,<sp/>unique_name](std::string_view<sp/>type,<sp/>std::string_view<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>counter<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/>apply(</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=,<sp/>&amp;counter](const<sp/>auto&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(detail::on&lt;F&gt;(events::test&lt;F,<sp/>Ts&gt;{</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/>=<sp/>type,</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.name<sp/>=<sp/>unique_name.template<sp/>operator()&lt;Ts&gt;(name,<sp/>args,<sp/>counter),</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.tag<sp/>=<sp/>{},</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.location<sp/>=<sp/>{},</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.arg<sp/>=<sp/>args,</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.run<sp/>=<sp/>f}),</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...);</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t);</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"></highlight></codeline>
<codeline lineno="2803"><highlight class="normal">namespace<sp/>terse<sp/>{</highlight></codeline>
<codeline lineno="2804"><highlight class="normal">#if<sp/>defined(__clang__)</highlight></codeline>
<codeline lineno="2805"><highlight class="normal">#pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wunused-comparison&quot;</highlight></codeline>
<codeline lineno="2806"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"></highlight></codeline>
<codeline lineno="2808"><highlight class="normal">[[maybe_unused]]<sp/>constexpr<sp/>struct<sp/>placeholder_gcc_t<sp/>{</highlight></codeline>
<codeline lineno="2809"><highlight class="normal">}<sp/>_t;</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"></highlight></codeline>
<codeline lineno="2811"><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="2812"><highlight class="normal">constexpr<sp/>auto<sp/>operator%(const<sp/>T&amp;<sp/>t,<sp/>const<sp/>placeholder_gcc_t&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/>return<sp/>detail::value&lt;T&gt;{t};</highlight></codeline>
<codeline lineno="2814"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"></highlight></codeline>
<codeline lineno="2816"><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="2817"><highlight class="normal">inline<sp/>auto<sp/>operator&gt;&gt;(const<sp/>T&amp;<sp/>t,</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>detail::value_location&lt;detail::fatal&gt;&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/>using<sp/>fatal_t<sp/>=<sp/>detail::fatal_&lt;T&gt;;</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/>struct<sp/>fatal_<sp/>:<sp/>fatal_t,<sp/>detail::log<sp/>{</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>type<sp/>=<sp/>fatal_t;</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>fatal_t::fatal_t;</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>detail::terse_&lt;type&gt;<sp/>_{*this};</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/>return<sp/>fatal_{t};</highlight></codeline>
<codeline lineno="2826"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"></highlight></codeline>
<codeline lineno="2828"><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_op&lt;T&gt;</highlight></codeline>
<codeline lineno="2830"><highlight class="normal">constexpr<sp/>auto<sp/>operator==(</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>T&amp;<sp/>lhs,<sp/>const<sp/>detail::value_location&lt;typename<sp/>T::value_type&gt;&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/>using<sp/>eq_t<sp/>=<sp/>detail::eq_&lt;T,<sp/>detail::value_location&lt;typename<sp/>T::value_type&gt;&gt;;</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/>struct<sp/>eq_<sp/>:<sp/>eq_t,<sp/>detail::log<sp/>{</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>type<sp/>=<sp/>eq_t;</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>eq_t::eq_t;</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>detail::terse_&lt;type&gt;<sp/>_{*this};</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/>return<sp/>eq_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="2839"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"></highlight></codeline>
<codeline lineno="2841"><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_op&lt;T&gt;</highlight></codeline>
<codeline lineno="2843"><highlight class="normal">constexpr<sp/>auto<sp/>operator==(</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>detail::value_location&lt;typename<sp/>T::value_type&gt;&amp;<sp/>lhs,<sp/>const<sp/>T&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/>using<sp/>eq_t<sp/>=<sp/>detail::eq_&lt;detail::value_location&lt;typename<sp/>T::value_type&gt;,<sp/>T&gt;;</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/>struct<sp/>eq_<sp/>:<sp/>eq_t,<sp/>detail::log<sp/>{</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>type<sp/>=<sp/>eq_t;</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>eq_t::eq_t;</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>detail::terse_&lt;type&gt;<sp/>_{*this};</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/>return<sp/>eq_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="2852"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"></highlight></codeline>
<codeline lineno="2854"><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_op&lt;T&gt;</highlight></codeline>
<codeline lineno="2856"><highlight class="normal">constexpr<sp/>auto<sp/>operator!=(</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>T&amp;<sp/>lhs,<sp/>const<sp/>detail::value_location&lt;typename<sp/>T::value_type&gt;&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/>using<sp/>neq_t<sp/>=<sp/>detail::neq_&lt;T,<sp/>detail::value_location&lt;typename<sp/>T::value_type&gt;&gt;;</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/>struct<sp/>neq_<sp/>:<sp/>neq_t,<sp/>detail::log<sp/>{</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>type<sp/>=<sp/>neq_t;</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>neq_t::neq_t;</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>detail::terse_&lt;type&gt;<sp/>_{*this};</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/>return<sp/>neq_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="2865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"></highlight></codeline>
<codeline lineno="2867"><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_op&lt;T&gt;</highlight></codeline>
<codeline lineno="2869"><highlight class="normal">constexpr<sp/>auto<sp/>operator!=(</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>detail::value_location&lt;typename<sp/>T::value_type&gt;&amp;<sp/>lhs,<sp/>const<sp/>T&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/>using<sp/>neq_t<sp/>=<sp/>detail::neq_&lt;detail::value_location&lt;typename<sp/>T::value_type&gt;,<sp/>T&gt;;</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/>struct<sp/>neq_<sp/>:<sp/>neq_t<sp/>{</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>type<sp/>=<sp/>neq_t;</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>neq_t::neq_t;</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>detail::terse_&lt;type&gt;<sp/>_{*this};</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/>return<sp/>neq_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="2878"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"></highlight></codeline>
<codeline lineno="2880"><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_op&lt;T&gt;</highlight></codeline>
<codeline lineno="2882"><highlight class="normal">constexpr<sp/>auto<sp/>operator&gt;(</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>T&amp;<sp/>lhs,<sp/>const<sp/>detail::value_location&lt;typename<sp/>T::value_type&gt;&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/>using<sp/>gt_t<sp/>=<sp/>detail::gt_&lt;T,<sp/>detail::value_location&lt;typename<sp/>T::value_type&gt;&gt;;</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/>struct<sp/>gt_<sp/>:<sp/>gt_t,<sp/>detail::log<sp/>{</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>type<sp/>=<sp/>gt_t;</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>gt_t::gt_t;</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>detail::terse_&lt;type&gt;<sp/>_{*this};</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/>return<sp/>gt_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="2891"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"></highlight></codeline>
<codeline lineno="2893"><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_op&lt;T&gt;</highlight></codeline>
<codeline lineno="2895"><highlight class="normal">constexpr<sp/>auto<sp/>operator&gt;(</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>detail::value_location&lt;typename<sp/>T::value_type&gt;&amp;<sp/>lhs,<sp/>const<sp/>T&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/>using<sp/>gt_t<sp/>=<sp/>detail::gt_&lt;detail::value_location&lt;typename<sp/>T::value_type&gt;,<sp/>T&gt;;</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/>struct<sp/>gt_<sp/>:<sp/>gt_t,<sp/>detail::log<sp/>{</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>type<sp/>=<sp/>gt_t;</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>gt_t::gt_t;</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>detail::terse_&lt;type&gt;<sp/>_{*this};</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/>return<sp/>gt_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="2904"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"></highlight></codeline>
<codeline lineno="2906"><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_op&lt;T&gt;</highlight></codeline>
<codeline lineno="2908"><highlight class="normal">constexpr<sp/>auto<sp/>operator&gt;=(</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>T&amp;<sp/>lhs,<sp/>const<sp/>detail::value_location&lt;typename<sp/>T::value_type&gt;&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/>using<sp/>ge_t<sp/>=<sp/>detail::ge_&lt;T,<sp/>detail::value_location&lt;typename<sp/>T::value_type&gt;&gt;;</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/>struct<sp/>ge_<sp/>:<sp/>ge_t,<sp/>detail::log<sp/>{</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>type<sp/>=<sp/>ge_t;</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>ge_t::ge_t;</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>detail::terse_&lt;type&gt;<sp/>_{*this};</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/>return<sp/>ge_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="2917"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"></highlight></codeline>
<codeline lineno="2919"><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_op&lt;T&gt;</highlight></codeline>
<codeline lineno="2921"><highlight class="normal">constexpr<sp/>auto<sp/>operator&gt;=(</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>detail::value_location&lt;typename<sp/>T::value_type&gt;&amp;<sp/>lhs,<sp/>const<sp/>T&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/>using<sp/>ge_t<sp/>=<sp/>detail::ge_&lt;detail::value_location&lt;typename<sp/>T::value_type&gt;,<sp/>T&gt;;</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/>struct<sp/>ge_<sp/>:<sp/>ge_t,<sp/>detail::log<sp/>{</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>type<sp/>=<sp/>ge_t;</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>ge_t::ge_t;</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>detail::terse_&lt;type&gt;<sp/>_{*this};</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/>return<sp/>ge_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="2930"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"></highlight></codeline>
<codeline lineno="2932"><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_op&lt;T&gt;</highlight></codeline>
<codeline lineno="2934"><highlight class="normal">constexpr<sp/>auto<sp/>operator&lt;(</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>T&amp;<sp/>lhs,<sp/>const<sp/>detail::value_location&lt;typename<sp/>T::value_type&gt;&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/>using<sp/>lt_t<sp/>=<sp/>detail::lt_&lt;T,<sp/>detail::value_location&lt;typename<sp/>T::value_type&gt;&gt;;</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/>struct<sp/>lt_<sp/>:<sp/>lt_t,<sp/>detail::log<sp/>{</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>type<sp/>=<sp/>lt_t;</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>lt_t::lt_t;</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>detail::terse_&lt;type&gt;<sp/>_{*this};</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/>return<sp/>lt_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="2943"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"></highlight></codeline>
<codeline lineno="2945"><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_op&lt;T&gt;</highlight></codeline>
<codeline lineno="2947"><highlight class="normal">constexpr<sp/>auto<sp/>operator&lt;(</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>detail::value_location&lt;typename<sp/>T::value_type&gt;&amp;<sp/>lhs,<sp/>const<sp/>T&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/>using<sp/>lt_t<sp/>=<sp/>detail::lt_&lt;detail::value_location&lt;typename<sp/>T::value_type&gt;,<sp/>T&gt;;</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/>struct<sp/>lt_<sp/>:<sp/>lt_t,<sp/>detail::log<sp/>{</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>type<sp/>=<sp/>lt_t;</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>lt_t::lt_t;</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>detail::terse_&lt;type&gt;<sp/>_{*this};</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/>return<sp/>lt_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="2956"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"></highlight></codeline>
<codeline lineno="2958"><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_op&lt;T&gt;</highlight></codeline>
<codeline lineno="2960"><highlight class="normal">constexpr<sp/>auto<sp/>operator&lt;=(</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>T&amp;<sp/>lhs,<sp/>const<sp/>detail::value_location&lt;typename<sp/>T::value_type&gt;&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/>using<sp/>le_t<sp/>=<sp/>detail::le_&lt;T,<sp/>detail::value_location&lt;typename<sp/>T::value_type&gt;&gt;;</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/>struct<sp/>le_<sp/>:<sp/>le_t,<sp/>detail::log<sp/>{</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>type<sp/>=<sp/>le_t;</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>le_t::le_t;</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>detail::terse_&lt;type&gt;<sp/>_{*this};</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/>return<sp/>le_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="2969"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"></highlight></codeline>
<codeline lineno="2971"><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_op&lt;T&gt;</highlight></codeline>
<codeline lineno="2973"><highlight class="normal">constexpr<sp/>auto<sp/>operator&lt;=(</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>detail::value_location&lt;typename<sp/>T::value_type&gt;&amp;<sp/>lhs,<sp/>const<sp/>T&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/>using<sp/>le_t<sp/>=<sp/>detail::le_&lt;detail::value_location&lt;typename<sp/>T::value_type&gt;,<sp/>T&gt;;</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/>struct<sp/>le_<sp/>:<sp/>le_t<sp/>{</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>type<sp/>=<sp/>le_t;</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>le_t::le_t;</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>detail::terse_&lt;type&gt;<sp/>_{*this};</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/>return<sp/>le_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="2982"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"></highlight></codeline>
<codeline lineno="2984"><highlight class="normal">template<sp/>&lt;class<sp/>TLhs,<sp/>class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_op&lt;TLhs&gt;<sp/>||<sp/>type_traits::is_op&lt;TRhs&gt;</highlight></codeline>
<codeline lineno="2986"><highlight class="normal">constexpr<sp/>auto<sp/>operator<sp/>and(const<sp/>TLhs&amp;<sp/>lhs,<sp/>const<sp/>TRhs&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/>using<sp/>and_t<sp/>=<sp/>detail::and_&lt;typename<sp/>TLhs::type,<sp/>typename<sp/>TRhs::type&gt;;</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/>struct<sp/>and_<sp/>:<sp/>and_t,<sp/>detail::log<sp/>{</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>type<sp/>=<sp/>and_t;</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>and_t::and_t;</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>detail::terse_&lt;type&gt;<sp/>_{*this};</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/>return<sp/>and_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="2994"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"></highlight></codeline>
<codeline lineno="2996"><highlight class="normal">template<sp/>&lt;class<sp/>TLhs,<sp/>class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_op&lt;TLhs&gt;<sp/>||<sp/>type_traits::is_op&lt;TRhs&gt;</highlight></codeline>
<codeline lineno="2998"><highlight class="normal">constexpr<sp/>auto<sp/>operator<sp/>or(const<sp/>TLhs&amp;<sp/>lhs,<sp/>const<sp/>TRhs&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/>using<sp/>or_t<sp/>=<sp/>detail::or_&lt;typename<sp/>TLhs::type,<sp/>typename<sp/>TRhs::type&gt;;</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/>struct<sp/>or_<sp/>:<sp/>or_t,<sp/>detail::log<sp/>{</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>type<sp/>=<sp/>or_t;</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>or_t::or_t;</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>detail::terse_&lt;type&gt;<sp/>_{*this};</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/>return<sp/>or_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="3006"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"></highlight></codeline>
<codeline lineno="3008"><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_op&lt;T&gt;</highlight></codeline>
<codeline lineno="3010"><highlight class="normal">constexpr<sp/>auto<sp/>operator<sp/>not(const<sp/>T&amp;<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/>using<sp/>not_t<sp/>=<sp/>detail::not_&lt;typename<sp/>T::type&gt;;</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/>struct<sp/>not_<sp/>:<sp/>not_t,<sp/>detail::log<sp/>{</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>type<sp/>=<sp/>not_t;</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>not_t::not_t;</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>detail::terse_&lt;type&gt;<sp/>_{*this};</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/>return<sp/>not_{t};</highlight></codeline>
<codeline lineno="3018"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"></highlight></codeline>
<codeline lineno="3020"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>terse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3021"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3022"><highlight class="normal"></highlight></codeline>
<codeline lineno="3023"><highlight class="normal">template<sp/>&lt;class<sp/>TExpr&gt;</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_op&lt;TExpr&gt;<sp/>||</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>concepts::explicitly_convertible_to&lt;TExpr,<sp/>bool&gt;</highlight></codeline>
<codeline lineno="3026"><highlight class="normal">constexpr<sp/>auto<sp/>expect(const<sp/>TExpr&amp;<sp/>expr,</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>reflection::source_location&amp;<sp/>sl<sp/>=</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reflection::source_location::current())<sp/>{</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/>return<sp/>detail::expect_&lt;TExpr&gt;{detail::on&lt;TExpr&gt;(</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>events::assertion&lt;TExpr&gt;{.expr<sp/>=<sp/>expr,<sp/>.location<sp/>=<sp/>sl})};</highlight></codeline>
<codeline lineno="3031"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"></highlight></codeline>
<codeline lineno="3033"><highlight class="normal">[[maybe_unused]]<sp/>inline<sp/>constexpr<sp/>auto<sp/>fatal<sp/>=<sp/>detail::fatal{};</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"></highlight></codeline>
<codeline lineno="3035"><highlight class="normal">#if<sp/>defined(__cpp_nontype_template_parameter_class)</highlight></codeline>
<codeline lineno="3036"><highlight class="normal">template<sp/>&lt;auto<sp/>Constant&gt;</highlight></codeline>
<codeline lineno="3037"><highlight class="normal">#else</highlight></codeline>
<codeline lineno="3038"><highlight class="normal">template<sp/>&lt;bool<sp/>Constant&gt;</highlight></codeline>
<codeline lineno="3039"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="3040"><highlight class="normal">constexpr<sp/>auto<sp/>constant<sp/>=<sp/>Constant;</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"></highlight></codeline>
<codeline lineno="3042"><highlight class="normal">#if<sp/>defined(__cpp_exceptions)</highlight></codeline>
<codeline lineno="3043"><highlight class="normal">template<sp/>&lt;class<sp/>TException,<sp/>class<sp/>TExpr&gt;</highlight></codeline>
<codeline lineno="3044"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>throws(const<sp/>TExpr&amp;<sp/>expr)<sp/>{</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/>return<sp/>detail::throws_&lt;TExpr,<sp/>TException&gt;{expr};</highlight></codeline>
<codeline lineno="3046"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"></highlight></codeline>
<codeline lineno="3048"><highlight class="normal">template<sp/>&lt;class<sp/>TExpr&gt;</highlight></codeline>
<codeline lineno="3049"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>throws(const<sp/>TExpr&amp;<sp/>expr)<sp/>{</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/>return<sp/>detail::throws_&lt;TExpr&gt;{expr};</highlight></codeline>
<codeline lineno="3051"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"></highlight></codeline>
<codeline lineno="3053"><highlight class="normal">template<sp/>&lt;class<sp/>TExpr&gt;</highlight></codeline>
<codeline lineno="3054"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>nothrow(const<sp/>TExpr&amp;<sp/>expr)<sp/>{</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/>return<sp/>detail::nothrow_{expr};</highlight></codeline>
<codeline lineno="3056"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3057"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"></highlight></codeline>
<codeline lineno="3059"><highlight class="normal">#if<sp/>__has_include(&lt;unistd.h&gt;)<sp/>and<sp/>__has_include(&lt;sys/wait.h&gt;)</highlight></codeline>
<codeline lineno="3060"><highlight class="normal">template<sp/>&lt;class<sp/>TExpr&gt;</highlight></codeline>
<codeline lineno="3061"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>aborts(const<sp/>TExpr&amp;<sp/>expr)<sp/>{</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/>return<sp/>detail::aborts_{expr};</highlight></codeline>
<codeline lineno="3063"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3064"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"></highlight></codeline>
<codeline lineno="3066"><highlight class="normal">using<sp/>_b<sp/>=<sp/>detail::value&lt;bool&gt;;</highlight></codeline>
<codeline lineno="3067"><highlight class="normal">using<sp/>_c<sp/>=<sp/>detail::value&lt;char&gt;;</highlight></codeline>
<codeline lineno="3068"><highlight class="normal">using<sp/>_sc<sp/>=<sp/>detail::value&lt;signed<sp/>char&gt;;</highlight></codeline>
<codeline lineno="3069"><highlight class="normal">using<sp/>_s<sp/>=<sp/>detail::value&lt;short&gt;;</highlight></codeline>
<codeline lineno="3070"><highlight class="normal">using<sp/>_i<sp/>=<sp/>detail::value&lt;int&gt;;</highlight></codeline>
<codeline lineno="3071"><highlight class="normal">using<sp/>_l<sp/>=<sp/>detail::value&lt;long&gt;;</highlight></codeline>
<codeline lineno="3072"><highlight class="normal">using<sp/>_ll<sp/>=<sp/>detail::value&lt;long<sp/>long&gt;;</highlight></codeline>
<codeline lineno="3073"><highlight class="normal">using<sp/>_u<sp/>=<sp/>detail::value&lt;unsigned&gt;;</highlight></codeline>
<codeline lineno="3074"><highlight class="normal">using<sp/>_uc<sp/>=<sp/>detail::value&lt;unsigned<sp/>char&gt;;</highlight></codeline>
<codeline lineno="3075"><highlight class="normal">using<sp/>_us<sp/>=<sp/>detail::value&lt;unsigned<sp/>short&gt;;</highlight></codeline>
<codeline lineno="3076"><highlight class="normal">using<sp/>_ul<sp/>=<sp/>detail::value&lt;unsigned<sp/>long&gt;;</highlight></codeline>
<codeline lineno="3077"><highlight class="normal">using<sp/>_ull<sp/>=<sp/>detail::value&lt;unsigned<sp/>long<sp/>long&gt;;</highlight></codeline>
<codeline lineno="3078"><highlight class="normal">using<sp/>_i8<sp/>=<sp/>detail::value&lt;std::int8_t&gt;;</highlight></codeline>
<codeline lineno="3079"><highlight class="normal">using<sp/>_i16<sp/>=<sp/>detail::value&lt;std::int16_t&gt;;</highlight></codeline>
<codeline lineno="3080"><highlight class="normal">using<sp/>_i32<sp/>=<sp/>detail::value&lt;std::int32_t&gt;;</highlight></codeline>
<codeline lineno="3081"><highlight class="normal">using<sp/>_i64<sp/>=<sp/>detail::value&lt;std::int64_t&gt;;</highlight></codeline>
<codeline lineno="3082"><highlight class="normal">using<sp/>_u8<sp/>=<sp/>detail::value&lt;std::uint8_t&gt;;</highlight></codeline>
<codeline lineno="3083"><highlight class="normal">using<sp/>_u16<sp/>=<sp/>detail::value&lt;std::uint16_t&gt;;</highlight></codeline>
<codeline lineno="3084"><highlight class="normal">using<sp/>_u32<sp/>=<sp/>detail::value&lt;std::uint32_t&gt;;</highlight></codeline>
<codeline lineno="3085"><highlight class="normal">using<sp/>_u64<sp/>=<sp/>detail::value&lt;std::uint64_t&gt;;</highlight></codeline>
<codeline lineno="3086"><highlight class="normal">using<sp/>_f<sp/>=<sp/>detail::value&lt;float&gt;;</highlight></codeline>
<codeline lineno="3087"><highlight class="normal">using<sp/>_d<sp/>=<sp/>detail::value&lt;double&gt;;</highlight></codeline>
<codeline lineno="3088"><highlight class="normal">using<sp/>_ld<sp/>=<sp/>detail::value&lt;long<sp/>double&gt;;</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"></highlight></codeline>
<codeline lineno="3090"><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="3091"><highlight class="normal">struct<sp/>_t<sp/>:<sp/>detail::value&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/>constexpr<sp/>explicit<sp/>_t(const<sp/>T&amp;<sp/>t)<sp/>:<sp/>detail::value&lt;T&gt;{t}<sp/>{}</highlight></codeline>
<codeline lineno="3093"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"></highlight></codeline>
<codeline lineno="3095"><highlight class="normal">template<sp/>&lt;fixed_string<sp/>suite_name<sp/>=<sp/>&quot;unnamed<sp/>suite&quot;&gt;</highlight></codeline>
<codeline lineno="3096"><highlight class="normal">struct<sp/>suite<sp/>{</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/>reflection::source_location<sp/>location{};</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/>std::string_view<sp/>name<sp/>=<sp/>std::string_view(suite_name);</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>TSuite&gt;</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="comment">/*explicit(false)*/</highlight><highlight class="normal"><sp/>suite(TSuite<sp/>_suite)<sp/>{</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(1<sp/>==<sp/>sizeof(_suite));</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::on&lt;decltype(+_suite)&gt;(</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>events::suite&lt;decltype(+_suite)&gt;{.run<sp/>=<sp/>+_suite,<sp/>.name<sp/>=<sp/>name});</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3105"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"></highlight></codeline>
<codeline lineno="3107"><highlight class="normal">[[maybe_unused]]<sp/>inline<sp/>auto<sp/>log<sp/>=<sp/>detail::log{};</highlight></codeline>
<codeline lineno="3108"><highlight class="normal">[[maybe_unused]]<sp/>inline<sp/>auto<sp/>that<sp/>=<sp/>detail::that_{};</highlight></codeline>
<codeline lineno="3109"><highlight class="normal">[[maybe_unused]]<sp/>constexpr<sp/>auto<sp/>test<sp/>=<sp/>[](const<sp/>auto<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/>return<sp/>detail::test{&quot;test&quot;,<sp/>name};</highlight></codeline>
<codeline lineno="3111"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3112"><highlight class="normal">[[maybe_unused]]<sp/>constexpr<sp/>auto<sp/>should<sp/>=<sp/>test;</highlight></codeline>
<codeline lineno="3113"><highlight class="normal">[[maybe_unused]]<sp/>inline<sp/>auto<sp/>tag<sp/>=<sp/>[](const<sp/>auto<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/>return<sp/>detail::tag{{name}};</highlight></codeline>
<codeline lineno="3115"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3116"><highlight class="normal">[[maybe_unused]]<sp/>inline<sp/>auto<sp/>skip<sp/>=<sp/>tag(&quot;skip&quot;);</highlight></codeline>
<codeline lineno="3117"><highlight class="normal">template<sp/>&lt;class<sp/>T<sp/>=<sp/>void&gt;</highlight></codeline>
<codeline lineno="3118"><highlight class="normal">[[maybe_unused]]<sp/>constexpr<sp/>auto<sp/>type<sp/>=<sp/>detail::type_&lt;T&gt;();</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"></highlight></codeline>
<codeline lineno="3120"><highlight class="normal">template<sp/>&lt;class<sp/>TLhs,<sp/>class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_stream_insertable_v&lt;TLhs&gt;<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_traits::is_stream_insertable_v&lt;TRhs&gt;</highlight></codeline>
<codeline lineno="3123"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>eq(const<sp/>TLhs&amp;<sp/>lhs,<sp/>const<sp/>TRhs&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/>return<sp/>detail::eq_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="3125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3126"><highlight class="normal">template<sp/>&lt;class<sp/>TLhs,<sp/>class<sp/>TRhs,<sp/>class<sp/>TEpsilon&gt;</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_stream_insertable_v&lt;TLhs&gt;<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_traits::is_stream_insertable_v&lt;TRhs&gt;</highlight></codeline>
<codeline lineno="3129"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>approx(const<sp/>TLhs&amp;<sp/>lhs,<sp/>const<sp/>TRhs&amp;<sp/>rhs,</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TEpsilon&amp;<sp/>epsilon)<sp/>{</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/>return<sp/>detail::approx_{lhs,<sp/>rhs,<sp/>epsilon};</highlight></codeline>
<codeline lineno="3132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3133"><highlight class="normal">template<sp/>&lt;class<sp/>TLhs,<sp/>class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_stream_insertable_v&lt;TLhs&gt;<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_traits::is_stream_insertable_v&lt;TRhs&gt;</highlight></codeline>
<codeline lineno="3136"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>neq(const<sp/>TLhs&amp;<sp/>lhs,<sp/>const<sp/>TRhs&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/>return<sp/>detail::neq_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="3138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3139"><highlight class="normal">template<sp/>&lt;class<sp/>TLhs,<sp/>class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_stream_insertable_v&lt;TLhs&gt;<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_traits::is_stream_insertable_v&lt;TRhs&gt;</highlight></codeline>
<codeline lineno="3142"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>gt(const<sp/>TLhs&amp;<sp/>lhs,<sp/>const<sp/>TRhs&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/>return<sp/>detail::gt_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="3144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3145"><highlight class="normal">template<sp/>&lt;class<sp/>TLhs,<sp/>class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_stream_insertable_v&lt;TLhs&gt;<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_traits::is_stream_insertable_v&lt;TRhs&gt;</highlight></codeline>
<codeline lineno="3148"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>ge(const<sp/>TLhs&amp;<sp/>lhs,<sp/>const<sp/>TRhs&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/>return<sp/>detail::ge_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="3150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3151"><highlight class="normal">template<sp/>&lt;class<sp/>TLhs,<sp/>class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_stream_insertable_v&lt;TLhs&gt;<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_traits::is_stream_insertable_v&lt;TRhs&gt;</highlight></codeline>
<codeline lineno="3154"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>lt(const<sp/>TLhs&amp;<sp/>lhs,<sp/>const<sp/>TRhs&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/>return<sp/>detail::lt_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="3156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3157"><highlight class="normal">template<sp/>&lt;class<sp/>TLhs,<sp/>class<sp/>TRhs&gt;</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/>requires<sp/>type_traits::is_stream_insertable_v&lt;TLhs&gt;<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_traits::is_stream_insertable_v&lt;TRhs&gt;</highlight></codeline>
<codeline lineno="3160"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>le(const<sp/>TLhs&amp;<sp/>lhs,<sp/>const<sp/>TRhs&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/>return<sp/>detail::le_{lhs,<sp/>rhs};</highlight></codeline>
<codeline lineno="3162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"></highlight></codeline>
<codeline lineno="3164"><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="3165"><highlight class="normal">[[nodiscard]]<sp/>constexpr<sp/>auto<sp/>mut(const<sp/>T&amp;<sp/>t)<sp/>noexcept<sp/>-&gt;<sp/>T&amp;<sp/>{</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/>return<sp/>const_cast&lt;T&amp;&gt;(t);</highlight></codeline>
<codeline lineno="3167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"></highlight></codeline>
<codeline lineno="3169"><highlight class="normal">namespace<sp/>bdd<sp/>{</highlight></codeline>
<codeline lineno="3170"><highlight class="normal">[[maybe_unused]]<sp/>constexpr<sp/>auto<sp/>feature<sp/>=<sp/>[](const<sp/>auto<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/>return<sp/>detail::test{&quot;feature&quot;,<sp/>name};</highlight></codeline>
<codeline lineno="3172"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3173"><highlight class="normal">[[maybe_unused]]<sp/>constexpr<sp/>auto<sp/>scenario<sp/>=<sp/>[](const<sp/>auto<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/>return<sp/>detail::test{&quot;scenario&quot;,<sp/>name};</highlight></codeline>
<codeline lineno="3175"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3176"><highlight class="normal">[[maybe_unused]]<sp/>constexpr<sp/>auto<sp/>given<sp/>=<sp/>[](const<sp/>auto<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/>return<sp/>detail::test{&quot;given&quot;,<sp/>name};</highlight></codeline>
<codeline lineno="3178"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3179"><highlight class="normal">[[maybe_unused]]<sp/>constexpr<sp/>auto<sp/>when<sp/>=<sp/>[](const<sp/>auto<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/>return<sp/>detail::test{&quot;when&quot;,<sp/>name};</highlight></codeline>
<codeline lineno="3181"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3182"><highlight class="normal">[[maybe_unused]]<sp/>constexpr<sp/>auto<sp/>then<sp/>=<sp/>[](const<sp/>auto<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/>return<sp/>detail::test{&quot;then&quot;,<sp/>name};</highlight></codeline>
<codeline lineno="3184"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"></highlight></codeline>
<codeline lineno="3186"><highlight class="normal">namespace<sp/>gherkin<sp/>{</highlight></codeline>
<codeline lineno="3187"><highlight class="normal">class<sp/>steps<sp/>{</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/>using<sp/>step_t<sp/>=<sp/>std::string;</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/>using<sp/>steps_t<sp/>=<sp/>void<sp/>(*)(steps&amp;);</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/>using<sp/>gherkin_t<sp/>=<sp/>std::vector&lt;step_t&gt;;</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/>using<sp/>call_step_t<sp/>=<sp/>utility::function&lt;void(const<sp/>std::string&amp;)&gt;;</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/>using<sp/>call_steps_t<sp/>=<sp/>std::vector&lt;std::pair&lt;step_t,<sp/>call_step_t&gt;&gt;;</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"></highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/>class<sp/>step<sp/>{</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/><sp/>public:</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>TPattern&gt;</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/><sp/><sp/>step(steps&amp;<sp/>steps,<sp/>const<sp/>TPattern&amp;<sp/>pattern)</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>steps_{steps},<sp/>pattern_{pattern}<sp/>{}</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"></highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/><sp/><sp/>~step()<sp/>{<sp/>steps_.next(pattern_);<sp/>}</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"></highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>TExpr&gt;</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>operator=(const<sp/>TExpr&amp;<sp/>expr)<sp/>-&gt;<sp/>void<sp/>{</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(const<sp/>auto&amp;<sp/>[pattern,<sp/>_]<sp/>:<sp/>steps_.call_steps())<sp/>{</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(pattern_<sp/>==<sp/>pattern)<sp/>{</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"></highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>steps_.call_steps().emplace_back(</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pattern_,<sp/>[expr,<sp/>pattern<sp/>=<sp/>pattern_](const<sp/>auto&amp;<sp/>_step)<sp/>{</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]&lt;class...<sp/>TArgs&gt;(type_traits::list&lt;TArgs...&gt;)<sp/>{</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log<sp/>&lt;&lt;<sp/>_step;</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>i<sp/>=<sp/>0u;</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto&amp;<sp/>ms<sp/>=<sp/>utility::match(pattern,<sp/>_step);</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr(lexical_cast&lt;TArgs&gt;(ms[i++])...);</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}(typename<sp/>type_traits::function_traits&lt;TExpr&gt;::args{});</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"></highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/><sp/>private:</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>auto<sp/>lexical_cast(const<sp/>std::string&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>t{};</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>iss{};</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iss.str(str);</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr<sp/>(std::is_same_v&lt;T,<sp/>std::string&gt;)<sp/>{</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>iss.str();</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iss<sp/>&gt;&gt;<sp/>t;</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>t;</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"></highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><sp/><sp/>steps&amp;<sp/>steps_;</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>pattern_{};</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"></highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>TSteps&gt;</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="comment">/*explicit(false)*/</highlight><highlight class="normal"><sp/>steps(const<sp/>TSteps&amp;<sp/>_steps)<sp/>:<sp/>steps_{_steps}<sp/>{}</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"></highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>TGherkin&gt;</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/>auto<sp/>operator|(const<sp/>TGherkin&amp;<sp/>gherkin)<sp/>{</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/>gherkin_<sp/>=<sp/>utility::split&lt;std::string&gt;(gherkin,<sp/>&apos;\n&apos;);</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(auto&amp;<sp/>_step<sp/>:<sp/>gherkin_)<sp/>{</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_step.erase(0,<sp/>_step.find_first_not_of(&quot;<sp/>\t&quot;));</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"></highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>[this]<sp/>{</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>step_<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>steps_(*this);</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/>auto<sp/>feature(const<sp/>std::string&amp;<sp/>pattern)<sp/>{</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>step{*this,<sp/>&quot;Feature:<sp/>&quot;<sp/>+<sp/>pattern};</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/>auto<sp/>scenario(const<sp/>std::string&amp;<sp/>pattern)<sp/>{</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>step{*this,<sp/>&quot;Scenario:<sp/>&quot;<sp/>+<sp/>pattern};</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/>auto<sp/>given(const<sp/>std::string&amp;<sp/>pattern)<sp/>{</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>step{*this,<sp/>&quot;Given<sp/>&quot;<sp/>+<sp/>pattern};</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/>auto<sp/>when(const<sp/>std::string&amp;<sp/>pattern)<sp/>{</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>step{*this,<sp/>&quot;When<sp/>&quot;<sp/>+<sp/>pattern};</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/>auto<sp/>then(const<sp/>std::string&amp;<sp/>pattern)<sp/>{</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>step{*this,<sp/>&quot;Then<sp/>&quot;<sp/>+<sp/>pattern};</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"></highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/>private:</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/>template<sp/>&lt;class<sp/>TPattern&gt;</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/>auto<sp/>next(const<sp/>TPattern&amp;<sp/>pattern)<sp/>-&gt;<sp/>void<sp/>{</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>is_scenario<sp/>=<sp/>[&amp;pattern](const<sp/>auto&amp;<sp/>_step)<sp/>{</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>scenario<sp/>=<sp/>&quot;Scenario&quot;;</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>pattern.find(scenario)<sp/>==<sp/>std::string::npos<sp/>and</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_step.find(scenario)<sp/>!=<sp/>std::string::npos;</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"></highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>call_steps<sp/>=<sp/>[this,<sp/>is_scenario](const<sp/>auto&amp;<sp/>_step,</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(const<sp/>auto&amp;<sp/>[name,<sp/>call]<sp/>:<sp/>call_steps_)<sp/>{</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(is_scenario(_step))<sp/>{</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"></highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(utility::is_match(_step,<sp/>name)<sp/>or</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>not<sp/>std::empty(utility::match(name,<sp/>_step)))<sp/>{</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>step_<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>call(_step);</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"></highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/>decltype(step_)<sp/>i{};</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(const<sp/>auto&amp;<sp/>_step<sp/>:<sp/>gherkin_)<sp/>{</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(i++<sp/>==<sp/>step_)<sp/>{</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>call_steps(_step,<sp/>i);</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"></highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/>auto<sp/>call_steps()<sp/>-&gt;<sp/>call_steps_t&amp;<sp/>{<sp/>return<sp/>call_steps_;<sp/>}</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"></highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/>steps_t<sp/>steps_{};</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/>gherkin_t<sp/>gherkin_{};</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/>call_steps_t<sp/>call_steps_{};</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/>decltype(sizeof(&quot;&quot;))<sp/>step_{};</highlight></codeline>
<codeline lineno="3309"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3310"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>gherkin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3311"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>bdd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3312"><highlight class="normal"></highlight></codeline>
<codeline lineno="3313"><highlight class="normal">namespace<sp/>spec<sp/>{</highlight></codeline>
<codeline lineno="3314"><highlight class="normal">[[maybe_unused]]<sp/>constexpr<sp/>auto<sp/>describe<sp/>=<sp/>[](const<sp/>auto<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/>return<sp/>detail::test{&quot;describe&quot;,<sp/>name};</highlight></codeline>
<codeline lineno="3316"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3317"><highlight class="normal">[[maybe_unused]]<sp/>constexpr<sp/>auto<sp/>it<sp/>=<sp/>[](const<sp/>auto<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/>return<sp/>detail::test{&quot;it&quot;,<sp/>name};</highlight></codeline>
<codeline lineno="3319"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3320"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>spec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3321"><highlight class="normal"></highlight></codeline>
<codeline lineno="3322"><highlight class="normal">using<sp/>literals::operator&quot;&quot;_test;</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"></highlight></codeline>
<codeline lineno="3324"><highlight class="normal">using<sp/>literals::operator&quot;&quot;_b;</highlight></codeline>
<codeline lineno="3325"><highlight class="normal">using<sp/>literals::operator&quot;&quot;_i;</highlight></codeline>
<codeline lineno="3326"><highlight class="normal">using<sp/>literals::operator&quot;&quot;_s;</highlight></codeline>
<codeline lineno="3327"><highlight class="normal">using<sp/>literals::operator&quot;&quot;_c;</highlight></codeline>
<codeline lineno="3328"><highlight class="normal">using<sp/>literals::operator&quot;&quot;_sc;</highlight></codeline>
<codeline lineno="3329"><highlight class="normal">using<sp/>literals::operator&quot;&quot;_l;</highlight></codeline>
<codeline lineno="3330"><highlight class="normal">using<sp/>literals::operator&quot;&quot;_ll;</highlight></codeline>
<codeline lineno="3331"><highlight class="normal">using<sp/>literals::operator&quot;&quot;_u;</highlight></codeline>
<codeline lineno="3332"><highlight class="normal">using<sp/>literals::operator&quot;&quot;_uc;</highlight></codeline>
<codeline lineno="3333"><highlight class="normal">using<sp/>literals::operator&quot;&quot;_us;</highlight></codeline>
<codeline lineno="3334"><highlight class="normal">using<sp/>literals::operator&quot;&quot;_ul;</highlight></codeline>
<codeline lineno="3335"><highlight class="normal">using<sp/>literals::operator&quot;&quot;_i8;</highlight></codeline>
<codeline lineno="3336"><highlight class="normal">using<sp/>literals::operator&quot;&quot;_i16;</highlight></codeline>
<codeline lineno="3337"><highlight class="normal">using<sp/>literals::operator&quot;&quot;_i32;</highlight></codeline>
<codeline lineno="3338"><highlight class="normal">using<sp/>literals::operator&quot;&quot;_i64;</highlight></codeline>
<codeline lineno="3339"><highlight class="normal">using<sp/>literals::operator&quot;&quot;_u8;</highlight></codeline>
<codeline lineno="3340"><highlight class="normal">using<sp/>literals::operator&quot;&quot;_u16;</highlight></codeline>
<codeline lineno="3341"><highlight class="normal">using<sp/>literals::operator&quot;&quot;_u32;</highlight></codeline>
<codeline lineno="3342"><highlight class="normal">using<sp/>literals::operator&quot;&quot;_u64;</highlight></codeline>
<codeline lineno="3343"><highlight class="normal">using<sp/>literals::operator&quot;&quot;_f;</highlight></codeline>
<codeline lineno="3344"><highlight class="normal">using<sp/>literals::operator&quot;&quot;_d;</highlight></codeline>
<codeline lineno="3345"><highlight class="normal">using<sp/>literals::operator&quot;&quot;_ld;</highlight></codeline>
<codeline lineno="3346"><highlight class="normal">using<sp/>literals::operator&quot;&quot;_ull;</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"></highlight></codeline>
<codeline lineno="3348"><highlight class="normal">using<sp/>operators::operator==;</highlight></codeline>
<codeline lineno="3349"><highlight class="normal">using<sp/>operators::operator!=;</highlight></codeline>
<codeline lineno="3350"><highlight class="normal">using<sp/>operators::operator&gt;;</highlight></codeline>
<codeline lineno="3351"><highlight class="normal">using<sp/>operators::operator&gt;=;</highlight></codeline>
<codeline lineno="3352"><highlight class="normal">using<sp/>operators::operator&lt;;</highlight></codeline>
<codeline lineno="3353"><highlight class="normal">using<sp/>operators::operator&lt;=;</highlight></codeline>
<codeline lineno="3354"><highlight class="normal">using<sp/>operators::operator<sp/>and;</highlight></codeline>
<codeline lineno="3355"><highlight class="normal">using<sp/>operators::operator<sp/>or;</highlight></codeline>
<codeline lineno="3356"><highlight class="normal">using<sp/>operators::operator<sp/>not;</highlight></codeline>
<codeline lineno="3357"><highlight class="normal">using<sp/>operators::operator|;</highlight></codeline>
<codeline lineno="3358"><highlight class="normal">using<sp/>operators::operator/;</highlight></codeline>
<codeline lineno="3359"><highlight class="normal">using<sp/>operators::operator&gt;&gt;;</highlight></codeline>
<codeline lineno="3360"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>boost::inline<sp/>ext::ut::inline<sp/>v2_3_1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3361"><highlight class="normal"></highlight></codeline>
<codeline lineno="3362"><highlight class="normal">#if<sp/>(defined(__GNUC__)<sp/>||<sp/>defined(__clang__)<sp/>||<sp/>defined(__INTEL_COMPILER))<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/><sp/><sp/>!defined(__EMSCRIPTEN__)</highlight></codeline>
<codeline lineno="3364"><highlight class="normal">__attribute__((constructor(101)))<sp/>inline<sp/>void<sp/>cmd_line_args(</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>argc,<sp/>const<sp/>char*<sp/>argv[])<sp/>{</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/>::boost::ut::detail::cfg::largc<sp/>=<sp/>argc;</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/>::boost::ut::detail::cfg::largv<sp/>=<sp/>argv;</highlight></codeline>
<codeline lineno="3368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3369"><highlight class="normal">#else</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>MSVC,<sp/>largc/largv<sp/>are<sp/>initialized<sp/>with<sp/>__argc/__argv</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3371"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"></highlight></codeline>
<codeline lineno="3373"><highlight class="normal">#if<sp/>defined(_MSC_VER)</highlight></codeline>
<codeline lineno="3374"><highlight class="normal">#pragma<sp/>pop_macro(&quot;min&quot;)</highlight></codeline>
<codeline lineno="3375"><highlight class="normal">#pragma<sp/>pop_macro(&quot;max&quot;)</highlight></codeline>
<codeline lineno="3376"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"></highlight></codeline>
<codeline lineno="3378"><highlight class="normal">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/include/boost/ut.hpp"/>
  </compounddef>
</doxygen>
