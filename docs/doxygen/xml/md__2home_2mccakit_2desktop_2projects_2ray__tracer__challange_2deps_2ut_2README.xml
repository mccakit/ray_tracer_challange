<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README" kind="page">
    <compoundname>md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README</compoundname>
    <title>README</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ulink url="https://conan.io/center/boost-ext-ut"><image type="html" name="https://img.shields.io/github/v/release/boost-ext/ut" alt="Version" inline="yes"></image>
</ulink> <ulink url="https://github.com/boost-ext/ut/actions/workflows/linux.yml"><image type="html" name="https://github.com/boost-ext/ut/actions/workflows/linux.yml/badge.svg" alt="Linux" inline="yes"></image>
</ulink> <ulink url="https://github.com/boost-ext/ut/actions/workflows/macos.yml"><image type="html" name="https://github.com/boost-ext/ut/actions/workflows/macos.yml/badge.svg" alt="MacOs" inline="yes"></image>
</ulink> <ulink url="https://github.com/boost-ext/ut/actions/workflows/windows.yml"><image type="html" name="https://github.com/boost-ext/ut/actions/workflows/windows.yml/badge.svg" alt="Windows" inline="yes"></image>
</ulink> <ulink url="https://codecov.io/gh/boost-ext/ut"><image type="html" name="https://codecov.io/gh/boost-ext/ut/branch/master/graph/badge.svg" alt="Coveralls" inline="yes"></image>
</ulink> <ulink url="https://godbolt.org/z/f4jEcv9vo"><image type="html" name="https://img.shields.io/badge/try%20it-online-blue.svg" alt="Try it online" inline="yes"></image>
</ulink> <ulink url="https://aur.archlinux.org/packages/ut/"><image type="html" name="https://img.shields.io/aur/version/ut" alt="AUR Badge" inline="yes"></image>
</ulink></para>
<para><blockquote><para><zwj/>&quot;If you liked it then you `&quot;should have put a&quot;_test` on it&quot;, Beyonce rule </para>
</blockquote></para>
<sect1 id="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1autotoc_md0">
<title>UT / μt</title>
<para>| <ref refid="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1motivation" kindref="member">Motivation</ref> | <ref refid="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1quick-start" kindref="member">Quick Start</ref> | <ref refid="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1overview" kindref="member">Overview</ref> | <ref refid="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1tutorial" kindref="member">Tutorial</ref> | <ref refid="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1examples" kindref="member">Examples</ref> | <ref refid="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1user-guide" kindref="member">User Guide</ref> | <ref refid="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1faq" kindref="member">FAQ</ref> | <ref refid="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1benchmarks" kindref="member">Benchmarks</ref> |</para>
<para><details><summary>C++ <bold>single header/single module, macro-free</bold> μ(micro)/Unit Testing Framework</summary><para></para>
<para></para>
<para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ut_8hpp" kindref="compound">boost/ut.hpp</ref>&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>import<sp/>boost.ut;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="attr_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">...<sp/>values)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(values<sp/>+<sp/>...);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="apps_2main_8cpp_1a8216c1645620cdb2f629cde3ac02ffef" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">boost::ut;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;sum&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(<ref refid="attr_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>(0)<sp/>==<sp/>0_i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(<ref refid="attr_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>(1,<sp/>2)<sp/>==<sp/>3_i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(<ref refid="attr_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>(1,<sp/>2)<sp/>&gt;<sp/>0_i<sp/>and<sp/>41_i<sp/>==<sp/><ref refid="attr_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>(40,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".sh"><codeline><highlight class="normal">Running<sp/>&quot;sum&quot;...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sum.cpp:11:FAILED<sp/>[(3<sp/>&gt;<sp/>0<sp/>and<sp/>41<sp/>==<sp/>42)]</highlight></codeline>
<codeline><highlight class="normal">FAILED</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">===============================================================================</highlight></codeline>
<codeline><highlight class="normal">tests:<sp/><sp/><sp/>1<sp/>|<sp/>1<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">asserts:<sp/>3<sp/>|<sp/>2<sp/>passed<sp/>|<sp/>1<sp/>failed</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/f4jEcv9vo">https://godbolt.org/z/f4jEcv9vo</ulink> </para>
</blockquote><anchor id="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1motivation"/> <details><summary>Motivation</summary><para></para>
<para></para>
<para>Testing is a very important part of the Software Development, however, C++ doesn&apos;t provide any good testing facilities out of the box, which often leads into a poor testing experience for develops and/or lack of tests/coverage in general.</para>
<para><blockquote><para><zwj/>One should treat testing code as production code! </para>
</blockquote>Additionally, well established testing practises such as <ulink url="https://en.wikipedia.org/wiki/Test-driven_development">Test Driven Development (TDD)</ulink>/<ulink url="https://en.wikipedia.org/wiki/Behavior-driven_development">Behaviour Driven Development (BDD)</ulink> are often not followed due to the same reasons.</para>
<para>The following snippet is a common example of testing with projects in C++.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="apps_2main_8cpp_1a8216c1645620cdb2f629cde3ac02ffef" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>sum<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>assert(3<sp/>==<sp/><ref refid="attr_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>(1,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>There are quite a few problems with the approach above</para>
<para><itemizedlist>
<listitem><para>No names for tests (Hard to follow intentions by further readers)</para>
</listitem><listitem><para>No automatic registration of tests (No way to run specific tests)</para>
</listitem><listitem><para>Hard to debug (Assertions don&apos;t provide any information why it failed)</para>
</listitem><listitem><para>Hard to scale (No easy path forward for parameterized tests, multiple suites, parallel execution, etc...)</para>
</listitem><listitem><para>Hard to integrate (No easy way to have a custom output such as XML for CI integration)</para>
</listitem><listitem><para>Easy to make mistakes (With implicit casting, floating point comparison, pointer comparison for strings, etc...)</para>
</listitem><listitem><para>Hard to follow good practises such as <computeroutput>TDD/BDD</computeroutput> (Lack of support for sections and declarative expressions)</para>
</listitem><listitem><para>...</para>
</listitem></itemizedlist>
</para>
<para><computeroutput>UT</computeroutput> is trying to address these issues by simplifying testing experience with a few simple steps:</para>
<para><itemizedlist>
<listitem><para>Just get a single <ulink url="https://github.com/boost-ext/ut/blob/master/include/boost/ut.hpp">header</ulink> or <ulink url="https://github.com/boost-ext/ut/blob/master/include/boost/ut.cppm">module+header</ulink></para>
</listitem><listitem><para>Integrate it into your project</para>
</listitem><listitem><para>Learn a few simple concepts (<ref refid="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1api" kindref="member">expect, test, suite</ref>)</para>
</listitem></itemizedlist>
</para>
<para>And you good to go!</para>
<para>Okay, great, but why I would use <computeroutput>UT</computeroutput> over other/similar testing frameworks already available in C++?</para>
<para><itemizedlist>
<listitem><para><ulink url="https://github.com/boostorg/test">Boost.Test</ulink></para>
</listitem><listitem><para><ulink url="https://github.com/google/googletest">GoogleTest</ulink></para>
</listitem><listitem><para><ulink url="https://github.com/catchorg/Catch2">Catch</ulink></para>
</listitem><listitem><para><ulink url="https://en.wikipedia.org/wiki/List_of_unit_testing_frameworks#C++">...</ulink></para>
</listitem></itemizedlist>
</para>
<para>Great question! There are a few unique features which makes <computeroutput>UT</computeroutput> worth trying</para>
<para><itemizedlist>
<listitem><para>Firstly, it supports all the basic Unit Testing Framework features (automatic registration of tests, assertions, suites, etc...)</para>
</listitem><listitem><para>It&apos;s easy to integrate (it&apos;s just one <ulink url="https://github.com/boost-ext/ut/blob/master/include/boost/ut.hpp">header/module</ulink>)</para>
</listitem><listitem><para>It&apos;s macro free which makes testing experience that much nicer (it uses modern C++ features instead, macros are opt-in rather than being compulsory - <ref refid="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1macros" kindref="member">Can I still use macros?</ref>)</para>
</listitem><listitem><para>It&apos;s flexible (all parts of the framework such as: <ref refid="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1examples" kindref="member">runner, reporter, printer</ref> can be customized, basically most other Unit Testing Frameworks can be implemented on top of UT primitives)</para>
</listitem><listitem><para>It has smaller learning curve (just a few simple concepts (<ref refid="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1api" kindref="member">expect, test, suite</ref>))</para>
</listitem><listitem><para>It leverages C++ features to support more complex testing (<ref refid="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1examples" kindref="member">parameterized</ref>)</para>
</listitem><listitem><para>It&apos;s faster to compile and execute than similar frameworks which makes it suitable for bigger projects without additional hassle (<ref refid="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1benchmarks" kindref="member">Benchmarks</ref>)</para>
</listitem><listitem><para>It supports <ref refid="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1examples" kindref="member">TDD/BDD</ref> workflows</para>
</listitem><listitem><para>It supports <ref refid="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1examples" kindref="member">Gherkin</ref> specification</para>
</listitem><listitem><para>It supports <ref refid="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1examples" kindref="member">Spec</ref></para>
</listitem><listitem><para>...</para>
</listitem></itemizedlist>
</para>
<para>Sounds intriguing/interesting? Learn more at</para>
<para><itemizedlist>
<listitem><para><ref refid="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1tutorial" kindref="member">Tutorial</ref></para>
</listitem><listitem><para><ref refid="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1examples" kindref="member">Examples</ref></para>
</listitem><listitem><para><ref refid="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1user-guide" kindref="member">User-Guide</ref></para>
</listitem></itemizedlist>
</para>
<para></para>
<para></para>
</details></para>
<para><anchor id="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1quick-start"/> <details><summary>Quick Start</summary><para></para>
<para></para>
<para><blockquote><para><zwj/><ulink url="https://bit.ly/ut-quick-start">https://bit.ly/ut-quick-start</ulink> (slides) </para>
</blockquote></para>
<para></para>
</details></para>
<para><anchor id="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1overview"/> <details><summary>Overview</summary><para></para>
<para></para>
<para><itemizedlist>
<listitem><para>No dependencies (<ref refid="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1cpp-20" kindref="member">C++20</ref>, Tested Compilers: GCC-9+, Clang-9.0+, Apple Clang-11.0.0+, MSVC-2019+*, Clang-cl-9.0+</para>
</listitem><listitem><para>Single header/module (<ulink url="https://github.com/boost-ext/ut/blob/master/include/boost/ut.hpp">boost/ut.hpp</ulink>)</para>
</listitem><listitem><para>Macro-free (<ref refid="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1how-it-works" kindref="member">How does it work?</ref>)</para>
</listitem><listitem><para>Easy to use (<ref refid="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1api" kindref="member">Minimal API</ref> - <computeroutput>test, suite, operators, literals, [expect]</computeroutput>)</para>
</listitem><listitem><para>Fast to compile/execute (<ref refid="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1benchmarks" kindref="member">Benchmarks</ref>)</para>
</listitem><listitem><para>Features (<ulink url="https://github.com/boost-ext/ut/blob/master/example/expect.cpp">Assertions</ulink>, <ulink url="https://github.com/boost-ext/ut/blob/master/example/suite.cpp">Suites</ulink>, <ulink url="https://github.com/boost-ext/ut/blob/master/example/test.cpp">Tests</ulink>, <ulink url="https://github.com/boost-ext/ut/blob/master/example/section.cpp">Sections</ulink>, <ulink url="https://github.com/boost-ext/ut/blob/master/example/parameterized.cpp">Parameterized</ulink>, <ulink url="https://github.com/boost-ext/ut/blob/master/example/BDD.cpp">BDD</ulink>, <ulink url="https://github.com/boost-ext/ut/blob/master/example/gherkin.cpp">Gherkin</ulink>, <ulink url="https://github.com/boost-ext/ut/blob/master/example/spec.cpp">Spec</ulink>, <ulink url="https://github.com/boost-ext/ut/blob/master/example/matcher.cpp">Matchers</ulink>, <ulink url="https://github.com/boost-ext/ut/blob/master/example/log.cpp">Logging</ulink>, <ulink url="https://github.com/boost-ext/ut/blob/master/example/cfg/runner.cpp">Runners</ulink>, <ulink url="https://github.com/boost-ext/ut/blob/master/example/cfg/reporter.cpp">Reporters</ulink>, <ulink url="https://github.com/boost-ext/ut/blob/master/example">...</ulink>)</para>
</listitem><listitem><para>Integrations (<ulink url="https://github.com/approvals/ApprovalTests.cpp/releases/tag/v.7.0.0">ApprovalTests.cpp</ulink>)</para>
</listitem></itemizedlist>
</para>
<para></para>
<para></para>
</details></para>
<para><anchor id="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1tutorial"/> <details><summary>Tutorial</summary><para></para>
<para></para>
<para><details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>Step 0: Get it...</summary><para></para>
<para></para>
<para><blockquote><para><zwj/>Get the latest latest header/module from <ulink url="https://github.com/boost-ext/ut/blob/master/include/boost/ut.hpp">here!</ulink> </para>
</blockquote><blockquote><para><zwj/>Include/Import </para>
</blockquote><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>#include<sp/>&lt;boost/ut.hpp&gt;<sp/>//<sp/>single<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>import<sp/>boost.ut;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>single<sp/>module<sp/>(C++20)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="apps_2main_8cpp_1a8216c1645620cdb2f629cde3ac02ffef" kindref="member">main</ref>()<sp/>{<sp/>}</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/>Compile &amp; Run </para>
</blockquote><programlisting><codeline><highlight class="normal">$CXX<sp/>main.cpp<sp/>&amp;&amp;<sp/>./a.out</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(0<sp/>assert<sp/>in<sp/>0<sp/>test)</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/>[Optional] Install it </para>
</blockquote><programlisting><codeline><highlight class="normal">cmake<sp/>-Bbuild<sp/>-H.</highlight></codeline>
<codeline><highlight class="normal">cd<sp/>build<sp/>&amp;&amp;<sp/>make<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>run<sp/>tests</highlight></codeline>
<codeline><highlight class="normal">cd<sp/>build<sp/>&amp;&amp;<sp/>make<sp/>install<sp/>#<sp/>install</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/>[Optional] CMake integration </para>
</blockquote>This project provides a CMake config and target. Just load <computeroutput>ut</computeroutput> with <computeroutput>find_package</computeroutput> to import the <computeroutput>Boost::ut</computeroutput> target. Linking against this target will add the necessary include directory for the single header file. This is demonstrated in the following example.</para>
<para><programlisting filename=".cmake"><codeline><highlight class="normal">find_package(ut<sp/>REQUIRED)</highlight></codeline>
<codeline><highlight class="normal">add_library(my_test<sp/>my_test.cpp)</highlight></codeline>
<codeline><highlight class="normal">target_link_libraries(my_test<sp/>PRIVATE<sp/>Boost::ut)</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/>[Optional] <ulink url="https://conan.io">Conan</ulink> integration </para>
</blockquote>The <ulink url="https://conan.io/center/boost-ext-ut">boost-ext-ut</ulink> package is available from <ulink url="https://conan.io/center/">Conan Center</ulink>. Just include it in your project&apos;s Conanfile with <computeroutput>boost-ext-ut/2.3.1</computeroutput>.</para>
<para></para>
<para></para>
</details></para>
<para><details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>Step 1: Expect it...</summary><para></para>
<para></para>
<para><blockquote><para><zwj/>Let&apos;s write our first assertion, shall we? </para>
</blockquote><programlisting filename=".cpp"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="apps_2main_8cpp_1a8216c1645620cdb2f629cde3ac02ffef" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>boost::ut::expect(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(1<sp/>asserts<sp/>in<sp/>0<sp/>test)</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/vfx-eB">https://godbolt.org/z/vfx-eB</ulink> </para>
</blockquote></para>
<para><blockquote><para><zwj/>Okay, let&apos;s make it fail now? </para>
</blockquote><programlisting filename=".cpp"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="apps_2main_8cpp_1a8216c1645620cdb2f629cde3ac02ffef" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>boost::ut::expect(1<sp/>==<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">main.cpp:4:FAILED<sp/>[false]</highlight></codeline>
<codeline><highlight class="normal">===============================================================================</highlight></codeline>
<codeline><highlight class="normal">tests:<sp/><sp/><sp/>0<sp/>|<sp/>0<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">asserts:<sp/>1<sp/>|<sp/>0<sp/>passed<sp/>|<sp/>1<sp/>failed</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/7qTePx">https://godbolt.org/z/7qTePx</ulink> </para>
</blockquote><blockquote><para><zwj/>Notice that expression <computeroutput>1 == 2</computeroutput> hasn&apos;t been printed. Instead we got <computeroutput>false</computeroutput>? </para>
</blockquote><blockquote><para><zwj/>Let&apos;s print it then? </para>
</blockquote><programlisting filename=".cpp"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="apps_2main_8cpp_1a8216c1645620cdb2f629cde3ac02ffef" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">boost::ut;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(1_i<sp/>==<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">main.cpp:4:FAILED<sp/>[1<sp/>==<sp/>2]</highlight></codeline>
<codeline><highlight class="normal">===============================================================================</highlight></codeline>
<codeline><highlight class="normal">tests:<sp/><sp/><sp/>0<sp/>|<sp/>0<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">asserts:<sp/>1<sp/>|<sp/>0<sp/>passed<sp/>|<sp/>1<sp/>failed</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/7MXVzu">https://godbolt.org/z/7MXVzu</ulink> </para>
</blockquote><blockquote><para><zwj/>Okay, now we have it! <computeroutput>1 == 2</computeroutput> has been printed as expected. Notice the User Defined Literal (UDL) <computeroutput>1_i</computeroutput> was used. <computeroutput>_i</computeroutput> is a compile-time constant integer value </para>
</blockquote><itemizedlist>
<listitem><para>It allows to override comparison operators 👍</para>
</listitem><listitem><para>It disallow comparison of different types 👍</para>
</listitem></itemizedlist>
</para>
<para>See the <ref refid="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1user-guide" kindref="member">User-guide</ref> for more details.</para>
<para><blockquote><para><zwj/>Alternatively, a <computeroutput>terse</computeroutput> notation (no expect required) can be used. </para>
</blockquote><programlisting filename=".cpp"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="apps_2main_8cpp_1a8216c1645620cdb2f629cde3ac02ffef" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">boost::ut::literals;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">boost::ut::operators::terse;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1_i<sp/>==<sp/>2;<sp/></highlight><highlight class="comment">//<sp/>terse<sp/>notation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">main.cpp:7:FAILED<sp/>[1<sp/>==<sp/>2]</highlight></codeline>
<codeline><highlight class="normal">===============================================================================</highlight></codeline>
<codeline><highlight class="normal">tests:<sp/><sp/><sp/>0<sp/>|<sp/>0<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">asserts:<sp/>1<sp/>|<sp/>0<sp/>passed<sp/>|<sp/>1<sp/>failed</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/s77GSm">https://godbolt.org/z/s77GSm</ulink> </para>
</blockquote><blockquote><para><zwj/>Other expression syntaxes are also available. </para>
</blockquote><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(1_i<sp/>==<sp/>2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>UDL<sp/>syntax</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(1<sp/>==<sp/>2_i);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>UDL<sp/>syntax</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(that<sp/>%<sp/>1<sp/>==<sp/>2);<sp/><sp/></highlight><highlight class="comment">//<sp/>Matcher<sp/>syntax</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(eq(1,<sp/>2));<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eq/neq/gt/ge/lt/le</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">main.cpp:6:FAILED<sp/>[1<sp/>==<sp/>2]</highlight></codeline>
<codeline><highlight class="normal">main.cpp:7:FAILED<sp/>[1<sp/>==<sp/>2]</highlight></codeline>
<codeline><highlight class="normal">main.cpp:8:FAILED<sp/>[1<sp/>==<sp/>2]</highlight></codeline>
<codeline><highlight class="normal">main.cpp:9:FAILED<sp/>[1<sp/>==<sp/>2]</highlight></codeline>
<codeline><highlight class="normal">===============================================================================</highlight></codeline>
<codeline><highlight class="normal">tests:<sp/><sp/><sp/>0<sp/>|<sp/>0<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">asserts:<sp/>4<sp/>|<sp/>0<sp/>passed<sp/>|<sp/>4<sp/>failed</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/QbgGtc">https://godbolt.org/z/QbgGtc</ulink> </para>
</blockquote><blockquote><para><zwj/>Okay, but what about the case if my assertion is fatal. Meaning that the program will crash unless the processing will be terminated. Nothing easier, let&apos;s just add <computeroutput>fatal</computeroutput> call to make the test fail immediately. </para>
</blockquote><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(fatal(1<sp/>==<sp/>2_i));<sp/></highlight><highlight class="comment">//<sp/>fatal<sp/>assertion</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(1_i<sp/>==<sp/>2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>executed</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">main.cpp:6:FAILED<sp/>[1<sp/>==<sp/>2]</highlight></codeline>
<codeline><highlight class="normal">===============================================================================</highlight></codeline>
<codeline><highlight class="normal">tests:<sp/><sp/><sp/>1<sp/>|<sp/>1<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">asserts:<sp/>2<sp/>|<sp/>0<sp/>passed<sp/>|<sp/>2<sp/>failed</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/WMe8Y1">https://godbolt.org/z/WMe8Y1</ulink> </para>
</blockquote><blockquote><para><zwj/>But my expression is more complex than just simple comparisons. Not a problem, logic operators are also supported in the <computeroutput>expect</computeroutput> 👍. </para>
</blockquote><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(42l<sp/>==<sp/>42_l<sp/>and<sp/>1<sp/>==<sp/>2_i);<sp/></highlight><highlight class="comment">//<sp/>compound<sp/>expression</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">main.cpp:5:FAILED<sp/>[(42<sp/>==<sp/>42<sp/>and<sp/>1<sp/>==<sp/>2)]</highlight></codeline>
<codeline><highlight class="normal">===============================================================================</highlight></codeline>
<codeline><highlight class="normal">tests:<sp/><sp/><sp/>0<sp/>|<sp/>0<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">asserts:<sp/>1<sp/>|<sp/>0<sp/>passed<sp/>|<sp/>1<sp/>failed</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/aEhX4t">https://godbolt.org/z/aEhX4t</ulink> </para>
</blockquote><blockquote><para><zwj/>Can I add a custom message though? Sure, <computeroutput>expect</computeroutput> calls are streamable! </para>
</blockquote><programlisting filename=".cpp"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="apps_2main_8cpp_1a8216c1645620cdb2f629cde3ac02ffef" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(42l<sp/>==<sp/>42_l<sp/>and<sp/>1<sp/>==<sp/>2_i)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;additional<sp/>info&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">main.cpp:5:FAILED<sp/>[(42<sp/>==<sp/>42<sp/>and<sp/>1<sp/>==<sp/>2)]<sp/>additional<sp/>info</highlight></codeline>
<codeline><highlight class="normal">===============================================================================</highlight></codeline>
<codeline><highlight class="normal">tests:<sp/><sp/><sp/>0<sp/>|<sp/>0<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">asserts:<sp/>1<sp/>|<sp/>0<sp/>passed<sp/>|<sp/>1<sp/>failed</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/>That&apos;s nice, can I use custom messages and fatal assertions? Yes, stream the <computeroutput>fatal</computeroutput>! </para>
</blockquote><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(fatal(1<sp/>==<sp/>2_i))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;fatal<sp/>assertion&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(1_i<sp/>==<sp/>2);</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">FAILED</highlight></codeline>
<codeline><highlight class="normal">in:<sp/>main.cpp:6<sp/>-<sp/>test<sp/>condition:<sp/><sp/>[1<sp/>==<sp/>2]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>fatal<sp/>assertion</highlight></codeline>
<codeline><highlight class="normal">===============================================================================</highlight></codeline>
<codeline><highlight class="normal">tests:<sp/><sp/><sp/>0<sp/>|<sp/>2<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">asserts:<sp/>0<sp/>|<sp/>0<sp/>passed<sp/>|<sp/>2<sp/>failed</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/>I use <computeroutput>std::expected</computeroutput>, can I stream its <computeroutput>error()</computeroutput> upon failure? Yes, since <computeroutput>std::expected</computeroutput>&apos;s <computeroutput>error()</computeroutput> can only be called when there is no value it requires lazy evaluation. </para>
</blockquote><programlisting filename=".cpp"><codeline><highlight class="stringliteral">&quot;lazy<sp/>log&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::expected&lt;bool,<sp/>std::string&gt;<sp/>e<sp/>=<sp/>std::unexpected(</highlight><highlight class="stringliteral">&quot;lazy<sp/>evaluated&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(e.has_value())<sp/>&lt;&lt;<sp/>[&amp;]<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e.error();<sp/>}<sp/>&lt;&lt;<sp/>fatal;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(e.value()<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">Running<sp/>test<sp/>&quot;lazy<sp/>log&quot;...<sp/>FAILED</highlight></codeline>
<codeline><highlight class="normal">in:<sp/>main.cpp:12<sp/>-<sp/>test<sp/>condition:<sp/><sp/>[false]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>lazy<sp/>evaluated</highlight></codeline>
<codeline><highlight class="normal">===============================================================================</highlight></codeline>
<codeline><highlight class="normal">tests:<sp/><sp/><sp/>1<sp/>|<sp/>2<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">asserts:<sp/>0<sp/>|<sp/>0<sp/>passed<sp/>|<sp/>2<sp/>failed</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/v2PDuU">https://godbolt.org/z/v2PDuU</ulink> </para>
</blockquote></para>
<para></para>
</details></para>
<para><details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>Step 2: Group it...</summary><para></para>
<para></para>
<para><blockquote><para><zwj/>Assertions are great, but how to combine them into more cohesive units? <computeroutput>Test cases</computeroutput> are the way to go! They allow to group expectations for the same functionality into coherent units. </para>
</blockquote><programlisting filename=".cpp"><codeline><highlight class="stringliteral">&quot;hello<sp/>world&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{<sp/>};</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/>Alternatively <computeroutput>test(&quot;hello world&quot;) = [] {}</computeroutput> can be used. </para>
</blockquote><programlisting><codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(0<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/Bh-EmY">https://godbolt.org/z/Bh-EmY</ulink> </para>
</blockquote></para>
<para><blockquote><para><zwj/>Notice <computeroutput>1 tests</computeroutput> but <computeroutput>0 asserts</computeroutput>. </para>
</blockquote><blockquote><para><zwj/>Let&apos;s make our first end-2-end test case, shall we? </para>
</blockquote><programlisting filename=".cpp"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="apps_2main_8cpp_1a8216c1645620cdb2f629cde3ac02ffef" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;hello<sp/>world&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>43;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(42_i<sp/>==<sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">Running<sp/>&quot;hello<sp/>world&quot;...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>main.cpp:8:FAILED<sp/>[42<sp/>==<sp/>43]</highlight></codeline>
<codeline><highlight class="normal">FAILED</highlight></codeline>
<codeline><highlight class="normal">===============================================================================</highlight></codeline>
<codeline><highlight class="normal">tests:<sp/><sp/><sp/>1<sp/>|<sp/>1<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">asserts:<sp/>1<sp/>|<sp/>0<sp/>passed<sp/>|<sp/>1<sp/>failed</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/Y43mXz">https://godbolt.org/z/Y43mXz</ulink> </para>
</blockquote><blockquote><para><zwj/>👍 We are done here! </para>
</blockquote><blockquote><para><zwj/>I&apos;d like to nest my tests, though and share setup/tear-down. With lambdas used to represents <computeroutput>tests/sections</computeroutput> we can easily achieve that. Let&apos;s just take a look at the following example. </para>
</blockquote><programlisting filename=".cpp"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="apps_2main_8cpp_1a8216c1645620cdb2f629cde3ac02ffef" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;[vector]&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>v(5);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(fatal(5_ul<sp/>==<sp/>std::size(v)));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>should(</highlight><highlight class="stringliteral">&quot;resize<sp/>bigger&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[v]<sp/>{<sp/></highlight><highlight class="comment">//<sp/>or<sp/>&quot;resize<sp/>bigger&quot;_test</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mut(v).resize(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(10_ul<sp/>==<sp/>std::size(v));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(fatal(5_ul<sp/>==<sp/>std::size(v)));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>should(</highlight><highlight class="stringliteral">&quot;resize<sp/>smaller&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[=]()<sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>or<sp/>&quot;resize<sp/>smaller&quot;_test</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.resize(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(0_ul<sp/>==<sp/>std::size(v));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(4<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/XWAdYt">https://godbolt.org/z/XWAdYt</ulink> </para>
</blockquote><blockquote><para><zwj/>Nice! That was easy, but I&apos;m a believer into Behaviour Driven Development (<computeroutput>BDD</computeroutput>). Is there a support for that? Yes! Same example as above just with the <computeroutput>BDD</computeroutput> syntax. </para>
</blockquote><programlisting filename=".cpp"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="apps_2main_8cpp_1a8216c1645620cdb2f629cde3ac02ffef" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;vector&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>given(</highlight><highlight class="stringliteral">&quot;I<sp/>have<sp/>a<sp/>vector&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>v(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(fatal(5_ul<sp/>==<sp/>std::size(v)));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>when(</highlight><highlight class="stringliteral">&quot;I<sp/>resize<sp/>bigger&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[=]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mut(v).resize(10);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>then(</highlight><highlight class="stringliteral">&quot;The<sp/>size<sp/>should<sp/>increase&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[=]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(10_ul<sp/>==<sp/>std::size(v));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(2<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/dnvxsE">https://godbolt.org/z/dnvxsE</ulink> </para>
</blockquote><blockquote><para><zwj/>On top of that, <computeroutput>feature/scenario</computeroutput> aliases can be leveraged. </para>
</blockquote><programlisting filename=".cpp"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="apps_2main_8cpp_1a8216c1645620cdb2f629cde3ac02ffef" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>feature(</highlight><highlight class="stringliteral">&quot;vector&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>scenario(</highlight><highlight class="stringliteral">&quot;size&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>given(</highlight><highlight class="stringliteral">&quot;I<sp/>have<sp/>a<sp/>vector&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>v(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(fatal(5_ul<sp/>==<sp/>std::size(v)));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>when(</highlight><highlight class="stringliteral">&quot;I<sp/>resize<sp/>bigger&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[=]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mut(v).resize(10);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>then(</highlight><highlight class="stringliteral">&quot;The<sp/>size<sp/>should<sp/>increase&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[=]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(10_ul<sp/>==<sp/>std::size(v));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(2<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/T4cWss">https://godbolt.org/z/T4cWss</ulink> </para>
</blockquote><blockquote><para><zwj/>Can I use <computeroutput>Gherkin</computeroutput>? Yeah, let&apos;s rewrite the example using <computeroutput>Gherkin</computeroutput> specification </para>
</blockquote><programlisting filename=".cpp"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="apps_2main_8cpp_1a8216c1645620cdb2f629cde3ac02ffef" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bdd::gherkin::steps<sp/>steps<sp/>=<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>steps)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>steps.feature(</highlight><highlight class="stringliteral">&quot;Vector&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[&amp;]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>steps.scenario(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[&amp;]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>steps.given(</highlight><highlight class="stringliteral">&quot;I<sp/>have<sp/>a<sp/>vector&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[&amp;]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>v(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(fatal(5_ul<sp/>==<sp/>std::size(v)));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>steps.when(</highlight><highlight class="stringliteral">&quot;I<sp/>resize<sp/>bigger&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[&amp;]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.resize(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>steps.then(</highlight><highlight class="stringliteral">&quot;The<sp/>size<sp/>should<sp/>increase&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[&amp;]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(10_ul<sp/>==<sp/>std::size(v));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;Vector&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>steps<sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>R</highlight><highlight class="stringliteral">&quot;(</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>Feature:<sp/>Vector</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scenario:<sp/>Resize</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Given<sp/>I<sp/>have<sp/>a<sp/>vector</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>I<sp/>resize<sp/>bigger</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Then<sp/>The<sp/>size<sp/>should<sp/>increase</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>)&quot;;</highlight></codeline>
<codeline><highlight class="stringliteral">}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(2<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/jb1d8P">https://godbolt.org/z/jb1d8P</ulink> </para>
</blockquote><blockquote><para><zwj/>Nice, is <computeroutput>Spec</computeroutput> notation supported as well? </para>
</blockquote><programlisting filename=".cpp"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="apps_2main_8cpp_1a8216c1645620cdb2f629cde3ac02ffef" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>describe(</highlight><highlight class="stringliteral">&quot;vector&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>v(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(fatal(5_ul<sp/>==<sp/>std::size(v)));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>it(</highlight><highlight class="stringliteral">&quot;should<sp/>resize<sp/>bigger&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[v]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mut(v).resize(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(10_ul<sp/>==<sp/>std::size(v));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(2<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/6jKKzT">https://godbolt.org/z/6jKKzT</ulink> </para>
</blockquote><blockquote><para><zwj/>That&apos;s great, but how can call the same tests with different arguments/types to be DRY (Don&apos;t Repeat Yourself)? Parameterized tests to the rescue! </para>
</blockquote><programlisting filename=".cpp"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="apps_2main_8cpp_1a8216c1645620cdb2f629cde3ac02ffef" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/>std::<ref refid="namespacetuple_1a72eece7f7cb532d59602b6d4e142d478" kindref="member">vector</ref>{1,<sp/>2,<sp/>3})<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>test(</highlight><highlight class="stringliteral">&quot;parameterized<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(i))<sp/>=<sp/>[i]<sp/>{<sp/></highlight><highlight class="comment">//<sp/>3<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(that<sp/>%<sp/>i<sp/>&gt;<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>3<sp/>asserts</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(3<sp/>asserts<sp/>in<sp/>3<sp/>tests)</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/Utnd6X">https://godbolt.org/z/Utnd6X</ulink> </para>
</blockquote><blockquote><para><zwj/>That&apos;s it 😮! Alternatively, a convenient test syntax is also provided 👍 </para>
</blockquote><programlisting filename=".cpp"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="apps_2main_8cpp_1a8216c1645620cdb2f629cde3ac02ffef" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;args&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>arg)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(arg<sp/>&gt;<sp/>0_i)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;all<sp/>values<sp/>greater<sp/>than<sp/>0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>|<sp/>std::vector{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(3<sp/>asserts<sp/>in<sp/>3<sp/>tests)</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/6FHtpq">https://godbolt.org/z/6FHtpq</ulink> </para>
</blockquote><blockquote><para><zwj/>Check <ref refid="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1examples" kindref="member">Examples</ref> for further reading. </para>
</blockquote></para>
<para></para>
</details></para>
<para><details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>Step 3: Scale it...</summary><para></para>
<para></para>
<para><blockquote><para><zwj/>Okay, but my project is more complex than that. How can I scale? <computeroutput>Test suites</computeroutput> will make that possible. By using <computeroutput>suite</computeroutput> in translation units <computeroutput>tests</computeroutput> defined inside will be automatically registered 👍 </para>
</blockquote><programlisting filename=".cpp"><codeline><highlight class="normal">suite<sp/><ref refid="example_2suite_8cpp_1a4cdc464ed0e9d1c57cb06b75f41679df" kindref="member">errors</ref><sp/>=<sp/>[]<sp/>{<sp/></highlight><highlight class="comment">//<sp/>or<sp/>suite&lt;&quot;nameofsuite&quot;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;exception&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(</highlight><highlight class="keywordflow">throws</highlight><highlight class="normal">([]<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>0;<sp/>}))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;throws<sp/>any<sp/>exception&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;failure&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(aborts([]<sp/>{<sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="apps_2main_8cpp_1a8216c1645620cdb2f629cde3ac02ffef" kindref="member">main</ref>()<sp/>{<sp/>}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(2<sp/>asserts<sp/>in<sp/>2<sp/>tests)</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/_ccGwZ">https://godbolt.org/z/_ccGwZ</ulink> </para>
</blockquote></para>
</details></para>
</details></para>
</details></para>
<sect2 id="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1autotoc_md1">
<title>&lt;/blockquote&gt;</title>
<para><blockquote><para><zwj/>What&apos;s next?<itemizedlist>
<listitem><para><ref refid="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1examples" kindref="member">Examples</ref></para>
</listitem><listitem><para><ref refid="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1user-guide" kindref="member">User-Guide</ref> </para>
</listitem></itemizedlist>
</para>
</blockquote></para>
<para><anchor id="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1examples"/> <details><summary>Examples</summary><para></para>
<para></para>
<para><details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>Assertions</summary><para></para>
<para></para>
<para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(0_i<sp/>==<sp/><ref refid="attr_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>());</highlight></codeline>
<codeline><highlight class="normal"><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(2_i<sp/>!=<sp/><ref refid="attr_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>(1,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal"><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(<ref refid="attr_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>(1)<sp/>&gt;=<sp/>0_i);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(<ref refid="attr_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>(1)<sp/>&lt;=<sp/>1_i);</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(3_i<sp/>==<sp/><ref refid="attr_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>(1,<sp/>2))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;wrong<sp/>sum&quot;</highlight><highlight class="normal">;</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>expressions</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(0_i<sp/>==<sp/><ref refid="attr_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>()<sp/>and<sp/>42_i<sp/>==<sp/><ref refid="attr_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>(40,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal"><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(0_i<sp/>==<sp/><ref refid="attr_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>()<sp/>or<sp/>1_i<sp/>==<sp/><ref refid="attr_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;compound&quot;</highlight><highlight class="normal">;</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>matchers</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(that<sp/>%<sp/>0<sp/>==<sp/><ref refid="attr_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>());</highlight></codeline>
<codeline><highlight class="normal"><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(that<sp/>%<sp/>42<sp/>==<sp/><ref refid="attr_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>(40,<sp/>2)<sp/>and<sp/>that<sp/>%<sp/>(1<sp/>+<sp/>2)<sp/>==<sp/><ref refid="attr_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>(1,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal"><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(that<sp/>%<sp/>1<sp/>!=<sp/>2<sp/>or<sp/>2_i<sp/>&gt;<sp/>3);</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>eq/neq/gt/ge/lt/le</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(eq(42,<sp/><ref refid="attr_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>(40,<sp/>2)));</highlight></codeline>
<codeline><highlight class="normal"><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(neq(1,<sp/>2));</highlight></codeline>
<codeline><highlight class="normal"><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(eq(<ref refid="attr_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>(1),<sp/>1)<sp/>and<sp/>neq(<ref refid="attr_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>(1,<sp/>2),<sp/>2));</highlight></codeline>
<codeline><highlight class="normal"><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(eq(1,<sp/>1)<sp/>and<sp/>that<sp/>%<sp/>1<sp/>==<sp/>1<sp/>and<sp/>1_i<sp/>==<sp/>1);</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>floating<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(42.1_d<sp/>==<sp/>42.101)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;epsilon=0.1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(42.10_d<sp/>==<sp/>42.101)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;epsilon=0.01&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(42.10000001<sp/>==<sp/>42.1_d)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;epsilon=0.1&quot;</highlight><highlight class="normal">;</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compile_time_v<sp/>=<sp/>42;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>run_time_v<sp/>=<sp/>99;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(constant&lt;42_i<sp/>==<sp/>compile_time_v&gt;<sp/>and<sp/>run_time_v<sp/>==<sp/>99_i);</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(1_i<sp/>==<sp/>2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;should<sp/>fail&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(<ref refid="attr_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>()<sp/>==<sp/>1_i<sp/>or<sp/>2_i<sp/>==<sp/><ref refid="attr_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;sum?&quot;</highlight><highlight class="normal">;</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">assertions.cpp:53:FAILED<sp/>[1<sp/>==<sp/>2]<sp/>should<sp/>fail</highlight></codeline>
<codeline><highlight class="normal">assertions.cpp:54:FAILED<sp/>[(0<sp/>==<sp/>1<sp/>or<sp/>2<sp/>==<sp/>0)]<sp/>sum?</highlight></codeline>
<codeline><highlight class="normal">===============================================================================</highlight></codeline>
<codeline><highlight class="normal">tests:<sp/><sp/><sp/>0<sp/><sp/>|<sp/>0<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">asserts:<sp/>20<sp/>|<sp/>18<sp/>passed<sp/>|<sp/>2<sp/>failed</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/E1c7G5">https://godbolt.org/z/E1c7G5</ulink> </para>
</blockquote></para>
<para></para>
</details></para>
<para><details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>Tests</summary><para></para>
<para></para>
<para><details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>Run/Skip/Tag</summary><para></para>
<para></para>
<para><programlisting filename=".cpp"><codeline><highlight class="stringliteral">&quot;run<sp/>UDL&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(42_i<sp/>==<sp/>42);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">skip<sp/>/<sp/></highlight><highlight class="stringliteral">&quot;don&apos;t<sp/>run<sp/>UDL&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(42_i<sp/>==<sp/>43)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;should<sp/>not<sp/>fire!&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(1<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
<codeline><highlight class="normal">1<sp/>tests<sp/>skipped</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">test(</highlight><highlight class="stringliteral">&quot;run<sp/>function&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(42_i<sp/>==<sp/>42);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">skip<sp/>/<sp/>test(</highlight><highlight class="stringliteral">&quot;don&apos;t<sp/>run<sp/>function&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(42_i<sp/>==<sp/>43)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;should<sp/>not<sp/>fire!&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(1<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
<codeline><highlight class="normal">1<sp/>tests<sp/>skipped</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">tag(</highlight><highlight class="stringliteral">&quot;nightly&quot;</highlight><highlight class="normal">)<sp/>/<sp/>tag(</highlight><highlight class="stringliteral">&quot;slow&quot;</highlight><highlight class="normal">)<sp/>/</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="stringliteral">&quot;performance&quot;</highlight><highlight class="normal">_test=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(42_i<sp/>==<sp/>42);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tag(</highlight><highlight class="stringliteral">&quot;slow&quot;</highlight><highlight class="normal">)<sp/>/</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="stringliteral">&quot;run<sp/>slowly&quot;</highlight><highlight class="normal">_test=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(42_i<sp/>==<sp/>43)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;should<sp/>not<sp/>fire!&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">cfg&lt;override&gt;<sp/>=<sp/>{.tag<sp/>=<sp/>{&quot;nightly&quot;}};</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(1<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
<codeline><highlight class="normal">1<sp/>tests<sp/>skipped</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/X3_kG4">https://godbolt.org/z/X3_kG4</ulink> </para>
</blockquote></para>
<para></para>
</details></para>
<para><details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>Sections</summary><para></para>
<para></para>
<para><programlisting filename=".cpp"><codeline><highlight class="stringliteral">&quot;[vector]&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>v(5);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(fatal(5_ul<sp/>==<sp/>std::size(v)));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>should(</highlight><highlight class="stringliteral">&quot;resize<sp/>bigger&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[=]<sp/>{<sp/></highlight><highlight class="comment">//<sp/>or<sp/>&quot;resize<sp/>bigger&quot;_test</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>mut(v).resize(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(10_ul<sp/>==<sp/>std::size(v));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(fatal(5_ul<sp/>==<sp/>std::size(v)));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>should(</highlight><highlight class="stringliteral">&quot;resize<sp/>smaller&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[=]()<sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>or<sp/>&quot;resize<sp/>smaller&quot;_test</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>v.resize(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(0_ul<sp/>==<sp/>std::size(v));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(4<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/cE91bj">https://godbolt.org/z/cE91bj</ulink> </para>
</blockquote></para>
<para></para>
</details></para>
<para><details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>Behavior Driven Development (BDD)</summary><para></para>
<para></para>
<para><programlisting filename=".cpp"><codeline><highlight class="stringliteral">&quot;Scenario&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>given(</highlight><highlight class="stringliteral">&quot;I<sp/>have...&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>when(</highlight><highlight class="stringliteral">&quot;I<sp/>run...&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>then(</highlight><highlight class="stringliteral">&quot;I<sp/>expect...&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[]<sp/>{<sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(1_i<sp/>==<sp/>1);<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>then(</highlight><highlight class="stringliteral">&quot;I<sp/>expect...&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[]<sp/>{<sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(1<sp/>==<sp/>1_i);<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(2<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/mNBySr">https://godbolt.org/z/mNBySr</ulink> </para>
</blockquote></para>
<para></para>
</details></para>
<para><details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>Gherkin</summary><para></para>
<para></para>
<para><programlisting filename=".cpp"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="apps_2main_8cpp_1a8216c1645620cdb2f629cde3ac02ffef" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bdd::gherkin::steps<sp/>steps<sp/>=<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>steps)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>steps.feature(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[&amp;]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>steps.scenario(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[&amp;]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>steps.given(</highlight><highlight class="stringliteral">&quot;I<sp/>have<sp/>a<sp/>number<sp/>{value}&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[&amp;](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>number<sp/>=<sp/>value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>steps.when(</highlight><highlight class="stringliteral">&quot;I<sp/>add<sp/>{value}<sp/>to<sp/>it&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[&amp;](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number<sp/>+=<sp/>value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>steps.then(</highlight><highlight class="stringliteral">&quot;I<sp/>expect<sp/>number<sp/>to<sp/>be<sp/>{value}&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[&amp;](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(that<sp/>%<sp/>number<sp/>==<sp/>value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;Gherkin&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>steps<sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>R</highlight><highlight class="stringliteral">&quot;(</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>Feature:<sp/>Number</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scenario:<sp/>Addition</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Given<sp/>I<sp/>have<sp/>a<sp/>number<sp/>40</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>I<sp/>add<sp/>2<sp/>to<sp/>it</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Then<sp/>I<sp/>expect<sp/>number<sp/>to<sp/>be<sp/>42</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>)&quot;;</highlight></codeline>
<codeline><highlight class="stringliteral">}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(1<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/BP3hyt">https://godbolt.org/z/BP3hyt</ulink> </para>
</blockquote></para>
<para></para>
</details></para>
<para><details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>Spec</summary><para></para>
<para></para>
<para><programlisting filename=".cpp"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="apps_2main_8cpp_1a8216c1645620cdb2f629cde3ac02ffef" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>describe(</highlight><highlight class="stringliteral">&quot;equality&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>it(</highlight><highlight class="stringliteral">&quot;should<sp/>be<sp/>equal&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/>=<sp/>[]<sp/>{<sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(0_i<sp/>==<sp/>0);<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>it(</highlight><highlight class="stringliteral">&quot;should<sp/>not<sp/>be<sp/>equal&quot;</highlight><highlight class="normal">)<sp/>=<sp/>[]<sp/>{<sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(1_i<sp/>!=<sp/>0);<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(2<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/BXYJ3a">https://godbolt.org/z/BXYJ3a</ulink> </para>
</blockquote></para>
<para></para>
</details></para>
<para><details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>Parameterized</summary><para></para>
<para></para>
<para><programlisting filename=".cpp"><codeline><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>:<sp/>std::<ref refid="namespacetuple_1a72eece7f7cb532d59602b6d4e142d478" kindref="member">vector</ref>{1,<sp/>2,<sp/>3})<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>test(</highlight><highlight class="stringliteral">&quot;parameterized<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(i))<sp/>=<sp/>[i]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(that<sp/>%<sp/>i<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="stringliteral">&quot;args&quot;</highlight><highlight class="normal">_test<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arg)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(arg<sp/>&gt;=<sp/>1_i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>|<sp/>std::vector{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="stringliteral">&quot;types&quot;</highlight><highlight class="normal">_test<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[]&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(std::is_integral_v&lt;T&gt;)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;all<sp/>types<sp/>are<sp/>integrals&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>|<sp/>std::tuple&lt;bool,<sp/>int&gt;{};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="stringliteral">&quot;args<sp/>and<sp/>types&quot;</highlight><highlight class="normal">_test<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[]&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TArg&gt;(TArg<sp/>arg)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(fatal(std::is_integral_v&lt;TArg&gt;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(42_i<sp/>==<sp/>arg<sp/>or<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>true&quot;</highlight><highlight class="normal">_b<sp/>==<sp/>arg);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(type&lt;TArg&gt;<sp/>==<sp/>type&lt;int&gt;<sp/>or<sp/>type&lt;TArg&gt;<sp/>==<sp/>type&lt;bool&gt;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>|<sp/>std::tuple{</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>42};</highlight></codeline>
</programlisting> When using the <computeroutput>operator|</computeroutput> syntax instead of a <computeroutput>for</computeroutput> loop, the test name will automatically be extended to avoid duplicate names. For example, the test name for the <computeroutput>args and types</computeroutput> test will be <computeroutput>args and types (true, bool)</computeroutput> for the first parameter and <computeroutput>args and types (42, int)</computeroutput> for the second parameter. For simple built-in types (integral types and floating point numbers), the test name will contain the parameter values. For other types, the parameters will simply be enumerated. For example, if we would extend the test above to use <computeroutput>std::tuple{true, 42, std::complex&lt;double&gt;{0.5, 1}}</computeroutput>, the test name in the third run would be <computeroutput>args and types (3rd parameter, std::complex&lt;double&gt;)</computeroutput>. If you want to have the actual value of a non-integral type included in the test name, you can overload the <computeroutput>format_test_parameter</computeroutput> function. See the <ulink url="https://github.com/boost-ext/ut/blob/master/example/parameterized.cpp">example on parameterized tests</ulink> for details.</para>
<para><programlisting><codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(14<sp/>asserts<sp/>in<sp/>10<sp/>tests)</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/4xGGdo">https://godbolt.org/z/4xGGdo</ulink> </para>
</blockquote></para>
<para><blockquote><para><zwj/>And whenever I need to know the specific type for which the test failed, I can use <computeroutput>reflection::type_name&lt;T&gt;()</computeroutput>, like this: </para>
</blockquote><programlisting filename=".cpp"><codeline><highlight class="stringliteral">&quot;types<sp/>with<sp/>type<sp/>name&quot;</highlight><highlight class="normal">_test<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[]&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T&gt;()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(std::is_unsigned_v&lt;T&gt;)<sp/>&lt;&lt;<sp/>reflection::type_name&lt;T&gt;()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>unsigned&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>|<sp/>std::tuple&lt;unsigned<sp/>int,<sp/>float&gt;{};</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">Running<sp/>&quot;types<sp/>with<sp/>type<sp/>name&quot;...PASSED</highlight></codeline>
<codeline><highlight class="normal">Running<sp/>&quot;types<sp/>with<sp/>type<sp/>name&quot;...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;source&gt;:10:FAILED<sp/>[false]<sp/>float<sp/>is<sp/>unsigned</highlight></codeline>
<codeline><highlight class="normal">FAILED</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/MEnGnbTY4">https://godbolt.org/z/MEnGnbTY4</ulink> </para>
</blockquote></para>
<para></para>
</details></para>
<para></para>
<para></para>
</details></para>
<para><details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>Suites</summary><para></para>
<para></para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ut<sp/>=<sp/>boost::ut;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ut::suite<sp/><ref refid="example_2suite_8cpp_1a4cdc464ed0e9d1c57cb06b75f41679df" kindref="member">errors</ref><sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">ut;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;throws&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(</highlight><highlight class="keywordflow">throws</highlight><highlight class="normal">([]<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>0;<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;doesn&apos;t<sp/>throw&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(nothrow([]{}));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="apps_2main_8cpp_1a8216c1645620cdb2f629cde3ac02ffef" kindref="member">main</ref>()<sp/>{<sp/>}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(2<sp/>asserts<sp/>in<sp/>2<sp/>tests)</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/CFbTP9">https://godbolt.org/z/CFbTP9</ulink> </para>
</blockquote></para>
<para></para>
</details></para>
<para><details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>Misc</summary><para></para>
<para></para>
<para><details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>Logging using streams</summary><para></para>
<para></para>
<para><programlisting filename=".cpp"><codeline><highlight class="stringliteral">&quot;logging&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>log<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;pre&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(42_i<sp/>==<sp/>43)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;message<sp/>on<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>log<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;post&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">Running<sp/>&quot;logging&quot;...</highlight></codeline>
<codeline><highlight class="normal">pre</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>logging.cpp:8:FAILED<sp/>[42<sp/>==<sp/>43]<sp/>message<sp/>on<sp/>failure</highlight></codeline>
<codeline><highlight class="normal">post</highlight></codeline>
<codeline><highlight class="normal">FAILED</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">===============================================================================</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">tests:<sp/><sp/><sp/>1<sp/>|<sp/>1<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">asserts:<sp/>1<sp/>|<sp/>0<sp/>passed<sp/>|<sp/>1<sp/>failed</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/26fPSY">https://godbolt.org/z/26fPSY</ulink> </para>
</blockquote></para>
<para></para>
</details></para>
<para><details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>Logging using formatting</summary><para></para>
<para>This requires using C++20 with a standard library with std::format support.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="stringliteral">&quot;logging&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\npre<sp/><sp/>{}<sp/>==<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>42,<sp/>43);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(42_i<sp/>==<sp/>43)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;message<sp/>on<sp/>failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>log(</highlight><highlight class="stringliteral">&quot;\npost<sp/>{}<sp/>==<sp/>{}<sp/>-&gt;<sp/>{}\n&quot;</highlight><highlight class="normal">,<sp/>42,<sp/>43,<sp/>42<sp/>==<sp/>43);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">Running<sp/>&quot;logging&quot;...</highlight></codeline>
<codeline><highlight class="normal">pre<sp/><sp/>42<sp/>==<sp/>43</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>logging.cpp:8:FAILED<sp/>[42<sp/>==<sp/>43]<sp/>message<sp/>on<sp/>failure</highlight></codeline>
<codeline><highlight class="normal">post<sp/>42<sp/>==<sp/>43<sp/>-&gt;<sp/>false</highlight></codeline>
<codeline><highlight class="normal">FAILED</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">===============================================================================</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">tests:<sp/><sp/><sp/>1<sp/>|<sp/>1<sp/>failed</highlight></codeline>
<codeline><highlight class="normal">asserts:<sp/>1<sp/>|<sp/>0<sp/>passed<sp/>|<sp/>1<sp/>failed</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/26fPSY">https://godbolt.org/z/26fPSY</ulink> </para>
</blockquote></para>
<para></para>
</details></para>
<para><details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>Matchers</summary><para></para>
<para></para>
<para><programlisting filename=".cpp"><codeline><highlight class="stringliteral">&quot;matchers&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>is_between<sp/>=<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lhs,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rhs)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[=](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>that<sp/>%<sp/>value<sp/>&gt;=<sp/>lhs<sp/>and<sp/>that<sp/>%<sp/>value<sp/>&lt;=<sp/>rhs;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(is_between(1,<sp/>100)(42));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(not<sp/>is_between(1,<sp/>100)(0));</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(2<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/4qwrCi">https://godbolt.org/z/4qwrCi</ulink> </para>
</blockquote></para>
<para></para>
</details></para>
<para><details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>Exceptions/Aborts</summary><para></para>
<para></para>
<para><programlisting filename=".cpp"><codeline><highlight class="stringliteral">&quot;exceptions/aborts&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(throws&lt;std::runtime_error&gt;([]<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error{</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">};<sp/>}))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;throws<sp/>runtime_error&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(</highlight><highlight class="keywordflow">throws</highlight><highlight class="normal">([]<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>0;<sp/>}))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;throws<sp/>any<sp/>exception&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(nothrow([]{}))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;doesn&apos;t<sp/>throw&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(aborts([]<sp/>{<sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/>}));</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(4<sp/>asserts<sp/>in<sp/>1<sp/>tests)</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/A2EehK">https://godbolt.org/z/A2EehK</ulink> </para>
</blockquote></para>
<para></para>
</details></para>
<para></para>
<para></para>
</details></para>
<para><details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>Config</summary><para></para>
<para></para>
<para><details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>Runner</summary><para></para>
<para></para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ut<sp/>=<sp/>boost::ut;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecfg" kindref="compound">cfg</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">runner<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classcfg_1_1runner_1a8b7c815757d7a835adc13611670d29e3" kindref="member">on</ref>(ut::events::test&lt;Ts...&gt;<sp/>test)<sp/>{<sp/>test();<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classcfg_1_1runner_1a8b7c815757d7a835adc13611670d29e3" kindref="member">on</ref>(ut::events::skip&lt;Ts...&gt;)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TExpr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classcfg_1_1runner_1a8b7c815757d7a835adc13611670d29e3" kindref="member">on</ref>(ut::events::assertion&lt;TExpr&gt;)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classcfg_1_1runner_1a8b7c815757d7a835adc13611670d29e3" kindref="member">on</ref>(ut::events::fatal_assertion)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TMsg&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classcfg_1_1runner_1a8b7c815757d7a835adc13611670d29e3" kindref="member">on</ref>(ut::events::log&lt;TMsg&gt;)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>cfg</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ut::cfg&lt;ut::override&gt;<sp/>=<sp/><ref refid="classcfg_1_1runner" kindref="compound">cfg::runner</ref>{};</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/jdg687">https://godbolt.org/z/jdg687</ulink> </para>
</blockquote></para>
<para></para>
</details></para>
<para><details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>Reporter</summary><para></para>
<para></para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ut<sp/>=<sp/>boost::ut;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecfg" kindref="compound">cfg</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">reporter<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classcfg_1_1reporter_1a5ea104ca73f7367d22dba84b54c6799d" kindref="member">on</ref>(ut::events::test_begin)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classcfg_1_1reporter_1a5ea104ca73f7367d22dba84b54c6799d" kindref="member">on</ref>(ut::events::test_run)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classcfg_1_1reporter_1a5ea104ca73f7367d22dba84b54c6799d" kindref="member">on</ref>(ut::events::test_skip)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classcfg_1_1reporter_1a5ea104ca73f7367d22dba84b54c6799d" kindref="member">on</ref>(ut::events::test_end)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TMsg&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classcfg_1_1reporter_1a5ea104ca73f7367d22dba84b54c6799d" kindref="member">on</ref>(ut::events::log&lt;TMsg&gt;)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TExpr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classcfg_1_1reporter_1a5ea104ca73f7367d22dba84b54c6799d" kindref="member">on</ref>(ut::events::assertion_pass&lt;TExpr&gt;)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TExpr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classcfg_1_1reporter_1a5ea104ca73f7367d22dba84b54c6799d" kindref="member">on</ref>(ut::events::assertion_fail&lt;TExpr&gt;)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classcfg_1_1reporter_1a5ea104ca73f7367d22dba84b54c6799d" kindref="member">on</ref>(ut::events::fatal_assertion)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classcfg_1_1reporter_1a5ea104ca73f7367d22dba84b54c6799d" kindref="member">on</ref>(ut::events::exception)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classcfg_1_1reporter_1a5ea104ca73f7367d22dba84b54c6799d" kindref="member">on</ref>(ut::events::summary)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>cfg</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ut::cfg&lt;ut::override&gt;<sp/>=<sp/>ut::runner&lt;cfg::reporter&gt;{};</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/gsAPKg">https://godbolt.org/z/gsAPKg</ulink> </para>
</blockquote></para>
<para></para>
</details></para>
<para><details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>Printer</summary><para></para>
<para></para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ut<sp/>=<sp/>boost::ut;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecfg" kindref="compound">cfg</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">printer<sp/>:<sp/>ut::printer<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="structcfg_1_1printer_1aade54fb5ba43540bcbf4483d42fe0a2f" kindref="member">operator&lt;&lt;</ref>(T&amp;&amp;<sp/>t)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>std::forward&lt;T&gt;(t);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>cfg</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ut::cfg&lt;ut::override&gt;<sp/>=<sp/>ut::runner&lt;ut::reporter&lt;cfg::printer&gt;&gt;{};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="apps_2main_8cpp_1a8216c1645620cdb2f629cde3ac02ffef" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">ut;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;printer&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/XCscF9">https://godbolt.org/z/XCscF9</ulink> </para>
</blockquote></para>
<para></para>
</details></para>
<para></para>
<para></para>
</details></para>
<para></para>
<para></para>
</details></para>
<para><anchor id="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1api"/> <anchor id="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1configuration"/> <anchor id="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1user-guide"/> <details><summary>User Guide</summary><para></para>
<para></para>
<para><details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>API</summary><para></para>
<para></para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">export</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">module</highlight><highlight class="normal"><sp/><ref refid="module_boost_8ut" kindref="compound">boost.ut</ref>;<sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">boost::inline<sp/><ref refid="namespaceext" kindref="compound">ext</ref>::ut::inline<sp/>v2_3_1<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">suite<sp/>final<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal">(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>suite(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>suite);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">_test;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>name);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>should<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>name);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>given<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>name);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>when<sp/><sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>name);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>then<sp/><sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>name);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>OStream&amp;<sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Expression<sp/>expr,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::source_location&amp;<sp/>location<sp/>=<sp/>std::source_location::current()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator%(Expression<sp/>expr)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>that{};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">literals<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">_i;<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">_s;<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">_c;<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">_l;<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">_ll;<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">_u;<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">_uc;<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">_us;<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">_ul;<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">_f;<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">_d;<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">_ld;<sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_b(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_c(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_s(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_i(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_l(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_ll(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_u(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_uc(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_us(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_ul(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_f(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_d(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_ld(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">_b;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>literals</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">operators<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>eq(Operator<sp/>lhs,<sp/>Operator<sp/>rhs);<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>neq(Operator<sp/>lhs,<sp/>Operator<sp/>rhs);<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>gt(Operator<sp/>lhs,<sp/>Operator<sp/>rhs);<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ge(Operator<sp/>lhs,<sp/>Operator<sp/>rhs);<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lt(Operator<sp/>lhs,<sp/>Operator<sp/>rhs);<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>le(Operator<sp/>lhs,<sp/>Operator<sp/>rhs);<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal">==;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal">!=;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal">&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal">&gt;=;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal">&lt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal">&lt;=;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>and;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>or;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>not;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal">|;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal">/;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal">&gt;&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>skip<sp/>=<sp/>tag(</highlight><highlight class="stringliteral">&quot;skip&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>operator&lt;&lt;(Msg<sp/>msg);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>log{};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mut(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t)<sp/>-&gt;<sp/>T&amp;;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">runner<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator=(options);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TSuite&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>on(ut::events::suite&lt;TSuite&gt;);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>on(ut::events::test&lt;Ts...&gt;);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>on(ut::events::skip&lt;Ts...&gt;);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TExpr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>on(ut::events::assertion&lt;TExpr&gt;)<sp/>-&gt;<sp/>bool;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>on(ut::events::fatal_assertion);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TMsg&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>on(ut::events::log&lt;TMsg&gt;);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>run(run_cfg);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>~run();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">reporter<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>on(ut::events::test_begin)<sp/>-&gt;<sp/>void;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>on(ut::events::test_run)<sp/>-&gt;<sp/>void;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>on(ut::events::test_skip)<sp/>-&gt;<sp/>void;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>on(ut::events::test_end)<sp/>-&gt;<sp/>void;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TMsg&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>on(ut::events::log&lt;TMsg&gt;)<sp/>-&gt;<sp/>void;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TExpr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>on(ut::events::assertion_pass&lt;TExpr&gt;)<sp/>-&gt;<sp/>void;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TExpr&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>on(ut::events::assertion_fail&lt;TExpr&gt;)<sp/>-&gt;<sp/>void;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>on(ut::events::fatal_assertion)<sp/>-&gt;<sp/>void;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>on(ut::events::exception)<sp/>-&gt;<sp/>void;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>on(ut::events::summary)<sp/>-&gt;<sp/>void;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">override<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>=<sp/>overr</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">e&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacecfg" kindref="compound">cfg</ref><sp/>=<sp/>runner&lt;reporter&gt;{};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para></para>
<para></para>
</details></para>
<para><details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>Configuration</summary><para></para>
<para></para>
<para><table rows="2" cols="3"><row>
<entry thead="yes"><para>Option   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Example    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>BOOST_UT_VERSION</computeroutput>   </para>
</entry><entry thead="no"><para>Current version   </para>
</entry><entry thead="no"><para><computeroutput>2&apos;3&apos;1</computeroutput>   </para>
</entry></row>
</table>
</para>
<para></para>
<para></para>
</details></para>
<para></para>
<para></para>
</details></para>
<para><anchor id="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1faq"/> <details><summary>FAQ</summary><para></para>
<para></para>
<para><anchor id="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1how-it-works"/> <details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>How does it work?</summary><para></para>
<para></para>
<para><blockquote><para><zwj/><computeroutput>suite</computeroutput> </para>
</blockquote><programlisting filename=".cpp"><codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">suite<sp/>final<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal">(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>suite(Suite<sp/>suite)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>suite();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><computeroutput>test</computeroutput> </para>
</blockquote><programlisting filename=".cpp"><codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>Test<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">_test(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/>std::size_t<sp/>size)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test{{name,<sp/>size}};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">test<sp/>final<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::string_view<sp/>name{};<sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Test&amp;<sp/>test)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Running...<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>test();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><computeroutput>expect</computeroutput> </para>
</blockquote><programlisting filename=".cpp"><codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>OStream&amp;<sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Expression<sp/>expr,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::source_location&amp;<sp/>location<sp/>=<sp/>std::source_location::current()</highlight></codeline>
<codeline><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(expr)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>location.file()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>location.line()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:FAILED:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>expr</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::cerr;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">...<sp/>Cs&gt;</highlight></codeline>
<codeline><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>Operator<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">_i()<sp/>-&gt;<sp/>integral_constant&lt;int,<sp/>value&lt;Cs...&gt;&gt;;</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacecolor_1a8588d7afe41d3f541b62b2b4b78ff0c7" kindref="member">operator==</ref>(Operator<sp/>lhs,<sp/>Operator<sp/>rhs)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eq{lhs,<sp/>rhs};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;Operator<sp/>TLhs,<sp/>Operator<sp/>TRhs&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">eq<sp/>final<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TLhs<sp/>lhs{};<sp/></highlight><highlight class="comment">//<sp/>Left-hand<sp/>side<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TRhs<sp/>rhs{};<sp/></highlight><highlight class="comment">//<sp/>Right-hand<sp/>side<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>==<sp/>rhs;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator&lt;&lt;(OStream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>eq&amp;<sp/>op)<sp/>-&gt;<sp/>Ostream&amp;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(os<sp/>&lt;&lt;<sp/>op.lhs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>op.rhs);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><computeroutput>Sections</computeroutput> </para>
</blockquote><programlisting filename=".cpp"><codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>should<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>name)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test{name};<sp/>};</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><computeroutput>Behaviour Driven Development (BDD)</computeroutput> </para>
</blockquote><programlisting filename=".cpp"><codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>feature<sp/><sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>name)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test{name};<sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>scenario<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>name)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test{name};<sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>given<sp/><sp/><sp/><sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>name)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test{name};<sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>when<sp/><sp/><sp/><sp/><sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>name)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test{name};<sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>then<sp/><sp/><sp/><sp/><sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>name)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test{name};<sp/>};</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/6Nk5Mi">https://godbolt.org/z/6Nk5Mi</ulink> </para>
</blockquote><blockquote><para><zwj/><computeroutput>Spec</computeroutput> </para>
</blockquote><programlisting filename=".cpp"><codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>describe<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>name)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test{name};<sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>name)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test{name};<sp/>};</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://github.com/boost-ext/ut/tree/gh-pages/denver-cpp-2020/example">Example implementation</ulink> </para>
</blockquote><blockquote><para><zwj/>Try it online </para>
</blockquote><itemizedlist>
<listitem><para>Header - <ulink url="https://godbolt.org/z/x96n8b">https://godbolt.org/z/x96n8b</ulink></para>
</listitem><listitem><para>Module - <ulink url="https://wandbox.org/permlink/LrV7WwIgghTP1nrs">https://wandbox.org/permlink/LrV7WwIgghTP1nrs</ulink></para>
</listitem></itemizedlist>
</para>
<para></para>
<para></para>
</details></para>
<para><anchor id="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1fast-compilation-times"/> <details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>Fast compilation times (Benchmarks)?</summary><para></para>
<para></para>
<para><blockquote><para><zwj/>Implementation </para>
</blockquote><itemizedlist>
<listitem><para>Leveraging <ref refid="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1cpp-20" kindref="member">C++20</ref> features</para>
</listitem><listitem><para>Avoiding unique types for lambda expressions</para>
</listitem></itemizedlist>
</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Test&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>not<sp/>std::convertible_to&lt;Test,<sp/>void<sp/>(*)()&gt;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal">=(Test<sp/>test);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">vs</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compiles<sp/>5x<sp/>faster<sp/>because<sp/>it<sp/>doesn&apos;t<sp/>introduce<sp/>a<sp/>new<sp/>type<sp/>for<sp/>each<sp/>lambda</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator=(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*test)());</highlight></codeline>
</programlisting></para>
<para><itemizedlist>
<listitem><para><computeroutput>Type-name</computeroutput> erasure (allows types/function memoization)</para>
</listitem></itemizedlist>
</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><sp/><sp/>eq&lt;integral_constant&lt;42&gt;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;{<sp/>{},<sp/>42<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">vs</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Can<sp/>be<sp/>memoized<sp/>-<sp/>faster<sp/>to<sp/>compile</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>eq&lt;int,<sp/>int&gt;{42,<sp/>42}</highlight></codeline>
</programlisting></para>
<para><itemizedlist>
<listitem><para>Limiting preprocessor work<itemizedlist>
<listitem><para>Single header/module</para>
</listitem><listitem><para>Minimal number of include files</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>Simplified versions of<itemizedlist>
<listitem><para><computeroutput>std::function</computeroutput></para>
</listitem><listitem><para><computeroutput>std::string_view</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
<para></para>
<para></para>
</details></para>
<para><anchor id="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1cpp-20"/> <details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>C++20 features?</summary><para></para>
<para></para>
<para><itemizedlist>
<listitem><para>API<itemizedlist>
<listitem><para><ulink url="https://eel.is/c++draft/support.srcloc#source.location.syn">Source Location</ulink><itemizedlist>
<listitem><para>Assertions - <computeroutput><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect(false)</ref></computeroutput> - <computeroutput>__FILE__:__LINE__:FAILED [false]</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ulink url="https://eel.is/c++draft/dcl.init#nt:designated-initializer-list">Designated initializers</ulink><itemizedlist>
<listitem><para>Configuration - <computeroutput>cfg&lt;override&gt; = {.filter = &quot;test&quot;}</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ulink url="https://eel.is/c++draft/temp.arg.nontype">Non-Type Template Parameter</ulink><itemizedlist>
<listitem><para>Constant matchers - <computeroutput>constant&lt;42_i == 42&gt;</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ulink url="https://eel.is/c++draft/expr.prim.lambda">Template Parameter List for generic lambdas</ulink><itemizedlist>
<listitem><para>Parameterized tests - <computeroutput>&quot;types&quot;_test = []&lt;class T&gt;() {};</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ulink url="https://eel.is/c++draft/concepts.lang">Concepts</ulink><itemizedlist>
<listitem><para>Operators - <computeroutput>Operator @ Operator</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ulink url="https://eel.is/c++draft/module">Modules</ulink><itemizedlist>
<listitem><para><computeroutput>import boost.ut;</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
<para></para>
<para></para>
</details></para>
<para><anchor id="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1cpp-2x"/> <details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>C++2X integration?</summary><para></para>
<para></para>
<para><blockquote><para><zwj/>Parameterized tests with Expansion statements (<ulink url="https://wg21.link/P1306r1">https://wg21.link/P1306r1</ulink>) </para>
</blockquote><programlisting filename=".cpp"><codeline><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arg<sp/>:<sp/>std::<ref refid="namespacetuple" kindref="compound">tuple</ref>&lt;int,<sp/>double&gt;{})<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>test(</highlight><highlight class="stringliteral">&quot;types<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(arg))<sp/>=<sp/>[arg]<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(type(arg)<sp/>==<sp/>type&lt;int&gt;<sp/>or<sp/>type(arg)<sp/>==<sp/>type&lt;double&gt;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(2<sp/>asserts<sp/>in<sp/>2<sp/>tests)</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://cppx.godbolt.org/z/dMmqmM">https://cppx.godbolt.org/z/dMmqmM</ulink> </para>
</blockquote></para>
<para></para>
</details></para>
<para><anchor id="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1std"/> <details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>Is standardization an option?</summary><para></para>
<para></para>
<para><blockquote><para><zwj/>Personally, I believe that C++ standard could benefit from common testing primitives (<computeroutput>expect</computeroutput>, <computeroutput>&quot;&quot;_test</computeroutput>) because </para>
</blockquote><itemizedlist>
<listitem><para>It lowers the entry-level to the language (no need for third-party libraries)</para>
</listitem><listitem><para>It improves the education aspect (one standard way of doing it)</para>
</listitem><listitem><para>It makes the language more coherent/stable (consistent design with other features, stable API)</para>
</listitem><listitem><para>It makes the testing a first class citizen (shows that the community cares about this aspect of the language)</para>
</listitem><listitem><para>It allows to publish tests for the Standard Library (STL) in the standard way (coherency, easier to extend)</para>
</listitem><listitem><para>It allows to act as additional documentation as a way to verify whether a particular implementation is conforming (quality, self-verification)</para>
</listitem><listitem><para>It helps with establishing standard vocabulary for testing (common across STL and other projects)</para>
</listitem></itemizedlist>
</para>
<para></para>
<para></para>
</details></para>
<para><anchor id="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1macros"/> <details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>Can I still use macros?</summary><para></para>
<para></para>
<para><blockquote><para><zwj/>Sure, although please notice that there are negatives of using macros such as </para>
</blockquote><itemizedlist>
<listitem><para>Error messages might be not clear and/or point to the wrong line</para>
</listitem><listitem><para>Global scope will be polluted</para>
</listitem><listitem><para>Type safety will be ignored</para>
</listitem></itemizedlist>
</para>
<para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#define<sp/>EXPECT(...)<sp/>::boost::ut::expect(::boost::ut::that<sp/>%<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SUITE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>::boost::ut::suite<sp/>_<sp/>=<sp/>[]</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST(name)<sp/><sp/>::boost::ut::detail::test{&quot;test&quot;,<sp/>name}<sp/>=<sp/>[=]()<sp/>mutable</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="macro_8cpp_1ac259c3f55c7c90396ea276c14641bc01" kindref="member">SUITE</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="macro_8cpp_1a45feb1f37ce559e49baf8655d769ef85" kindref="member">TEST</ref>(</highlight><highlight class="stringliteral">&quot;suite&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="macro_8cpp_1ac413094c6761bf248dd8adc502a7ebab" kindref="member">EXPECT</ref>(42<sp/>==<sp/>42);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="apps_2main_8cpp_1a8216c1645620cdb2f629cde3ac02ffef" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="macro_8cpp_1a45feb1f37ce559e49baf8655d769ef85" kindref="member">TEST</ref>(</highlight><highlight class="stringliteral">&quot;macro&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="macro_8cpp_1ac413094c6761bf248dd8adc502a7ebab" kindref="member">EXPECT</ref>(1<sp/>!=<sp/>2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="macro_8cpp_1a45feb1f37ce559e49baf8655d769ef85" kindref="member">TEST</ref>(</highlight><highlight class="stringliteral">&quot;vector&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>v(5);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><ref refid="macro_8cpp_1ac413094c6761bf248dd8adc502a7ebab" kindref="member">EXPECT</ref>(fatal(5u<sp/>==<sp/>std::size(v)))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;fatal&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="macro_8cpp_1a45feb1f37ce559e49baf8655d769ef85" kindref="member">TEST</ref>(</highlight><highlight class="stringliteral">&quot;resize<sp/>bigger&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.resize(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="macro_8cpp_1ac413094c6761bf248dd8adc502a7ebab" kindref="member">EXPECT</ref>(10u<sp/>==<sp/>std::size(v));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">All<sp/>tests<sp/>passed<sp/>(4<sp/>asserts<sp/>in<sp/>3<sp/>tests)</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/><ulink url="https://godbolt.org/z/WcEKTr">https://godbolt.org/z/WcEKTr</ulink> </para>
</blockquote></para>
<para></para>
</details></para>
<para><details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>What about Mocks/Stubs/Fakes?</summary><para></para>
<para></para>
<para><blockquote><para><zwj/>Consider using one of the following frameworks </para>
</blockquote><itemizedlist>
<listitem><para><ulink url="https://github.com/cpp-testing/GUnit/blob/master/docs/GMock.md">https://github.com/cpp-testing/GUnit/blob/master/docs/GMock.md</ulink></para>
</listitem><listitem><para><ulink url="https://github.com/eranpeer/FakeIt">https://github.com/eranpeer/FakeIt</ulink></para>
</listitem><listitem><para><ulink url="https://github.com/dascandy/hippomocks">https://github.com/dascandy/hippomocks</ulink></para>
</listitem></itemizedlist>
</para>
<para></para>
<para></para>
</details></para>
<para><details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>What about Microbenchmarking?</summary><para></para>
<para></para>
<para><blockquote><para><zwj/><ulink url="example/benchmark.cpp">Example benchmark</ulink> </para>
</blockquote><blockquote><para><zwj/>Consider using one of the following frameworks </para>
</blockquote><itemizedlist>
<listitem><para><ulink url="https://github.com/google/benchmark">https://github.com/google/benchmark</ulink></para>
</listitem><listitem><para><ulink url="https://github.com/DigitalInBlue/Celero">https://github.com/DigitalInBlue/Celero</ulink></para>
</listitem><listitem><para><ulink url="https://github.com/libnonius/nonius">https://github.com/libnonius/nonius</ulink></para>
</listitem><listitem><para><ulink url="https://github.com/martinus/nanobench">https://github.com/martinus/nanobench</ulink></para>
</listitem></itemizedlist>
</para>
<para></para>
<para></para>
</details></para>
<para><details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>Related materials/talks?</summary><para></para>
<para></para>
<para><itemizedlist>
<listitem><para><ulink url="https://boost-ext.github.io/ut/denver-cpp-2019">[Boost].UT - Unit Testing Framework - Kris Jusiak</ulink></para>
</listitem><listitem><para><ulink url="https://boost-ext.github.io/ut/meeting-cpp-2020">Future of Testing with C++20 - Kris Jusiak</ulink></para>
</listitem><listitem><para><ulink url="https://www.youtube.com/watch?v=irdgFyxOs_Y">Macro-Free Testing with C++20 - Kris Jusiak</ulink></para>
</listitem><listitem><para><ulink url="https://www.youtube.com/watch?v=yCI8MjvOMeE">"If you liked it then you `"should have put a"_test` on it", Beyonce rule - Kris Jusiak</ulink></para>
</listitem><listitem><para><ulink url="https://www.youtube.com/watch?v=oOcuJdJJ33g">Principles of Unit Testing With C++ - Dave Steffen and Kris Jusiak</ulink></para>
</listitem><listitem><para><ulink url="https://www.twitch.tv/videos/686512433">Empirical Unit Testing - Dave Steffen</ulink></para>
</listitem></itemizedlist>
</para>
<para></para>
<para></para>
</details></para>
<para><anchor id="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1how-to-contribute"/> <details><summary><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/><nonbreakablespace/>How to contribute?</summary><para></para>
<para></para>
<para><blockquote><para><zwj/>CONTRIBUTING </para>
</blockquote></para>
<para></para>
</details></para>
<para></para>
<para></para>
</details></para>
<para><anchor id="md__2home_2mccakit_2desktop_2projects_2ray__tracer__challange_2deps_2ut_2README_1benchmarks"/> <details><summary>Benchmarks</summary><para></para>
<para></para>
<para><table rows="6" cols="6"><row>
<entry thead="yes"><para>Framework   </para>
</entry><entry thead="yes"><para>Version   </para>
</entry><entry thead="yes"><para>Standard   </para>
</entry><entry thead="yes"><para>License   </para>
</entry><entry thead="yes"><para>Linkage   </para>
</entry><entry thead="yes"><para>Test configuration    </para>
</entry></row>
<row>
<entry thead="no"><para><ulink url="https://github.com/boostorg/test">Boost.Test</ulink>   </para>
</entry><entry thead="no"><para><ulink url="https://www.boost.org/users/history/version_1_71_0.html">1.71.0</ulink>   </para>
</entry><entry thead="no"><para>C++03   </para>
</entry><entry thead="no"><para>Boost 1.0   </para>
</entry><entry thead="no"><para>single header/library   </para>
</entry><entry thead="no"><para><computeroutput>static library</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><ulink url="https://github.com/google/googletest">GoogleTest</ulink>   </para>
</entry><entry thead="no"><para><ulink url="https://github.com/google/googletest/releases/tag/release-1.10.0">1.10.0</ulink>   </para>
</entry><entry thead="no"><para>C++11   </para>
</entry><entry thead="no"><para>BSD-3   </para>
</entry><entry thead="no"><para>library   </para>
</entry><entry thead="no"><para><computeroutput>static library</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><ulink url="https://github.com/catchorg/Catch2">Catch</ulink>   </para>
</entry><entry thead="no"><para><ulink url="https://github.com/catchorg/Catch2/releases/download/v2.10.2/catch.hpp">2.10.2</ulink>   </para>
</entry><entry thead="no"><para>C++11   </para>
</entry><entry thead="no"><para>Boost 1.0   </para>
</entry><entry thead="no"><para>single header   </para>
</entry><entry thead="no"><para><computeroutput>CATCH_CONFIG_FAST_COMPILE</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><ulink url="https://github.com/onqtam/doctest">Doctest</ulink>   </para>
</entry><entry thead="no"><para><ulink url="https://github.com/onqtam/doctest/blob/master/doctest/doctest.h">2.3.5</ulink>   </para>
</entry><entry thead="no"><para>C++11   </para>
</entry><entry thead="no"><para>MIT   </para>
</entry><entry thead="no"><para>single header   </para>
</entry><entry thead="no"><para><computeroutput>DOCTEST_CONFIG_SUPER_FAST_ASSERTS</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><ulink url="https://github.com/boost-ext/ut">UT</ulink>   </para>
</entry><entry thead="no"><para><ulink url="https://github.com/boost-ext/ut/blob/master/include/boost/ut.hpp">1.1.0</ulink>   </para>
</entry><entry thead="no"><para>C++20   </para>
</entry><entry thead="no"><para>Boost 1.0   </para>
</entry><entry thead="no"><para>single header/module   </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
<para><table rows="16" cols="4"><row>
<entry thead="no" colspan="3" align="center"><para><ulink url="https://github.com/cpp-testing/ut-benchmark/tree/master/benchmarks"><bold>Include</bold></ulink> / <emphasis>0 tests, 0 asserts, 1 cpp file</emphasis>   </para>
</entry></row>
<row>
<entry thead="no" colspan="3" align="center"><para><ulink url="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Compilation_include.png"><image type="html" name="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Compilation_include.png" inline="yes"></image>
</ulink> </para>
</entry><entry thead="no"><para></para>
<para></para>
</entry></row>
<row>
<entry thead="no" colspan="3" align="center"><para><ulink url="https://github.com/cpp-testing/ut-benchmark/tree/master/benchmarks"><bold>Assert</bold></ulink> / <emphasis>1 test, 1&apos;000&apos;000 asserts, 1 cpp file</emphasis>   </para>
</entry></row>
<row>
<entry thead="no"><para><ulink url="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Compilation_assert.png"><image type="html" name="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Compilation_assert.png" inline="yes"></image>
</ulink> </para>
</entry><entry thead="no"><para><ulink url="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Execution_assert.png"><image type="html" name="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Execution_assert.png" inline="yes"></image>
</ulink> </para>
</entry><entry thead="no"><para><ulink url="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/BinarySize_assert.png"><image type="html" name="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/BinarySize_assert.png" inline="yes"></image>
</ulink> </para>
<para></para>
</entry></row>
<row>
<entry thead="no" colspan="3" align="center"><para><ulink url="https://github.com/cpp-testing/ut-benchmark/tree/master/benchmarks"><bold>Test</bold></ulink> / <emphasis>1&apos;000 tests, 0 asserts, 1 cpp file</emphasis>   </para>
</entry></row>
<row>
<entry thead="no"><para><ulink url="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Compilation_test.png"><image type="html" name="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Compilation_test.png" inline="yes"></image>
</ulink> </para>
</entry><entry thead="no"><para><ulink url="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Execution_test.png"><image type="html" name="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Execution_test.png" inline="yes"></image>
</ulink> </para>
</entry><entry thead="no"><para><ulink url="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/BinarySize_test.png"><image type="html" name="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/BinarySize_test.png" inline="yes"></image>
</ulink> </para>
<para></para>
</entry></row>
<row>
<entry thead="no" colspan="3" align="center"><para><ulink url="https://github.com/cpp-testing/ut-benchmark/tree/master/benchmarks"><bold>Suite</bold></ulink> / <emphasis>10&apos;000 tests, 0 asserts, 100 cpp files</emphasis>   </para>
</entry></row>
<row>
<entry thead="no"><para><ulink url="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Compilation_suite.png"><image type="html" name="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Compilation_suite.png" inline="yes"></image>
</ulink> </para>
</entry><entry thead="no"><para><ulink url="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Execution_suite.png"><image type="html" name="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Execution_suite.png" inline="yes"></image>
</ulink> </para>
</entry><entry thead="no"><para><ulink url="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/BinarySize_suite.png"><image type="html" name="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/BinarySize_suite.png" inline="yes"></image>
</ulink> </para>
<para></para>
</entry></row>
<row>
<entry thead="no" colspan="3" align="center"><para><ulink url="https://github.com/cpp-testing/ut-benchmark/tree/master/benchmarks"><bold>Suite+Assert</bold></ulink> / <emphasis>10&apos;000 tests, 40&apos;000 asserts, 100 cpp files</emphasis>   </para>
</entry></row>
<row>
<entry thead="no"><para><ulink url="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Compilation_suite+assert.png"><image type="html" name="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Compilation_suite+assert.png" inline="yes"></image>
</ulink> </para>
</entry><entry thead="no"><para><ulink url="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Execution_suite+assert.png"><image type="html" name="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Execution_suite+assert.png" inline="yes"></image>
</ulink> </para>
</entry><entry thead="no"><para><ulink url="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/BinarySize_suite+assert.png"><image type="html" name="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/BinarySize_suite+assert.png" inline="yes"></image>
</ulink> </para>
<para></para>
</entry></row>
<row>
<entry thead="no" colspan="3" align="center"><para><ulink url="https://github.com/cpp-testing/ut-benchmark/tree/master/benchmarks"><bold>Suite+Assert+STL</bold></ulink> / <emphasis>10&apos;000 tests, 20&apos;000 asserts, 100 cpp files</emphasis>   </para>
</entry></row>
<row>
<entry thead="no"><para><ulink url="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Compilation_suite+assert+stl.png"><image type="html" name="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Compilation_suite+assert+stl.png" inline="yes"></image>
</ulink> </para>
</entry><entry thead="no"><para><ulink url="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Execution_suite+assert+stl.png"><image type="html" name="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Execution_suite+assert+stl.png" inline="yes"></image>
</ulink> </para>
</entry><entry thead="no"><para><ulink url="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/BinarySize_suite+assert+stl.png"><image type="html" name="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/BinarySize_suite+assert+stl.png" inline="yes"></image>
</ulink> </para>
<para></para>
</entry></row>
<row>
<entry thead="no" colspan="3" align="center"><para><ulink url="https://github.com/cpp-testing/ut-benchmark/tree/master/benchmarks"><bold>Incremental Build - Suite+Assert+STL</bold></ulink> / <emphasis>1 cpp file change (1&apos;000 tests, 20&apos;000 asserts, 100 cpp files)</emphasis>   </para>
</entry></row>
<row>
<entry thead="no"><para><ulink url="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Compilation_incremental.suite+assert+stl.png"><image type="html" name="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Compilation_incremental.suite+assert+stl.png" inline="yes"></image>
</ulink> </para>
</entry><entry thead="no"><para><ulink url="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Execution_incremental.suite+assert+stl.png"><image type="html" name="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/Execution_incremental.suite+assert+stl.png" inline="yes"></image>
</ulink> </para>
</entry><entry thead="no"><para><ulink url="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/BinarySize_incremental.suite+assert+stl.png"><image type="html" name="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/BinarySize_incremental.suite+assert+stl.png" inline="yes"></image>
</ulink> </para>
<para></para>
</entry></row>
<row>
<entry thead="no" colspan="3" align="center"><para><ulink url="https://github.com/cpp-testing/ut-benchmark/tree/master/benchmarks"><bold>Suite+Assert+STL</bold></ulink> / <emphasis>10&apos;000 tests, 20&apos;000 asserts, 100 cpp files<linebreak/>
(Headers vs Precompiled headers vs C++20 Modules)</emphasis>   </para>
</entry></row>
<row>
<entry thead="no"><para><ulink url="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/ut_Compilation_suite+assert+stl.png"><image type="html" name="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/ut_Compilation_suite+assert+stl.png" inline="yes"></image>
</ulink> </para>
</entry><entry thead="no"><para><ulink url="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/ut_Execution_suite+assert+stl.png"><image type="html" name="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/ut_Execution_suite+assert+stl.png" inline="yes"></image>
</ulink> </para>
</entry><entry thead="no"><para><ulink url="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/ut_BinarySize_suite+assert+stl.png"><image type="html" name="https://raw.githubusercontent.com/cpp-testing/ut-benchmark/master/results/ut_BinarySize_suite+assert+stl.png" inline="yes"></image>
</ulink>  </para>
</entry></row>
</table>
</para>
<para><blockquote><para><zwj/><ulink url="https://github.com/cpp-testing/ut-benchmark">https://github.com/cpp-testing/ut-benchmark</ulink> </para>
</blockquote></para>
<para></para>
</details></para>
<para><hruler/>
</para>
<para><bold>Disclaimer</bold> <computeroutput>UT</computeroutput> is not an official Boost library. </para>
</sect2>
</sect1>
    </detaileddescription>
    <location file="/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/README.md"/>
  </compounddef>
</doxygen>
