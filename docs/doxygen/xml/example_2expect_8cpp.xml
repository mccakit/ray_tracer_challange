<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="example_2expect_8cpp" kind="file" language="C++">
    <compoundname>expect.cpp</compoundname>
    <includes local="no">array</includes>
    <includes refid="ut_8hpp" local="no">boost/ut.hpp</includes>
    <includes local="no">memory</includes>
    <includes local="no">string_view</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/expect.cpp</label>
        <link refid="example_2expect_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>boost/ut.hpp</label>
        <link refid="ut_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>array</label>
      </node>
      <node id="5">
        <label>memory</label>
      </node>
      <node id="6">
        <label>string_view</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
      <node id="4">
        <label>version</label>
      </node>
    </incdepgraph>
    <innerclass refid="structdummy__struct" prot="public">dummy_struct</innerclass>
    <sectiondef kind="var">
      <memberdef kind="variable" id="example_2expect_8cpp_1ae99a05a203907d1381a00d9e05425ab7" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto sum</definition>
        <argsstring></argsstring>
        <name>sum</name>
        <initializer>= [](auto... args) { return (0 + ... + args); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/expect.cpp" line="14" column="16" bodyfile="/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/expect.cpp" bodystart="14" bodyend="14"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="example_2expect_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/expect.cpp" line="17" column="5" bodyfile="/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/expect.cpp" bodystart="17" bodyend="123"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2019-2020<sp/>Kris<sp/>Jusiak<sp/>(kris<sp/>at<sp/>jusiak<sp/>dot<sp/>net)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(See<sp/>accompanying<sp/>file<sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="ut_8hpp" kindref="compound">boost/ut.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string_view&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="example_2expect_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref><sp/>=<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">...<sp/>args)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0<sp/>+<sp/>...<sp/>+<sp/>args);<sp/>};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="structdummy__struct" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdummy__struct" kindref="compound">dummy_struct</ref><sp/>{};</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="benchmark_2expect_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">boost::ut;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;operators&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(0_i<sp/>==<sp/><ref refid="example_2expect_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>());</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(2_i<sp/>!=<sp/><ref refid="example_2expect_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>(1,<sp/>2));</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(<ref refid="example_2expect_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>(1)<sp/>&gt;=<sp/>0_i);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(<ref refid="example_2expect_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>(1)<sp/>&lt;=<sp/>1_i);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;message&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{<sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(3_i<sp/>==<sp/><ref refid="example_2expect_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>(1,<sp/>2))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;wrong<sp/>sum&quot;</highlight><highlight class="normal">;<sp/>};</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;expressions&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(0_i<sp/>==<sp/><ref refid="example_2expect_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>()<sp/>and<sp/>42_i<sp/>==<sp/><ref refid="example_2expect_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>(40,<sp/>2));</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(1_i<sp/>==<sp/><ref refid="example_2expect_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>()<sp/>or<sp/>0_i<sp/>==<sp/><ref refid="example_2expect_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>());</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(1_i<sp/>==<sp/><ref refid="example_2expect_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>()<sp/>or<sp/>(<ref refid="example_2expect_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>()<sp/>!=<sp/>0_i<sp/>or<sp/><ref refid="example_2expect_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>(1)<sp/>&gt;<sp/>0_i))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;compound&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;that&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(that<sp/>%<sp/>0<sp/>==<sp/><ref refid="example_2expect_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>());</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(that<sp/>%<sp/>42<sp/>==<sp/><ref refid="example_2expect_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>(40,<sp/>2)<sp/>and<sp/>that<sp/>%<sp/>(1<sp/>+<sp/>2)<sp/>==<sp/><ref refid="example_2expect_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>(1,<sp/>2));</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(that<sp/>%<sp/>1<sp/>!=<sp/>2<sp/>or<sp/>2_i<sp/>&gt;<sp/>3);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;eq/neq/gt/ge/lt/le&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>type_traits::is_stream_insertable_v<sp/>constraint<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(type_traits::is_stream_insertable_v&lt;int&gt;);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!type_traits::is_stream_insertable_v&lt;dummy_struct&gt;);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>seems<sp/>it<sp/>produces<sp/>nice<sp/>error<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>leaving<sp/>this<sp/>as<sp/>easy<sp/>way<sp/>to<sp/>check<sp/>failing<sp/>compilation<sp/>in<sp/>case<sp/>of<sp/>doubt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>expect(eq(dummy_struct{},<sp/>sum(40,<sp/>2)));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>gcc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>expect.cpp:46:14:<sp/>error:<sp/>no<sp/>matching<sp/>function<sp/>for<sp/>call<sp/>to<sp/>‘eq(dummy_struct,<sp/>int)’</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>46<sp/>|<sp/><sp/><sp/><sp/><sp/>expect(eq(dummy_struct{},<sp/>sum(40,<sp/>2)));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>expect.cpp:51:12:<sp/>error:<sp/>no<sp/>matching<sp/>function<sp/>for<sp/>call<sp/>to<sp/>&apos;eq&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>51<sp/>|<sp/><sp/><sp/><sp/><sp/>expect(eq(dummy_struct{},<sp/>sum(40,<sp/>2)));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>^~</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(eq(42,<sp/><ref refid="example_2expect_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>(40,<sp/>2)));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(neq(1,<sp/>2));</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(eq(<ref refid="example_2expect_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>(1),<sp/>1)<sp/>and<sp/>neq(<ref refid="example_2expect_8cpp_1ae99a05a203907d1381a00d9e05425ab7" kindref="member">sum</ref>(1,<sp/>2),<sp/>2));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(eq(1,<sp/>1)<sp/>and<sp/>that<sp/>%<sp/>1<sp/>==<sp/>1<sp/>and<sp/>1_i<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;floating<sp/>points&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(42.1_d<sp/>==<sp/>42.101)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;epsilon=0.1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(42.10_d<sp/>==<sp/>42.101)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;epsilon=0.01&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(42.10000001<sp/>==<sp/>42.1_d)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;epsilon=0.1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;strings&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std::literals::string_view_literals;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std::literals::string_literals;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(</highlight><highlight class="stringliteral">&quot;str&quot;</highlight><highlight class="normal">s<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;str&quot;</highlight><highlight class="normal">s);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(</highlight><highlight class="stringliteral">&quot;str1&quot;</highlight><highlight class="normal">s<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;str2&quot;</highlight><highlight class="normal">s);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(</highlight><highlight class="stringliteral">&quot;str&quot;</highlight><highlight class="normal">sv<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;str&quot;</highlight><highlight class="normal">sv);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(</highlight><highlight class="stringliteral">&quot;str1&quot;</highlight><highlight class="normal">sv<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;str2&quot;</highlight><highlight class="normal">sv);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(</highlight><highlight class="stringliteral">&quot;str&quot;</highlight><highlight class="normal">sv<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;str&quot;</highlight><highlight class="normal">s);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(</highlight><highlight class="stringliteral">&quot;str1&quot;</highlight><highlight class="normal">sv<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;str2&quot;</highlight><highlight class="normal">s);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(</highlight><highlight class="stringliteral">&quot;str&quot;</highlight><highlight class="normal">s<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;str&quot;</highlight><highlight class="normal">sv);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(</highlight><highlight class="stringliteral">&quot;str1&quot;</highlight><highlight class="normal">s<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;str2&quot;</highlight><highlight class="normal">sv);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;types&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(type&lt;int&gt;<sp/>==<sp/>type&lt;int&gt;);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(type&lt;float&gt;<sp/>!=<sp/>type&lt;double&gt;);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>[[maybe_unused]]<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(type&lt;const<sp/>int&gt;<sp/>==<sp/>type&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(i)&gt;);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(type&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(i)&gt;<sp/>!=<sp/>type&lt;int&gt;);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;containers&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>v1{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector<sp/>v2{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(v1<sp/>==<sp/>v2);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(std::vector{</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">}<sp/>!=<sp/>std::vector{</highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(std::array{</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">}<sp/>==<sp/>std::array{</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;constant&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compile_time_v<sp/>=<sp/>42;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>run_time_v<sp/>=<sp/>99;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(constant&lt;42_i<sp/>==<sp/>compile_time_v&gt;<sp/>and<sp/>run_time_v<sp/>==<sp/>99_i);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;convertible&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(std::make_unique&lt;int&gt;()));</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(not<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(std::unique_ptr&lt;int&gt;{}));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">_test<sp/>=<sp/>[]<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(</highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">_b);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(</highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">_b<sp/>or<sp/>not<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">_b);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>((not<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">_b)<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">_b);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="attr_8cpp_1a6d7a86c23770c79c113444caa7b5fd88" kindref="member">expect</ref>(</highlight><highlight class="stringliteral">&quot;has<sp/>value&quot;</highlight><highlight class="normal">_b<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;value<sp/>is<sp/>set&quot;</highlight><highlight class="normal">_b);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/mccakit/desktop/projects/ray_tracer_challange/deps/ut/example/expect.cpp"/>
  </compounddef>
</doxygen>
