<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespacetuple" kind="namespace" language="C++">
    <compoundname>tuple</compoundname>
    <innerclass refid="classtuple_1_1tuple" prot="public">tuple::tuple</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacetuple_1ac5c930222bb77139eb2f130fc9a62c04" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">constexpr</ref> <ref refid="classtuple_1_1tuple" kindref="compound">tuple</ref>&lt; 4 &gt;</type>
        <definition>constexpr tuple&lt; 4 &gt; tuple::point</definition>
        <argsstring>(Ts... args)</argsstring>
        <name>point</name>
        <qualifiedname>tuple::point</qualifiedname>
        <param>
          <type>Ts...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Creates a tuple representing a 3D point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>X, Y, Z coordinates. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A tuple with w = 1.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mccakit/desktop/projects/ray_tracer_challange/src/tuple.cpp" line="77" column="29" bodyfile="/home/mccakit/desktop/projects/ray_tracer_challange/src/tuple.cpp" bodystart="77" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="namespacetuple_1a90ad13297430ff9228509271c63934e1" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classtuple_1_1tuple" kindref="compound">tuple</ref>&lt; 4 &gt;</type>
        <definition>constexpr tuple&lt; 4 &gt; tuple::vector</definition>
        <argsstring>(Ts... args)</argsstring>
        <name>vector</name>
        <qualifiedname>tuple::vector</qualifiedname>
        <param>
          <type>Ts...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Creates a tuple representing a 3D vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>X, Y, Z coordinates. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A tuple with w = 0.0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mccakit/desktop/projects/ray_tracer_challange/src/tuple.cpp" line="93" column="29" bodyfile="/home/mccakit/desktop/projects/ray_tracer_challange/src/tuple.cpp" bodystart="93" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespacetuple_1a4a77219a132c57c2607bec78f9c6438b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">bool</ref></type>
        <definition>bool tuple::operator==</definition>
        <argsstring>(const tuple&lt; N &gt; &amp;ls_tuple, const tuple&lt; N &gt; &amp;rs_tuple)</argsstring>
        <name>operator==</name>
        <qualifiedname>tuple::operator==</qualifiedname>
        <param>
          <type><ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">const</ref> <ref refid="classtuple_1_1tuple" kindref="compound">tuple</ref>&lt; <ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">N</ref> &gt; &amp;</type>
          <declname>ls_tuple</declname>
        </param>
        <param>
          <type><ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">const</ref> <ref refid="classtuple_1_1tuple" kindref="compound">tuple</ref>&lt; <ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">N</ref> &gt; &amp;</type>
          <declname>rs_tuple</declname>
        </param>
        <briefdescription>
<para>Compares two tuples with epsilon 1e-5. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mccakit/desktop/projects/ray_tracer_challange/src/tuple.cpp" line="108" column="6" bodyfile="/home/mccakit/desktop/projects/ray_tracer_challange/src/tuple.cpp" bodystart="108" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespacetuple_1acd2febce3694239c8b4ee17c5fd3c6f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtuple_1_1tuple" kindref="compound">tuple</ref>&lt; <ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">N</ref> &gt;</type>
        <definition>tuple&lt; N &gt; tuple::operator+</definition>
        <argsstring>(const tuple&lt; N &gt; &amp;ls_tuple, const tuple&lt; N &gt; &amp;rs_tuple)</argsstring>
        <name>operator+</name>
        <qualifiedname>tuple::operator+</qualifiedname>
        <param>
          <type><ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">const</ref> <ref refid="classtuple_1_1tuple" kindref="compound">tuple</ref>&lt; <ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">N</ref> &gt; &amp;</type>
          <declname>ls_tuple</declname>
        </param>
        <param>
          <type><ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">const</ref> <ref refid="classtuple_1_1tuple" kindref="compound">tuple</ref>&lt; <ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">N</ref> &gt; &amp;</type>
          <declname>rs_tuple</declname>
        </param>
        <briefdescription>
<para>Adds two tuples. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mccakit/desktop/projects/ray_tracer_challange/src/tuple.cpp" line="123" column="7" bodyfile="/home/mccakit/desktop/projects/ray_tracer_challange/src/tuple.cpp" bodystart="123" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="namespacetuple_1a21b409178b4269066162d66ca2de1511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtuple_1_1tuple" kindref="compound">tuple</ref>&lt; <ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">N</ref> &gt;</type>
        <definition>tuple&lt; N &gt; tuple::operator-</definition>
        <argsstring>(const tuple&lt; N &gt; &amp;ls_tuple, const tuple&lt; N &gt; &amp;rs_tuple)</argsstring>
        <name>operator-</name>
        <qualifiedname>tuple::operator-</qualifiedname>
        <param>
          <type><ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">const</ref> <ref refid="classtuple_1_1tuple" kindref="compound">tuple</ref>&lt; <ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">N</ref> &gt; &amp;</type>
          <declname>ls_tuple</declname>
        </param>
        <param>
          <type><ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">const</ref> <ref refid="classtuple_1_1tuple" kindref="compound">tuple</ref>&lt; <ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">N</ref> &gt; &amp;</type>
          <declname>rs_tuple</declname>
        </param>
        <briefdescription>
<para>Subtracts two tuples. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mccakit/desktop/projects/ray_tracer_challange/src/tuple.cpp" line="136" column="7" bodyfile="/home/mccakit/desktop/projects/ray_tracer_challange/src/tuple.cpp" bodystart="136" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="namespacetuple_1afabd951b45dc1eeac3ea64d87555d786" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtuple_1_1tuple" kindref="compound">tuple</ref>&lt; <ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">N</ref> &gt;</type>
        <definition>tuple&lt; N &gt; tuple::operator*</definition>
        <argsstring>(const tuple&lt; N &gt; &amp;ls_tuple, const float num)</argsstring>
        <name>operator*</name>
        <qualifiedname>tuple::operator*</qualifiedname>
        <param>
          <type><ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">const</ref> <ref refid="classtuple_1_1tuple" kindref="compound">tuple</ref>&lt; <ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">N</ref> &gt; &amp;</type>
          <declname>ls_tuple</declname>
        </param>
        <param>
          <type><ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">const</ref> <ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">float</ref></type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Multiply a tuple with a scalar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mccakit/desktop/projects/ray_tracer_challange/src/tuple.cpp" line="149" column="7" bodyfile="/home/mccakit/desktop/projects/ray_tracer_challange/src/tuple.cpp" bodystart="149" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="namespacetuple_1ab29fd9a4895c983992b34f99ec665ddf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtuple_1_1tuple" kindref="compound">tuple</ref>&lt; <ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">N</ref> &gt;</type>
        <definition>tuple&lt; N &gt; tuple::operator/</definition>
        <argsstring>(const tuple&lt; N &gt; &amp;ls_tuple, const float num)</argsstring>
        <name>operator/</name>
        <qualifiedname>tuple::operator/</qualifiedname>
        <param>
          <type><ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">const</ref> <ref refid="classtuple_1_1tuple" kindref="compound">tuple</ref>&lt; <ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">N</ref> &gt; &amp;</type>
          <declname>ls_tuple</declname>
        </param>
        <param>
          <type><ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">const</ref> <ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">float</ref></type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Divide a tuple with a scalar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mccakit/desktop/projects/ray_tracer_challange/src/tuple.cpp" line="162" column="7" bodyfile="/home/mccakit/desktop/projects/ray_tracer_challange/src/tuple.cpp" bodystart="162" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="namespacetuple_1a86782101bce1f49181cb190917b5359a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">float</ref></type>
        <definition>float tuple::magnitude</definition>
        <argsstring>(const tuple&lt; N &gt; &amp;in_tuple)</argsstring>
        <name>magnitude</name>
        <qualifiedname>tuple::magnitude</qualifiedname>
        <param>
          <type><ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">const</ref> <ref refid="classtuple_1_1tuple" kindref="compound">tuple</ref>&lt; <ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">N</ref> &gt; &amp;</type>
          <declname>in_tuple</declname>
        </param>
        <briefdescription>
<para>Returns the magnitude of a tuple. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mccakit/desktop/projects/ray_tracer_challange/src/tuple.cpp" line="175" column="7" bodyfile="/home/mccakit/desktop/projects/ray_tracer_challange/src/tuple.cpp" bodystart="175" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="namespacetuple_1a57cafb06933427186473ea91d9e197e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtuple_1_1tuple" kindref="compound">tuple</ref>&lt; <ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">N</ref> &gt;</type>
        <definition>tuple&lt; N &gt; tuple::normalize</definition>
        <argsstring>(const tuple&lt; N &gt; &amp;in_tuple)</argsstring>
        <name>normalize</name>
        <qualifiedname>tuple::normalize</qualifiedname>
        <param>
          <type><ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">const</ref> <ref refid="classtuple_1_1tuple" kindref="compound">tuple</ref>&lt; <ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">N</ref> &gt; &amp;</type>
          <declname>in_tuple</declname>
        </param>
        <briefdescription>
<para>Returns the normalized version of the tuple. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mccakit/desktop/projects/ray_tracer_challange/src/tuple.cpp" line="188" column="7" bodyfile="/home/mccakit/desktop/projects/ray_tracer_challange/src/tuple.cpp" bodystart="188" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="namespacetuple_1ae8a3c5721eea747e21d3bd0126c18dce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">float</ref></type>
        <definition>float tuple::dot_product</definition>
        <argsstring>(const tuple&lt; N &gt; &amp;ls_tuple, const tuple&lt; N &gt; &amp;rs_tuple)</argsstring>
        <name>dot_product</name>
        <qualifiedname>tuple::dot_product</qualifiedname>
        <param>
          <type><ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">const</ref> <ref refid="classtuple_1_1tuple" kindref="compound">tuple</ref>&lt; <ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">N</ref> &gt; &amp;</type>
          <declname>ls_tuple</declname>
        </param>
        <param>
          <type><ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">const</ref> <ref refid="classtuple_1_1tuple" kindref="compound">tuple</ref>&lt; <ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">N</ref> &gt; &amp;</type>
          <declname>rs_tuple</declname>
        </param>
        <briefdescription>
<para>Computes the dot product of two tuples. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mccakit/desktop/projects/ray_tracer_challange/src/tuple.cpp" line="202" column="7" bodyfile="/home/mccakit/desktop/projects/ray_tracer_challange/src/tuple.cpp" bodystart="202" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="namespacetuple_1a955debf0a294656c7bd1655e106e7edb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtuple_1_1tuple" kindref="compound">tuple</ref>&lt; 4 &gt;</type>
        <definition>tuple&lt; 4 &gt; tuple::cross_product</definition>
        <argsstring>(const tuple&lt; 4 &gt; &amp;ls_tuple, const tuple&lt; 4 &gt; &amp;rs_tuple)</argsstring>
        <name>cross_product</name>
        <qualifiedname>tuple::cross_product</qualifiedname>
        <param>
          <type><ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">const</ref> <ref refid="classtuple_1_1tuple" kindref="compound">tuple</ref>&lt; 4 &gt; &amp;</type>
          <declname>ls_tuple</declname>
        </param>
        <param>
          <type><ref refid="namespacetuple_1a90ad13297430ff9228509271c63934e1" kindref="member">const</ref> <ref refid="classtuple_1_1tuple" kindref="compound">tuple</ref>&lt; 4 &gt; &amp;</type>
          <declname>rs_tuple</declname>
        </param>
        <briefdescription>
<para>Computes the cross product of two tuples. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mccakit/desktop/projects/ray_tracer_challange/src/tuple.cpp" line="214" column="7" bodyfile="/home/mccakit/desktop/projects/ray_tracer_challange/src/tuple.cpp" bodystart="214" bodyend="221"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Namespace containing 3D tuple math types and operations. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/mccakit/desktop/projects/ray_tracer_challange/src/tuple.cpp" line="6" column="1"/>
  </compounddef>
</doxygen>
